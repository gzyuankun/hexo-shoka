<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Hide your thoughts</title>
        <subtitle></subtitle>
        <icon>http://blog.itshare.work/images/favicon.ico</icon>
        <link>http://blog.itshare.work</link>
        <author>
          <name>yuan kun</name>
        </author>
        <description>解决各种服务器、网络、应用等技术问题，致力于保障系统稳定、高效运行</description>
        <language>zh-CN</language>
        <pubDate>Fri, 12 May 2023 21:42:08 +0800</pubDate>
        <lastBuildDate>Fri, 12 May 2023 21:42:08 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Kubernetes/Kubernetes%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
            <title>Kubernetes读书笔记</title>
            <link>http://blog.itshare.work/Kubernetes/Kubernetes%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
            <category term="Kubernetes" scheme="http://blog.itshare.work/categories/Kubernetes/" />
            <category term="Kubernetes" scheme="http://blog.itshare.work/tags/Kubernetes/" />
            <pubDate>Fri, 12 May 2023 21:42:08 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Kubernetes-读书笔记&#34;&gt;&lt;a href=&#34;#Kubernetes-读书笔记&#34; class=&#34;headerlink&#34; title=&#34;Kubernetes 读书笔记&#34;&gt;&lt;/a&gt;Kubernetes 读书笔记&lt;/h1&gt;&lt;h2 id=&#34;Service&#34;&gt;&lt;a href=&#34;#Service&#34; class=&#34;headerlink&#34; title=&#34;Service&#34;&gt;&lt;/a&gt;Service&lt;/h2&gt;&lt;p&gt;Kubernetes 中， Service 是分布式集群架构的核心 。一个 Service 对象拥有如下关键特征:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有唯一指定的名称(比如 mysql- serve)  &lt;/li&gt;
&lt;li&gt;拥有一个虚拟IP地址(ClusterI 地址)和端口号  &lt;/li&gt;
&lt;li&gt;能够提供某种远程服务能力  &lt;/li&gt;
&lt;li&gt;能够将客户端对服务的访问请求转发到一组容器应用上&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Pod&#34;&gt;&lt;a href=&#34;#Pod&#34; class=&#34;headerlink&#34; title=&#34;Pod&#34;&gt;&lt;/a&gt;Pod&lt;/h2&gt;&lt;p&gt;为什么Kubernetes会设计出一个全新的Pod概念并且Pod有这样特殊的组成结构？原因如下:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为多进程之间的协作提供一个抽象模型，使用Pod作为基本的调度、复制等管理工作的最小单位，让多个应用进程能一起有效地调度和伸缩。  &lt;/li&gt;
&lt;li&gt;Pod里的多个业务容器共享Pause容器的IP,共享Pause容器挂接的Volume,这样既简化了密切关联的业务容器之间的通信问题，也很好地解决了它们之间的文件共享问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查看Pod描述信息&#34;&gt;&lt;a href=&#34;#查看Pod描述信息&#34; class=&#34;headerlink&#34; title=&#34;查看Pod描述信息&#34;&gt;&lt;/a&gt;查看Pod描述信息&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 查看所有的Pod
kubectl get pods
# 查看Pod描述信息
kubectl describe pod xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ClusterIP&#34;&gt;&lt;a href=&#34;#ClusterIP&#34; class=&#34;headerlink&#34; title=&#34;ClusterIP&#34;&gt;&lt;/a&gt;ClusterIP&lt;/h2&gt;&lt;p&gt;ClusterIP地址是一种虚拟IP地址，原因有以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ClusterIP地址仅仅作用于Kubernetes Service这个对象，并由Kubernetes管理和分配IP地址（来源于ClusterIP地址池），与Node和Master所在的物理网络完全无关  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为没有一个“实体网络对象”来响应，所以ClusterIP地址无法被Ping通。ClusterIP地址只能与Service Port组成一个具体的服务访问端点，单独的ClusterIP&lt;br&gt;不具备TCP&amp;#x2F;IP通信的基础  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ClusterIP属于Kubernetes集群这个封闭的空间，集群外的节点要访问这个通信端口，则需要做一些额外的工作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Kubernetes的三种IP&#34;&gt;&lt;a href=&#34;#Kubernetes的三种IP&#34; class=&#34;headerlink&#34; title=&#34;Kubernetes的三种IP&#34;&gt;&lt;/a&gt;Kubernetes的三种IP&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node IP:Node的IP地址&lt;/li&gt;
&lt;li&gt;Pod IP:Pod的P地址&lt;/li&gt;
&lt;li&gt;Service IP:Service的IP地址&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Linux/tomcat/tomcat/</guid>
            <title>tomcat</title>
            <link>http://blog.itshare.work/Linux/tomcat/tomcat/</link>
            <category term="Linux" scheme="http://blog.itshare.work/categories/Linux/" />
            <category term="tomcat" scheme="http://blog.itshare.work/categories/Linux/tomcat/" />
            <category term="Linux从入门到放弃" scheme="http://blog.itshare.work/tags/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/" />
            <pubDate>Sun, 07 May 2023 13:03:38 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;正在创作中请稍等&#34;&gt;&lt;a href=&#34;#正在创作中请稍等&#34; class=&#34;headerlink&#34; title=&#34;正在创作中请稍等&#34;&gt;&lt;/a&gt;正在创作中请稍等&lt;/h1&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/zabbix/zabbix5%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85/</guid>
            <title>zabbix5部署安装</title>
            <link>http://blog.itshare.work/zabbix/zabbix5%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85/</link>
            <category term="zabbix" scheme="http://blog.itshare.work/categories/zabbix/" />
            <category term="Linux从入门到放弃" scheme="http://blog.itshare.work/tags/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/" />
            <pubDate>Tue, 02 May 2023 21:33:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;选择服务器平台&#34;&gt;&lt;a href=&#34;#选择服务器平台&#34; class=&#34;headerlink&#34; title=&#34;选择服务器平台&#34;&gt;&lt;/a&gt;选择服务器平台&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;zabbix版本&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;OS分布&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;OS版本&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;zabbix component&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数据库&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;web server&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5.0LTS&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CentOS&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Server,Forontend,Agent&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MySQL&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Nginx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;安装和配置zabbix&#34;&gt;&lt;a href=&#34;#安装和配置zabbix&#34; class=&#34;headerlink&#34; title=&#34;安装和配置zabbix&#34;&gt;&lt;/a&gt;安装和配置zabbix&lt;/h1&gt;&lt;h2 id=&#34;安装zabbix仓库&#34;&gt;&lt;a href=&#34;#安装zabbix仓库&#34; class=&#34;headerlink&#34; title=&#34;安装zabbix仓库&#34;&gt;&lt;/a&gt;安装zabbix仓库&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm
# yum clean all
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装zabbix&#34;&gt;&lt;a href=&#34;#安装zabbix&#34; class=&#34;headerlink&#34; title=&#34;安装zabbix&#34;&gt;&lt;/a&gt;安装zabbix&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 安装Zabbix server，Web前端，agent
# yum install zabbix-server-mysql zabbix-agent
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装Zabbix-frontend&#34;&gt;&lt;a href=&#34;#安装Zabbix-frontend&#34; class=&#34;headerlink&#34; title=&#34;安装Zabbix frontend&#34;&gt;&lt;/a&gt;安装Zabbix frontend&lt;/h2&gt;&lt;p&gt;启用红帽软件集合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# yum install centos-release-scl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;/etc/yum.repos.d/zabbix.repo and enable zabbix-frontend repository.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 修改enable的值为1
[zabbix-frontend]
...
enabled=1
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装Zabbix frontend 包&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# yum install zabbix-web-mysql-scl zabbix-nginx-conf-scl
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;创建初始数据库&#34;&gt;&lt;a href=&#34;#创建初始数据库&#34; class=&#34;headerlink&#34; title=&#34;创建初始数据库&#34;&gt;&lt;/a&gt;创建初始数据库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注意:MySQL数据库的安装这里不做说明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在数据库主机上运行以下代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# mysql -uroot -p
password
mysql&amp;gt; create database zabbix character set utf8 collate utf8_bin;
mysql&amp;gt; create user zabbix@localhost identified by &amp;#39;password&amp;#39;;
mysql&amp;gt; grant all privileges on zabbix.* to zabbix@localhost;
mysql&amp;gt; set global log_bin_trust_function_creators = 1;
mysql&amp;gt; quit;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;导入初始架构和数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在导入数据库后禁用log_bin_trust_function_creators选项&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# mysql -uroot -p
password
mysql&amp;gt; set global log_bin_trust_function_creators = 0;
mysql&amp;gt; quit;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;zabbix-server配置数据库&#34;&gt;&lt;a href=&#34;#zabbix-server配置数据库&#34; class=&#34;headerlink&#34; title=&#34;zabbix server配置数据库&#34;&gt;&lt;/a&gt;zabbix server配置数据库&lt;/h2&gt;&lt;p&gt;编辑配置文件 &amp;#x2F;etc&amp;#x2F;zabbix&amp;#x2F;zabbix_server.conf&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;DBPassword=password
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;zabbix前端配置PHP&#34;&gt;&lt;a href=&#34;#zabbix前端配置PHP&#34; class=&#34;headerlink&#34; title=&#34;zabbix前端配置PHP&#34;&gt;&lt;/a&gt;zabbix前端配置PHP&lt;/h2&gt;&lt;p&gt;编辑配置文件 &amp;#x2F;etc&amp;#x2F;opt&amp;#x2F;rh&amp;#x2F;rh-nginx116&amp;#x2F;nginx&amp;#x2F;conf.d&amp;#x2F;zabbix.conf uncomment and set ‘listen’ and ‘server_name’ directives.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# listen 80;
# server_name example.com;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑配置文件 &amp;#x2F;etc&amp;#x2F;opt&amp;#x2F;rh&amp;#x2F;rh-php72&amp;#x2F;php-fpm.d&amp;#x2F;zabbix.conf add nginx to listen.acl_users directive.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;listen.acl_users = apache,nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;取消注释，设置正确的时区。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;php_value[date.timezone] = Asia/Shanghai
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;启动Zabbix-server和agent进程&#34;&gt;&lt;a href=&#34;#启动Zabbix-server和agent进程&#34; class=&#34;headerlink&#34; title=&#34;启动Zabbix server和agent进程&#34;&gt;&lt;/a&gt;启动Zabbix server和agent进程&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# systemctl restart zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm
# systemctl enable zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;开始使用zabbix&#34;&gt;&lt;a href=&#34;#开始使用zabbix&#34; class=&#34;headerlink&#34; title=&#34;开始使用zabbix&#34;&gt;&lt;/a&gt;开始使用zabbix&lt;/h1&gt;&lt;p&gt;浏览器中输入&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2V4YW1wbGUuY29tL3phYmJpeA==&#34;&gt;http://example.com/zabbix&lt;/span&gt; （即解析的域名或者IP）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意：使用过程这里不叙述&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Kubernetes/%E6%90%AD%E5%BB%BAKubernetes%E9%9B%86%E7%BE%A4/</guid>
            <title>搭建Kubernetes集群</title>
            <link>http://blog.itshare.work/Kubernetes/%E6%90%AD%E5%BB%BAKubernetes%E9%9B%86%E7%BE%A4/</link>
            <category term="Kubernetes" scheme="http://blog.itshare.work/categories/Kubernetes/" />
            <category term="Kubernetes" scheme="http://blog.itshare.work/tags/Kubernetes/" />
            <pubDate>Tue, 21 Mar 2023 00:14:18 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;搭建Kubernetes集群&#34;&gt;&lt;a href=&#34;#搭建Kubernetes集群&#34; class=&#34;headerlink&#34; title=&#34;搭建Kubernetes集群&#34;&gt;&lt;/a&gt;搭建Kubernetes集群&lt;/h1&gt;&lt;h2 id=&#34;部署前提&#34;&gt;&lt;a href=&#34;#部署前提&#34; class=&#34;headerlink&#34; title=&#34;部署前提&#34;&gt;&lt;/a&gt;部署前提&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用kubeadm部署Kubernetes集群的前提条件&lt;/li&gt;
&lt;li&gt;支持Kubernetes运行的Linux主机，例如Debian、RedHat及其变体等&lt;/li&gt;
&lt;li&gt;每主机2GB以上的内存，以及2颗以上的CPU&lt;/li&gt;
&lt;li&gt;各主机间能够通过网络无障碍通信&lt;/li&gt;
&lt;li&gt;独占的hostname、MAC地址以及product_uuid，主机名能够正常解析&lt;/li&gt;
&lt;li&gt;放行由Kubernetes使用到的各端口，或直接禁用iptables&lt;/li&gt;
&lt;li&gt;禁用各主机的上的Swap设备&lt;/li&gt;
&lt;li&gt;各主机时间同步&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;部署环境&#34;&gt;&lt;a href=&#34;#部署环境&#34; class=&#34;headerlink&#34; title=&#34;部署环境&#34;&gt;&lt;/a&gt;部署环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;OS: Ubuntu 20.04.2 LTS&lt;/li&gt;
&lt;li&gt;Docker：20.10.10，CGroup Driver: systemd&lt;/li&gt;
&lt;li&gt;Kubernetes：v1.26.3, CRI: containerd, CNI: Flannel&lt;/li&gt;
&lt;li&gt;主机&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机IP&lt;/th&gt;
&lt;th&gt;主机名称&lt;/th&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;192.168.32.200&lt;/td&gt;
&lt;td&gt;k8s-master01.org&lt;/td&gt;
&lt;td&gt;master&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;192.168.32.203&lt;/td&gt;
&lt;td&gt;k8s-node01.org&lt;/td&gt;
&lt;td&gt;node01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;192.168.32.204&lt;/td&gt;
&lt;td&gt;k8s-node02.org&lt;/td&gt;
&lt;td&gt;node02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;192.168.32.205&lt;/td&gt;
&lt;td&gt;k8s-node03.org&lt;/td&gt;
&lt;td&gt;node03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;修改主机名称&#34;&gt;&lt;a href=&#34;#修改主机名称&#34; class=&#34;headerlink&#34; title=&#34;修改主机名称&#34;&gt;&lt;/a&gt;修改主机名称&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 修改192.168.32.200的主机名称为k8s-master01.org
# 修改192.168.32.203的主机名称为k8s-node01.org
# 修改192.168.32.204的主机名称为k8s-node02.org
# 修改192.168.32.205的主机名称为k8s-node03.org
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;主机时间同步&#34;&gt;&lt;a href=&#34;#主机时间同步&#34; class=&#34;headerlink&#34; title=&#34;主机时间同步&#34;&gt;&lt;/a&gt;主机时间同步&lt;/h2&gt;&lt;p&gt;在所有主机上安装 chrony  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;## 所有主机上执行
root@k8s-master01:~# apt install -y chrony
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;建议用户配置使用本地的的时间服务器，在节点数量众多时尤其如此。存在可用的本地时间服务器时，修改节点的&amp;#x2F;etc&amp;#x2F;chrony&amp;#x2F;chrony.conf配置文件，并将时间服务器指向相应的主机即可，配置格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;server CHRONY-SERVER-NAME-OR-IP iburst
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;主机名称解析&#34;&gt;&lt;a href=&#34;#主机名称解析&#34; class=&#34;headerlink&#34; title=&#34;主机名称解析&#34;&gt;&lt;/a&gt;主机名称解析&lt;/h2&gt;&lt;p&gt;出于简化配置步骤的目的，本测试环境使用hosts文件进行各节点名称解析，文件内容如下所示。其中，我们使用kubeapi主机名作为API Server在高可用环境中的专用接入名称，也为控制平面的高可用配置留下便于配置的余地。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 编辑/etc/hosts文件加入如下内容
root@k8s-master01:~# vim /etc/hosts
192.168.32.200 k8s-master01.org
192.168.32.203 k8s-node01.org
192.168.32.204 k8s-node02.org
192.168.32.205 k8s-node03.org
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;禁用Swap设备&#34;&gt;&lt;a href=&#34;#禁用Swap设备&#34; class=&#34;headerlink&#34; title=&#34;禁用Swap设备&#34;&gt;&lt;/a&gt;禁用Swap设备&lt;/h2&gt;&lt;p&gt;部署集群时，kubeadm默认会预先检查当前主机是否禁用了Swap设备，并在未禁用时强制终止部署过程。因此，在主机内存资源充裕的条件下，需要禁用所有的Swap设备，否则，就需要在后文的kubeadm init及kubeadm join命令执行时额外使用相关的选项忽略检查错误。&lt;/p&gt;
&lt;p&gt;关闭Swap设备，需要分两步完成。首先是关闭当前已启用的所有Swap设备：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 临时关闭，所有机器执行
root@k8s-master01:~# swapoff -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而后编辑&amp;#x2F;etc&amp;#x2F;fstab配置文件，注释用于挂载Swap设备的所有行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 所有机器执行
root@k8s-master01:~#vim /etc/fstab
# 注释如下一行
#/swap.img      none    swap    sw      0       0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;禁用默认的防火墙服务&#34;&gt;&lt;a href=&#34;#禁用默认的防火墙服务&#34; class=&#34;headerlink&#34; title=&#34;禁用默认的防火墙服务&#34;&gt;&lt;/a&gt;禁用默认的防火墙服务&lt;/h2&gt;&lt;p&gt;Ubuntu和Debian等Linux发行版默认使用ufw（Uncomplicated FireWall）作为前端来简化 iptables的使用，处于启用状态时，它默认会生成一些规则以加强系统安全。出于降低配置复杂度之目的，本文选择直接将其禁用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;root@k8s-master01:~# ufw disable
Firewall stopped and disabled on system startup
root@k8s-master01:~# ufw status
Status: inactive
root@k8s-master01:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装程序包&#34;&gt;&lt;a href=&#34;#安装程序包&#34; class=&#34;headerlink&#34; title=&#34;安装程序包&#34;&gt;&lt;/a&gt;安装程序包&lt;/h2&gt;&lt;p&gt; 提示：以下操作需要在本示例中的所有四台主机上分别进行&lt;/p&gt;
&lt;h3 id=&#34;安装并启动docker&#34;&gt;&lt;a href=&#34;#安装并启动docker&#34; class=&#34;headerlink&#34; title=&#34;安装并启动docker&#34;&gt;&lt;/a&gt;安装并启动docker&lt;/h3&gt;&lt;p&gt; 首先，生成docker-ce相关程序包的仓库，这里以阿里云的镜像服务器为例进行说明&lt;br&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvZG9ja2VyLWNlP3NwbT1hMmM2aC4xMzY1MTEwMi4wLjAuM2UyMjFiMTFld0FsMnI=&#34;&gt;docker-ce镜像_docker-ce下载地址_docker-ce安装教程-阿里巴巴开源镜像站 (aliyun.com)&lt;/span&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# step 1: 安装必要的一些系统工具
sudo apt-get update
sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
# step 2: 安装GPG证书
curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
# Step 3: 写入软件源信息
sudo add-apt-repository &amp;quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&amp;quot;
# Step 4: 更新并安装Docker-CE
sudo apt-get -y update
sudo apt-get -y install docker-ce

# 安装指定版本的Docker-CE:
# Step 1: 查找Docker-CE的版本:
# apt-cache madison docker-ce
#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages
#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages
# Step 2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.1~ce-0~ubuntu-xenial)
# sudo apt-get -y install docker-ce=[VERSION]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本文以为20.10.10版本为例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;root@k8s-node3:~# apt install docker-ce=5:20.10.10~3-0~ubuntu-focal docker-ce-cli=5:20.10.10~3-0~ubuntu-focal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; kubelet需要让docker容器引擎使用systemd作为CGroup的驱动，其默认值为cgroupfs，因而，我们还需要编辑docker的配置文件&amp;#x2F;etc&amp;#x2F;docker&amp;#x2F;daemon.json，添加如下内容，其中的registry-mirrors用于指明使用的镜像加速服务。  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;vim /etc/docker/daemon.json
&amp;#123;
&amp;quot;registry-mirrors&amp;quot;: [
  &amp;quot;https://ung2thfc.mirror.aliyuncs.com&amp;quot;,
  &amp;quot;https://mirror.ccs.tencentyun.com&amp;quot;,
  &amp;quot;https://registry.docker-cn.com&amp;quot;,
  &amp;quot;http://hub-mirror.c.163.com&amp;quot;,
  &amp;quot;https://docker.mirrors.ustc.edu.cn&amp;quot;],
&amp;quot;exec-opts&amp;quot;: [&amp;quot;native.cgroupdriver=systemd&amp;quot;]
&amp;#125;

systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装cri-dockerd&#34;&gt;&lt;a href=&#34;#安装cri-dockerd&#34; class=&#34;headerlink&#34; title=&#34;安装cri-dockerd&#34;&gt;&lt;/a&gt;安装cri-dockerd&lt;/h2&gt;&lt;p&gt;Kubernetes自v1.24移除了对docker-shim的支持，而Docker Engine默认又不支持CRI规范，因而二者将无法直接完成整合。为此，Mirantis和Docker联合创建了cri-dockerd项目，用于为Docker Engine提供一个能够支持到CRI规范的垫片，从而能够让Kubernetes基于CRI控制Docker 。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL01pcmFudGlzL2NyaS1kb2NrZXJk&#34;&gt;项目地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;cri-dockerd项目提供了预制的二进制格式的程序包，用户按需下载相应的系统和对应平台的版本即可完成安装，这里以Ubuntu 2004 64bits系统环境，以及cri-dockerd目前最新的程序版本v0.3.0为例。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.0/cri-dockerd_0.3.0.3-0.ubuntu-focal_amd64.deb

dpkg -i cri-dockerd_0.3.0.3-0.ubuntu-focal_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完成安装后，相应的服务cri-dockerd.service便会自动启动。我们也可以使用如下命令进行验证，若服务处于Running状态即可进行后续步骤 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;root@k8s-master01:~# systemctl status cri-docker.service
● cri-docker.service - CRI Interface for Docker Application Container Engine
     Loaded: loaded (/lib/systemd/system/cri-docker.service; enabled; vendor preset: enabled)
     Active: active (running) since Tue 2023-03-21 10:59:57 CST; 1min 20s ago
TriggeredBy: ● cri-docker.socket
       Docs: https://docs.mirantis.com
   Main PID: 17591 (cri-dockerd)
      Tasks: 7
     Memory: 11.9M
     CGroup: /system.slice/cri-docker.service
             └─17591 /usr/bin/cri-dockerd --container-runtime-endpoint fd://

Mar 21 10:59:57 k8s-master01.org cri-dockerd[17591]: time=&amp;quot;2023-03-21T10:59:57+08:00&amp;quot; level=info msg=&amp;quot;Start docker client with request timeout 0s&amp;quot;
Mar 21 10:59:57 k8s-master01.org cri-dockerd[17591]: time=&amp;quot;2023-03-21T10:59:57+08:00&amp;quot; level=info msg=&amp;quot;Hairpin mode is set to none&amp;quot;
Mar 21 10:59:57 k8s-master01.org cri-dockerd[17591]: time=&amp;quot;2023-03-21T10:59:57+08:00&amp;quot; level=info msg=&amp;quot;Loaded network plugin cni&amp;quot;
Mar 21 10:59:57 k8s-master01.org cri-dockerd[17591]: time=&amp;quot;2023-03-21T10:59:57+08:00&amp;quot; level=info msg=&amp;quot;Docker cri networking managed by network plugin cni&amp;quot;
Mar 21 10:59:57 k8s-master01.org systemd[1]: Started CRI Interface for Docker Application Container Engine.
Mar 21 10:59:58 k8s-master01.org cri-dockerd[17591]: time=&amp;quot;2023-03-21T10:59:57+08:00&amp;quot; level=info msg=&amp;quot;Docker Info: &amp;amp;&amp;#123;ID:WQBA:P7R2:H6ZI:KWU3:FVFW:MHLC:QTT7:CJCX&amp;gt;
Mar 21 10:59:58 k8s-master01.org cri-dockerd[17591]: time=&amp;quot;2023-03-21T10:59:57+08:00&amp;quot; level=info msg=&amp;quot;Setting cgroupDriver cgroupfs&amp;quot;
Mar 21 10:59:58 k8s-master01.org cri-dockerd[17591]: time=&amp;quot;2023-03-21T10:59:57+08:00&amp;quot; level=info msg=&amp;quot;Docker cri received runtime config &amp;amp;RuntimeConfig&amp;#123;Network&amp;gt;
Mar 21 10:59:58 k8s-master01.org cri-dockerd[17591]: time=&amp;quot;2023-03-21T10:59:57+08:00&amp;quot; level=info msg=&amp;quot;Starting the GRPC backend for the Docker CRI interface.&amp;quot;
Mar 21 10:59:58 k8s-master01.org cri-dockerd[17591]: time=&amp;quot;2023-03-21T10:59:57+08:00&amp;quot; level=info msg=&amp;quot;Start cri-dockerd grpc backend&amp;quot;
lines 1-21/21 (END)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装kubelet、kubeadm和kubectl&#34;&gt;&lt;a href=&#34;#安装kubelet、kubeadm和kubectl&#34; class=&#34;headerlink&#34; title=&#34;安装kubelet、kubeadm和kubectl&#34;&gt;&lt;/a&gt;安装kubelet、kubeadm和kubectl&lt;/h2&gt;&lt;p&gt; 首先，在各主机上生成kubelet和kubeadm等相关程序包的仓库，这里以阿里云的镜像服务为例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;apt-get update &amp;amp;&amp;amp; apt-get install -y apt-transport-https
curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - 
cat &amp;lt;&amp;lt;EOF &amp;gt;/etc/apt/sources.list.d/kubernetes.list
deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main
EOF
apt-get update
apt-get install -y kubelet kubeadm kubectl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 安装完成后，要确保kubeadm等程序文件的版本，这将也是后面初始化Kubernetes集群时需要明确指定的版本号  &lt;/p&gt;
&lt;h3 id=&#34;整合kubelet和cri-dockerd&#34;&gt;&lt;a href=&#34;#整合kubelet和cri-dockerd&#34; class=&#34;headerlink&#34; title=&#34;整合kubelet和cri-dockerd&#34;&gt;&lt;/a&gt;整合kubelet和cri-dockerd&lt;/h3&gt;&lt;p&gt;仅支持CRI规范的kubelet需要经由遵循该规范的cri-dockerd完成与docker-ce的整合。&lt;/p&gt;
&lt;h3 id=&#34;配置cri-dockerd&#34;&gt;&lt;a href=&#34;#配置cri-dockerd&#34; class=&#34;headerlink&#34; title=&#34;配置cri-dockerd&#34;&gt;&lt;/a&gt;配置cri-dockerd&lt;/h3&gt;&lt;p&gt; 配置cri-dockerd，确保其能够正确加载到CNI插件。编辑&amp;#x2F;usr&amp;#x2F;lib&amp;#x2F;systemd&amp;#x2F;system&amp;#x2F;cri-docker.service文件，确保其[Service]配置段中的ExecStart的值类似如下内容  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;ExecStart=/usr/bin/cri-dockerd --container-runtime-endpoint fd:// --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.7 --cni-bin-dir=/opt/cni/bin --cni-cache-dir=/var/lib/cni/cache --cni-conf-dir=/etc/cni/net.d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要添加的各配置参数（各参数的值要与系统部署的CNI插件的实际路径相对应）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–network-plugin：指定网络插件规范的类型，这里要使用CNI；&lt;/li&gt;
&lt;li&gt;–cni-bin-dir：指定CNI插件二进制程序文件的搜索目录；&lt;/li&gt;
&lt;li&gt;–cni-cache-dir：CNI插件使用的缓存目录；&lt;/li&gt;
&lt;li&gt;–cni-conf-dir：CNI插件加载配置文件的目录；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置完成后，重载并重启cri-docker.service服务。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;root@k8s-master01:~# systemctl daemon-reload;systemctl restart cri-docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;配置kubelet&#34;&gt;&lt;a href=&#34;#配置kubelet&#34; class=&#34;headerlink&#34; title=&#34;配置kubelet&#34;&gt;&lt;/a&gt;配置kubelet&lt;/h2&gt;&lt;p&gt;配置kubelet，为其指定cri-dockerd在本地打开的Unix Sock文件的路径，该路径一般默认为“&amp;#x2F;run&amp;#x2F;cri-dockerd.sock“。编辑文件&amp;#x2F;etc&amp;#x2F;sysconfig&amp;#x2F;kubelet，为其添加 如下指定参数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：若&amp;#x2F;etc&amp;#x2F;sysconfig目录不存在，则需要先创建该目录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;KUBELET_KUBEADM_ARGS=&amp;quot;--container-runtime=remote --container-runtime-endpoint=/run/cri-dockerd.sock&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要说明的是，该配置也可不进行，而是直接在后面的各kubeadm命令上使用“–cri-socket unix:&amp;#x2F;&amp;#x2F;&amp;#x2F;run&amp;#x2F;cri-dockerd.sock”选项。&lt;/p&gt;
&lt;h3 id=&#34;初始化第一个主节点&#34;&gt;&lt;a href=&#34;#初始化第一个主节点&#34; class=&#34;headerlink&#34; title=&#34;初始化第一个主节点&#34;&gt;&lt;/a&gt;初始化第一个主节点&lt;/h3&gt;&lt;p&gt;该步骤开始尝试构建Kubernetes集群的master节点，配置完成后，各worker节点直接加入到集群中的即可。需要特别说明的是，由kubeadm部署的Kubernetes集群上，集群核心组件kube-apiserver、kube-controller-manager、kube-scheduler和etcd等均会以静态Pod的形式运行，它们所依赖的镜像文件默认来自于registry.k8s.io这一Registry服务之上。但我们无法直接访问该服务，常用的解决办法有如下两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用能够到达该服务的代理服务；&lt;/li&gt;
&lt;li&gt;使用国内的镜像服务器上的服务，例如registry.aliyuncs.com&amp;#x2F;google_containers等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;初始化master节点（在k8s-master01上完成如下操作）&#34;&gt;&lt;a href=&#34;#初始化master节点（在k8s-master01上完成如下操作）&#34; class=&#34;headerlink&#34; title=&#34;初始化master节点（在k8s-master01上完成如下操作）&#34;&gt;&lt;/a&gt;初始化master节点（在k8s-master01上完成如下操作）&lt;/h3&gt;&lt;p&gt; 运行如下命令完成k8s-master01节点的初始化：  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;kubeadm init --image-repository registry.aliyuncs.com/google_containers --kubernetes-version=v1.26.3 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --token-ttl=0 --cri-socket unix:///run/cri-dockerd.sock
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命令中的各选项简单说明如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–image-repository：指定要使用的镜像仓库，默认为registry.k8s.io；&lt;/li&gt;
&lt;li&gt;–kubernetes-version：kubernetes程序组件的版本号，它必须要与安装的kubelet程序包的版本号相同；&lt;/li&gt;
&lt;li&gt;–control-plane-endpoint：控制平面的固定访问端点，可以是IP地址或DNS名称，会被用于集群管理员及集群组件的kubeconfig配置文件的API Server的访问地址；单控制平面部署时可以不使用该选项；&lt;/li&gt;
&lt;li&gt;–pod-network-cidr：Pod网络的地址范围，其值为CIDR格式的网络地址，通常，Flannel网络插件的默认为10.244.0.0&amp;#x2F;16，Project Calico插件的默认值为192.168.0.0&amp;#x2F;16；&lt;/li&gt;
&lt;li&gt;–service-cidr：Service的网络地址范围，其值为CIDR格式的网络地址，默认为10.96.0.0&amp;#x2F;12；通常，仅Flannel一类的网络插件需要手动指定该地址；&lt;/li&gt;
&lt;li&gt;–apiserver-advertise-address：apiserver通告给其他组件的IP地址，一般应该为Master节点的用于集群内部通信的IP地址，0.0.0.0表示节点上所有可用地址；&lt;/li&gt;
&lt;li&gt;–token-ttl：共享令牌（token）的过期时长，默认为24小时，0表示永不过期；为防止不安全存储等原因导致的令牌泄露危及集群安全，建议为其设定过期时长。未设定该选项时，在token过期后，若期望再向集群中加入其它节点，可以使用如下命令重新创建token，并生成节点加入命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;初始化完成后的操作步骤&#34;&gt;&lt;a href=&#34;#初始化完成后的操作步骤&#34; class=&#34;headerlink&#34; title=&#34;初始化完成后的操作步骤&#34;&gt;&lt;/a&gt;初始化完成后的操作步骤&lt;/h4&gt;&lt;p&gt;对于Kubernetes系统的新用户来说，无论使用上述哪种方法，命令运行结束后，请记录最后的kubeadm join命令输出的最后提示的操作步骤。下面的内容是需要用户记录的一个命令输出示例，它提示了后续需要的操作步骤。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 下面是成功完成第一个控制平面节点初始化的提示信息及后续需要完成的步骤
Your Kubernetes control-plane has initialized successfully!

# 为了完成初始化操作，管理员需要额外手动完成几个必要的步骤
To start using your cluster, you need to run the following as a regular user:

# 第1个步骤提示， Kubernetes集群管理员认证到Kubernetes集群时使用的kubeconfig配置文件
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# 我们也可以不做上述设定，而使用环境变量KUBECONFIG为kubectl等指定默认使用的kubeconfig；
Alternatively, if you are the root user, you can run:

export KUBECONFIG=/etc/kubernetes/admin.conf

# 第2个步骤提示，为Kubernetes集群部署一个网络插件，具体选用的插件则取决于管理员；
You should now deploy a pod network to the cluster.
Run &amp;quot;kubectl apply -f [podnetwork].yaml&amp;quot; with one of the options listed at:
https://kubernetes.io/docs/concepts/cluster-administration/addons/

# 第3个步骤提示，向集群添加额外的控制平面节点，但本文会略过该步骤，并将在其它文章介绍其实现方式。
You can now join any number of the control-plane node running the following command on each as root:

# 第4个步骤提示，向集群添加工作节点
Then you can join any number of worker nodes by running the following on each as root:

# 在部署好kubeadm等程序包的各工作节点上以root用户运行类似如下命令；
# 提示：与cri-dockerd结合使用docker-ce作为container runtime时，通常需要为下面的命令
#     额外附加“--cri-socket unix:///run/cri-dockerd.sock”选项；
kubeadm join 192.168.32.200:6443 --token ivu3t7.pogk70dd5pualoz2 \
--discovery-token-ca-cert-hash
sha256:3edb3c8e3e6c944afe65b2616d46b49305c1420e6967c1fab966ddf8f149502d
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;设定kubectl&#34;&gt;&lt;a href=&#34;#设定kubectl&#34; class=&#34;headerlink&#34; title=&#34;设定kubectl&#34;&gt;&lt;/a&gt;设定kubectl&lt;/h3&gt;&lt;p&gt;kubectl是kube-apiserver的命令行客户端程序，实现了除系统部署之外的几乎全部的管理操作，是kubernetes管理员使用最多的命令之一。kubectl需经由API server认证及授权后方能执行相应的管理操作，kubeadm部署的集群为其生成了一个具有管理员权限的认证配置文件&amp;#x2F;etc&amp;#x2F;kubernetes&amp;#x2F;admin.conf，它可由kubectl通过默认的“$HOME&amp;#x2F;.kube&amp;#x2F;config”的路径进行加载。当然，用户也可在kubectl命令上使用–kubeconfig选项指定一个别的位置。&lt;/p&gt;
&lt;p&gt;下面复制认证为Kubernetes系统管理员的配置文件至目标用户（例如当前用户root）的家目录下：&lt;/p&gt;
&lt;p&gt;~# mkdir ~&amp;#x2F;.kube&lt;/p&gt;
&lt;p&gt;~# cp &amp;#x2F;etc&amp;#x2F;kubernetes&amp;#x2F;admin.conf  ~&amp;#x2F;.kube&amp;#x2F;config&lt;/p&gt;
&lt;h3 id=&#34;部署网络插件&#34;&gt;&lt;a href=&#34;#部署网络插件&#34; class=&#34;headerlink&#34; title=&#34;部署网络插件&#34;&gt;&lt;/a&gt;部署网络插件&lt;/h3&gt;&lt;p&gt;Kubernetes系统上Pod网络的实现依赖于第三方插件进行，这类插件有近数十种之多，较为著名的有flannel、calico、canal和kube-router等，简单易用的实现是为CoreOS提供的flannel项目。下面的命令用于在线部署flannel至Kubernetes系统之上：&lt;/p&gt;
&lt;p&gt;首先，下载适配系统及硬件平台环境的flanneld至每个节点，并放置于&amp;#x2F;opt&amp;#x2F;bin&amp;#x2F;目录下。我们这里选用flanneld-amd64，目前最新的版本为v0.21.3，因而，我们需要在集群的每个节点上执行如下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;~# mkdir /opt/cni/bin/

~# curl -L https://github.com/flannel-io/flannel/releases/download/v0.20.2/flanneld-amd64  -o /opt/cni/bin/flanneld

~# chmod +x /opt/cni/bin/flanneld

提示：下载flanneld的地址为 https://github.com/flannel-io/flannel/releases
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 随后，在初始化的第一个master节点k8s-master01上运行如下命令，向Kubernetes部署kube-flannel  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/v0.21.3/Documentation/kube-flannel.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而后使用如下命令确认其输出结果中Pod的状态为“Running”，类似如下命令及其输入的结果所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;root@k8s-master01:~#  kubectl get pods -n kube-flannel
NAME                    READY   STATUS    RESTARTS   AGE
kube-flannel-ds-jgkxd   1/1     Running   0          2m59s
root@k8s-master01:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;验证master节点已经就绪&#34;&gt;&lt;a href=&#34;#验证master节点已经就绪&#34; class=&#34;headerlink&#34; title=&#34;验证master节点已经就绪&#34;&gt;&lt;/a&gt;验证master节点已经就绪&lt;/h3&gt;&lt;p&gt;kubectl get nodes&lt;/p&gt;
&lt;p&gt;上述命令应该会得到类似如下输出，这表示k8s-master01节点已经就绪&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;root@k8s-master01:~# kubectl get nodes
NAME               STATUS   ROLES           AGE   VERSION
k8s-master01.org   Ready    control-plane   62m   v1.26.3
root@k8s-master01:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;添加节点到集群中&#34;&gt;&lt;a href=&#34;#添加节点到集群中&#34; class=&#34;headerlink&#34; title=&#34;添加节点到集群中&#34;&gt;&lt;/a&gt;添加节点到集群中&lt;/h3&gt;&lt;p&gt;下面的两个步骤，需要分别在k8s-node01、k8s-node02和k8s-node03上各自完成。&lt;/p&gt;
&lt;p&gt;1、若未禁用Swap设备，编辑kubelet的配置文件&amp;#x2F;etc&amp;#x2F;default&amp;#x2F;kubelet，设置其忽略Swap启用的状态错误，内容如下：KUBELET_EXTRA_ARGS&amp;#x3D;”–fail-swap-on&amp;#x3D;false”&lt;/p&gt;
&lt;p&gt;2、将节点加入第二步中创建的master的集群中，要使用主节点初始化过程中记录的kubeadm join命令；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;root@k8s-node01:/opt/cni/bin# kubeadm join 192.168.32.200:6443 --token ivu3t7.pogk70dd5pualoz2 --discovery-token-ca-cert-hash sha256:3edb3c8e3e6c944afe65b2616d46b49305c1420e6967c1fab966ddf8f149502d --cri-socket unix:///run/cri-dockerd.sock
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;验证节点添加结果&#34;&gt;&lt;a href=&#34;#验证节点添加结果&#34; class=&#34;headerlink&#34; title=&#34;验证节点添加结果&#34;&gt;&lt;/a&gt;验证节点添加结果&lt;/h3&gt;&lt;p&gt;在每个节点添加完成后，即可通过kubectl验证添加结果。下面的命令及其输出是在所有的三个节点均添加完成后运行的，其输出结果表明三个Worker Node已经准备就绪。&lt;/p&gt;
&lt;p&gt;~# kubectl get nodes&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;root@k8s-master01:~# kubectl get nodes
NAME               STATUS   ROLES           AGE    VERSION
k8s-master01.org   Ready    control-plane   80m    v1.26.3
k8s-node01.org     Ready    &amp;lt;none&amp;gt;          15m    v1.26.3
k8s-node2.org      Ready    &amp;lt;none&amp;gt;          114s   v1.26.3
k8s-node3.org      Ready    &amp;lt;none&amp;gt;          11m    v1.26.3
root@k8s-master01:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;测试应用编排及服务访问&#34;&gt;&lt;a href=&#34;#测试应用编排及服务访问&#34; class=&#34;headerlink&#34; title=&#34;测试应用编排及服务访问&#34;&gt;&lt;/a&gt;测试应用编排及服务访问&lt;/h3&gt;&lt;p&gt;到此为止，一个master，并附带有三个worker的kubernetes集群基础设施已经部署完成，用户随后即可测试其核心功能。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;root@k8s-master01:~# kubectl create deployment test-nginx --image=nginx:latest --replicas=3
deployment.apps/test-nginx created
root@k8s-master01:~# 
root@k8s-master01:~# kubectl create service nodeport test-nginx --tcp=80:80
service/test-nginx created
root@k8s-master01:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 而后，使用如下命令了解Service对象test-nginx使用的NodePort，以便于在集群外部进行访问：  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;root@k8s-master01:~# kubectl get svc -l app=test-nginx
NAME         TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
test-nginx   NodePort   10.100.229.239   &amp;lt;none&amp;gt;        80:31888/TCP   50s
root@k8s-master01:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt; 因此，用户可以于集群外部通过&amp;quot;http://NodeIP:31888&amp;quot;这个URL访问we应用，例如于集群外通过浏览器访问&amp;quot;http://192.168.32.203:31888&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1679388005874.png&#34; alt=&#34;1679388005874&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;&lt;a href=&#34;#小结&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;本文给出了部署Kubernetes分布式集群的具体步骤，并在最后测试了将应用部署并运行于Kubernetes系统上的结果。在读者朋友们自行测试时，cri-dockerd、docker-ce、flannel、kubeadm、kubectl和kubelet的版本均可能存在版本上的不同，也因此可能会存在一定程度上的配置差异，具体调整方式请大家自行参考相关的文档进行&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Docker/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</guid>
            <title>Docker镜像加速</title>
            <link>http://blog.itshare.work/Docker/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</link>
            <category term="Docker" scheme="http://blog.itshare.work/categories/Docker/" />
            <pubDate>Tue, 07 Mar 2023 18:45:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Docker-镜像加速配置&#34;&gt;&lt;a href=&#34;#Docker-镜像加速配置&#34; class=&#34;headerlink&#34; title=&#34;Docker 镜像加速配置&#34;&gt;&lt;/a&gt;Docker 镜像加速配置&lt;/h1&gt;&lt;p&gt;国内从DockerHub拉取镜像有时会遇到困难，此时可以配置镜像加速器。&lt;/p&gt;
&lt;p&gt;Docker官方和国内很多云服务商都提供了国内加速器服务，建议根据运行docker的云平台选择对应的镜像加速服务。&lt;/p&gt;
&lt;p&gt;下面列出国内常用的加速站点，排名不分先后,总体来说阿里云速度较稳定。&lt;/p&gt;
&lt;p&gt;docker中国区官方镜像加速：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;url&#34;&gt;https://registry.docker-cn.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;网易镜像加速：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;url&#34;&gt;http://hub-mirror.c.163.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;中国科技大学镜像加速：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;url&#34;&gt;https://docker.mirrors.ustc.edu.cn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;腾讯云镜像加速：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;url&#34;&gt;https://mirror.ccs.tencentyun.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;阿里云镜像加速：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;url&#34;&gt;https://ung2thfc.mirror.aliyuncs.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改daemon配置文件&amp;#x2F;etc&amp;#x2F;docker&amp;#x2F;daemon.json来使用加速器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;/etc/docker/daemon.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加入如下内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;#123;
&amp;quot;registry-mirrors&amp;quot;: [
  &amp;quot;https://ung2thfc.mirror.aliyuncs.com&amp;quot;,
  &amp;quot;https://mirror.ccs.tencentyun.com&amp;quot;,
  &amp;quot;https://registry.docker-cn.com&amp;quot;,
  &amp;quot;http://hub-mirror.c.163.com&amp;quot;,
  &amp;quot;https://docker.mirrors.ustc.edu.cn&amp;quot;]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加载重启docker&lt;/p&gt;
&lt;p&gt;在终端输入以下命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;systemctl daemon-reload

systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 打开终端执行docker info命令，可见下面信息 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ....
 Labels:
 Experimental: false
 Insecure Registries:
  127.0.0.0/8
 Registry Mirrors:
  https://ung2thfc.mirror.aliyuncs.com/
  https://mirror.ccs.tencentyun.com/
  https://registry.docker-cn.com/
  http://hub-mirror.c.163.com/
  https://docker.mirrors.ustc.edu.cn/
 Live Restore Enabled: false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可以使用如下脚本进行设置，执行前检查自己的环境,下列脚本可以用于新装Docker环境的机器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
&amp;#123;
&amp;quot;registry-mirrors&amp;quot;: [
  &amp;quot;https://ung2thfc.mirror.aliyuncs.com&amp;quot;,
  &amp;quot;https://mirror.ccs.tencentyun.com&amp;quot;,
  &amp;quot;https://registry.docker-cn.com&amp;quot;,
  &amp;quot;http://hub-mirror.c.163.com&amp;quot;,
  &amp;quot;https://docker.mirrors.ustc.edu.cn&amp;quot;]
&amp;#125;
EOF
systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Docker/docker-install/</guid>
            <title>Docker安装部署</title>
            <link>http://blog.itshare.work/Docker/docker-install/</link>
            <category term="Docker" scheme="http://blog.itshare.work/categories/Docker/" />
            <pubDate>Tue, 07 Mar 2023 14:36:10 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;安装和删除方法&#34;&gt;&lt;a href=&#34;#安装和删除方法&#34; class=&#34;headerlink&#34; title=&#34;安装和删除方法&#34;&gt;&lt;/a&gt;安装和删除方法&lt;/h1&gt;&lt;p&gt;官方文档 : &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv&#34;&gt;https://docs.docker.com/engine/install/&lt;/span&gt;&lt;br&gt;阿里云文档: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvZG9ja2VyLWNlP3NwbT1hMmM2aC4xMzY1MTEwMi4wLjAuM2UyMjFiMTFndQ==&#34;&gt;https://developer.aliyun.com/mirror/docker-ce?spm=a2c6h.13651102.0.0.3e221b11gu&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;Ubuntu-安装和删除Docker&#34;&gt;&lt;a href=&#34;#Ubuntu-安装和删除Docker&#34; class=&#34;headerlink&#34; title=&#34;Ubuntu 安装和删除Docker&#34;&gt;&lt;/a&gt;Ubuntu 安装和删除Docker&lt;/h2&gt;&lt;p&gt;官方文档: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vaW5zdGFsbC9saW51eC9kb2NrZXItY2UvdWJ1bnR1Lw==&#34;&gt;https://docs.docker.com/install/linux/docker-ce/ubuntu/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;CentOS-安装和删除Docker&#34;&gt;&lt;a href=&#34;#CentOS-安装和删除Docker&#34; class=&#34;headerlink&#34; title=&#34;CentOS 安装和删除Docker&#34;&gt;&lt;/a&gt;CentOS 安装和删除Docker&lt;/h2&gt;&lt;p&gt;官方文档: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vaW5zdGFsbC9saW51eC9kb2NrZXItY2UvY2VudG9zLw==&#34;&gt;https://docs.docker.com/install/linux/docker-ce/centos/&lt;/span&gt;&lt;br&gt;CentOS 6 因内核太旧，即使支持安装docker，但会有各种问题，不建议安装&lt;br&gt;CentOS 7 的 extras 源虽然可以安装docker，但包比较旧，建议从官方源或镜像源站点下载安装docker&lt;br&gt;CentOS 8 有新技术 podman 代替 docker&lt;br&gt;因此建议在CentOS 7 上安装 docker&lt;br&gt;参考阿里云文档: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvZG9ja2VyLWNlP3NwbT1hMmM2aC4xMzY1MTEwMi4wLjAuM2UyMjFiMTFndQ==&#34;&gt;https://developer.aliyun.com/mirror/docker-ce?spm=a2c6h.13651102.0.0.3e221b11gu&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;二进制安装&#34;&gt;&lt;a href=&#34;#二进制安装&#34; class=&#34;headerlink&#34; title=&#34;二进制安装&#34;&gt;&lt;/a&gt;二进制安装&lt;/h2&gt;&lt;p&gt;本方法适用于无法上网或无法通过包安装方式安装的主机上安装docker&lt;br&gt;安装文档: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vaW5zdGFsbC9saW51eC9kb2NrZXItY2UvYmluYXJpZXMv&#34;&gt;https://docs.docker.com/install/linux/docker-ce/binaries/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;二进制安装下载路径&#34;&gt;&lt;a href=&#34;#二进制安装下载路径&#34; class=&#34;headerlink&#34; title=&#34;二进制安装下载路径&#34;&gt;&lt;/a&gt;二进制安装下载路径&lt;/h3&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb3dubG9hZC5kb2NrZXIuY29tL2xpbnV4Lw==&#34;&gt;https://download.docker.com/linux/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9taXJyb3JzLmFsaXl1bi5jb20vZG9ja2VyLWNlL2xpbnV4L3N0YXRpYy9zdGFibGUveDg2XzY0Lw==&#34;&gt;https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;wget https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/docker-20.10.10.tgz?spm=a2c6h.25603864.0.0.1caf15acK1B2NZ

# 解压
[root@centos7 src]# tar xf docker-20.10.10.tgz

# tree
[root@centos7 src]# tree
.
├── docker
│   ├── containerd
│   ├── containerd-shim
│   ├── containerd-shim-runc-v2
│   ├── ctr
│   ├── docker
│   ├── dockerd
│   ├── docker-init
│   ├── docker-proxy
│   └── runc
└── docker-20.10.10.tgz

1 directory, 10 files
[root@centos7 src]# 

# 添加环境变量
[root@centos7 src]# ln -s /usr/local/src/docker/* /usr/bin/
#启动dockerd服务
[root@centos7 src]#dockerd &amp;amp;&amp;gt;/dev/null &amp;amp;

# 编写service文件
[root@centos7 ~]# cat /lib/systemd/system/docker.service

[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network-online.target docker.socket firewalld.service containerd.service time-set.target
Wants=network-online.target containerd.service

[Service]
Type=notify
ExecStart=/usr/bin/dockerd -H unix://var/run/docker.sock
ExecReload=/bin/kill -s HUP $MAINPID
TimeoutStartSec=0
RestartSec=2
Restart=always
StartLimitBurst=3
StartLimitInterval=60s

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Comment TasksMax if your systemd version does not support it.
# Only systemd 226 and above support this option.
TasksMax=infinity

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process
OOMScoreAdjust=-500

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Ansible/Ansible2/</guid>
            <title>运维自动化工具Ansible(二)</title>
            <link>http://blog.itshare.work/Ansible/Ansible2/</link>
            <category term="Ansible" scheme="http://blog.itshare.work/categories/Ansible/" />
            <pubDate>Sat, 25 Feb 2023 12:21:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Playbook&#34;&gt;&lt;a href=&#34;#Playbook&#34; class=&#34;headerlink&#34; title=&#34;Playbook&#34;&gt;&lt;/a&gt;Playbook&lt;/h1&gt;&lt;h2 id=&#34;playbook介绍&#34;&gt;&lt;a href=&#34;#playbook介绍&#34; class=&#34;headerlink&#34; title=&#34;playbook介绍&#34;&gt;&lt;/a&gt;playbook介绍&lt;/h2&gt;&lt;p&gt;官方链接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Playbook-组成&#34;&gt;&lt;a href=&#34;#Playbook-组成&#34; class=&#34;headerlink&#34; title=&#34;Playbook 组成&#34;&gt;&lt;/a&gt;Playbook 组成&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677299110747.png&#34; alt=&#34;1677299110747&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 playbook(剧本)文件是一个YAML语言编写的文本文件&lt;/li&gt;
&lt;li&gt;通常一个playbook只包括一个play&lt;/li&gt;
&lt;li&gt;一个 play的主要包括两部分: 主机和tasks. 即实现在指定一组主机上执行一个tasks定义好的任务列表。&lt;/li&gt;
&lt;li&gt;一个tasks中可以有一个或多个task任务&lt;/li&gt;
&lt;li&gt;每一个Task本质上就是调用ansible的一个module&lt;/li&gt;
&lt;li&gt;在复杂场景中,一个playbook中也可以包括多个play，实现对多组不同的主机执行不同的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Playbook-与-Ad-Hoc-对比&#34;&gt;&lt;a href=&#34;#Playbook-与-Ad-Hoc-对比&#34; class=&#34;headerlink&#34; title=&#34;Playbook 与 Ad-Hoc 对比&#34;&gt;&lt;/a&gt;Playbook 与 Ad-Hoc 对比&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Playbook是对多个 AD-Hoc 的一种编排组合的实现方式&lt;/li&gt;
&lt;li&gt;Playbook能控制任务执行的先后顺序&lt;/li&gt;
&lt;li&gt;Playbook可以持久保存到文件中从而方便多次调用运行，而Ad-Hoc只能临时运行。&lt;/li&gt;
&lt;li&gt;Playbook适合复杂的重复性的任务，而Ad-Hoc适合做快速简单的一次性任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;YAML-语言&#34;&gt;&lt;a href=&#34;#YAML-语言&#34; class=&#34;headerlink&#34; title=&#34;YAML 语言&#34;&gt;&lt;/a&gt;YAML 语言&lt;/h2&gt;&lt;h3 id=&#34;YAML-语言介绍&#34;&gt;&lt;a href=&#34;#YAML-语言介绍&#34; class=&#34;headerlink&#34; title=&#34;YAML 语言介绍&#34;&gt;&lt;/a&gt;YAML 语言介绍&lt;/h3&gt;&lt;p&gt;YAML：YAML Ain’t Markup Language，即YAML不是标记语言。不过，在开发的这种语言时，YAML的&lt;br&gt;意思其实是：”Yet Another Markup Language”（仍是一种标记语言）&lt;br&gt;YAML是一个可读性高的用来表达资料序列的格式。&lt;br&gt;YAML参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822等。&lt;br&gt;Clark Evans在2001年在首次发表了这种语言，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者&lt;br&gt;目前很多最新的软件比较流行采用此格式的文件存放配置信息，如:ubuntu，anisble，docker，kubernetes等&lt;br&gt;YAML 官方网站：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://www.yaml.org
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ansible 官网:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;YAML-语言特性&#34;&gt;&lt;a href=&#34;#YAML-语言特性&#34; class=&#34;headerlink&#34; title=&#34;YAML 语言特性&#34;&gt;&lt;/a&gt;YAML 语言特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;YAML的可读性好&lt;/li&gt;
&lt;li&gt;YAML和脚本语言的交互性好&lt;/li&gt;
&lt;li&gt;YAML使用实现语言的数据类型&lt;/li&gt;
&lt;li&gt;YAML有一个一致的信息模型&lt;/li&gt;
&lt;li&gt;YAML易于实现&lt;/li&gt;
&lt;li&gt;YAML可以基于流来处理&lt;/li&gt;
&lt;li&gt;YAML表达能力强，扩展性好&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;YAML语法简介&#34;&gt;&lt;a href=&#34;#YAML语法简介&#34; class=&#34;headerlink&#34; title=&#34;YAML语法简介&#34;&gt;&lt;/a&gt;YAML语法简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在单一文件第一行，用连续三个连字号”-“ 开始，还有选择性的连续三个点号( … )用来表示文件结尾&lt;/li&gt;
&lt;li&gt;次行开始正常写Playbook的内容，一般建议写明该Playbook的功能&lt;/li&gt;
&lt;li&gt;使用#号注释代码&lt;/li&gt;
&lt;li&gt;缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结行来实现的&lt;/li&gt;
&lt;li&gt;缩进不支持tab,必须使用空格进行缩进&lt;/li&gt;
&lt;li&gt;缩进的空格数不重要，只要相同层级的元素左对齐即可&lt;/li&gt;
&lt;li&gt;YAML文件内容是区别大小写的，key&amp;#x2F;value的值均需大小写敏感&lt;/li&gt;
&lt;li&gt;多个key&amp;#x2F;value可同行写也可换行写，同行使用，分隔&lt;/li&gt;
&lt;li&gt;key后面冒号要加一个空格 比如: key: value&lt;/li&gt;
&lt;li&gt;value可是个字符串，也可是另一个列表&lt;/li&gt;
&lt;li&gt;YAML文件扩展名通常为yml或yaml&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;支持的数据类型&#34;&gt;&lt;a href=&#34;#支持的数据类型&#34; class=&#34;headerlink&#34; title=&#34;支持的数据类型&#34;&gt;&lt;/a&gt;支持的数据类型&lt;/h3&gt;&lt;p&gt;YAML 支持以下常用几种数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标量：单个的、不可再分的值&lt;/li&gt;
&lt;li&gt;对象：键值对的集合，又称为: 字典（dictionary）&amp;#x2F; 哈希（hashes） &amp;#x2F; 映射（mapping）&lt;/li&gt;
&lt;li&gt;数组：一组按次序排列的值，又称为: 列表（list）&amp;#x2F; 序列（sequence）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;scalar-标量&#34;&gt;&lt;a href=&#34;#scalar-标量&#34; class=&#34;headerlink&#34; title=&#34;scalar 标量&#34;&gt;&lt;/a&gt;scalar 标量&lt;/h4&gt;&lt;p&gt;key对应value&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name: wang
age: 18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用缩进的方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name:
wang
age:
18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;标量是最基本的，不可再分的值，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串 &lt;/li&gt;
&lt;li&gt;布尔值&lt;/li&gt;
&lt;li&gt;整数&lt;/li&gt;
&lt;li&gt;浮点数&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;时间&lt;/li&gt;
&lt;li&gt;日期&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Dictionary-字典&#34;&gt;&lt;a href=&#34;#Dictionary-字典&#34; class=&#34;headerlink&#34; title=&#34;Dictionary 字典&#34;&gt;&lt;/a&gt;Dictionary 字典&lt;/h4&gt;&lt;p&gt;一个字典是由一个或多个key与value构成&lt;br&gt;key和value之间用冒号 ：分隔&lt;br&gt;冒号 : 后面有一个空格&lt;br&gt;所有 k&amp;#x2F;v 可以放在一行，,每个 k&amp;#x2F;v 之间用逗号分隔&lt;br&gt;所有每个 k&amp;#x2F;v 也可以分别放在不同行,一对k&amp;#x2F;v放在独立的一行&lt;br&gt;格式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;account: &amp;#123; name: wang, age: 30 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用缩进方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;account:
name: wang
age: 18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#不同行
# An employee record
name: Example Developer
job: Developer
skill: Elite(社会精英)
#同一行,也可以将key:value放置于&amp;#123;&amp;#125;中进行表示，用,分隔多个key:value
# An employee record
&amp;#123;name: &amp;quot;Example Developer&amp;quot;, job: &amp;quot;Developer&amp;quot;, skill: &amp;quot;Elite&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;List-列表&#34;&gt;&lt;a href=&#34;#List-列表&#34; class=&#34;headerlink&#34; title=&#34;List 列表&#34;&gt;&lt;/a&gt;List 列表&lt;/h4&gt;&lt;p&gt;列表由多个元素组成&lt;br&gt;每个元素放在不同行，每个元素一行,且元素前均使用中横线 - 开头，并且中横线 - 和元素之间有一个空格&lt;br&gt;也可以将所有元素用 [ ] 括起来放在同一行,每个元素之间用逗号分隔&lt;br&gt;格式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;course: [ linux , golang , python ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以写成以 - 开头的多行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;course:
    - linux
    - golang
    - python
course:
    - linux: manjaro
    - golang: gin
    - python: django
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#不同行,行以-开头,后面有一个空格
# A list of tasty fruits
- Apple
- Orange
- Strawberry
- Mango
#同一行
[Apple,Orange,Strawberry,Mango]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：YAML 表示一个家庭&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name: John Smith
age: 41
gender: Male
spouse: &amp;#123; name: Jane Smith, age: 37, gender: Female &amp;#125; # 写在一行里
    name: Jane Smith #也可以写成多行
    age: 37
    gender: Female
    children: [ &amp;#123;name: Jimmy Smith,age: 17, gender: Male&amp;#125;, &amp;#123;name: Jenny Smith, 		age:13, gender: Female&amp;#125;, &amp;#123;name: hao Smith, age: 20, gender: Male &amp;#125; ] #写在一行
    - name: Jimmy Smith #写在多行,更为推荐的写法
        age: 17
        gender: Male
    - &amp;#123;name: Jenny Smith, age: 13, gender: Female&amp;#125;
    - &amp;#123;name: hao Smith, age: 20, gender: Male &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;三种常见的数据格式&#34;&gt;&lt;a href=&#34;#三种常见的数据格式&#34; class=&#34;headerlink&#34; title=&#34;三种常见的数据格式&#34;&gt;&lt;/a&gt;三种常见的数据格式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XML：Extensible Markup Language，可扩展标记语言，可用于数据交换和配置&lt;/li&gt;
&lt;li&gt;JSON：JavaScript Object Notation, JavaScript 对象表记法，主要用来数据交换或配置，不支持注释&lt;/li&gt;
&lt;li&gt;YAML：YAML Ain’t Markup Language YAML 不是一种标记语言， 主要用来配置，大小写敏感，不支持tab&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677310138888.png&#34; alt=&#34;1677310138888&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以用工具互相转换，参考网站：&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuanNvbjJ5YW1sLmNvbS8=&#34;&gt;https://www.json2yaml.com/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iZWpzb24uY29tL2pzb24vanNvbjJ5YW1sLw==&#34;&gt;http://www.bejson.com/json/json2yaml/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;Playbook-核心组件&#34;&gt;&lt;a href=&#34;#Playbook-核心组件&#34; class=&#34;headerlink&#34; title=&#34;Playbook 核心组件&#34;&gt;&lt;/a&gt;Playbook 核心组件&lt;/h2&gt;&lt;p&gt;官方文档&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html#playbook-keywords
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一个playbook 中由多个组件组成,其中所用到的常见组件类型如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hosts 执行的远程主机列表&lt;/li&gt;
&lt;li&gt;Tasks 任务集,由多个task的元素组成的列表实现,每个task是一个字典,一个完整的代码块功能需少元素需包括 name 和 task,一个name只能包括一个task&lt;/li&gt;
&lt;li&gt;Variables 内置变量或自定义变量在playbook中调用&lt;/li&gt;
&lt;li&gt;Templates 模板，可替换模板文件中的变量并实现一些简单逻辑的文件&lt;/li&gt;
&lt;li&gt;Handlers 和 notify 结合使用，由特定条件触发的操作，满足条件方才执行，否则不执行&lt;/li&gt;
&lt;li&gt;tags 标签 指定某条任务执行，用于选择运行playbook中的部分代码。ansible具有幂等性，因此 会自动跳过没有变化的部分，即便如此，有些代码为测试其确实没有发生变化的时间依然会非常地长。此时，如果确信其没有变化，就可以通过tags跳过此些代码片断&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hosts-组件&#34;&gt;&lt;a href=&#34;#hosts-组件&#34; class=&#34;headerlink&#34; title=&#34;hosts 组件&#34;&gt;&lt;/a&gt;hosts 组件&lt;/h3&gt;&lt;p&gt;Hosts：playbook中的每一个play的目的都是为了让特定主机以某个指定的用户身份执行任务。hosts用于指定要执行指定任务的主机，须事先定义在主机清单中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;one.example.com
one.example.com:two.example.com
192.168.1.50
192.168.1.*
Websrvs:dbsrvs #或者，两个组的并集
Websrvs:&amp;amp;dbsrvs #与，两个组的交集
webservers:!dbsrvs #在websrvs组，但不在dbsrvs组
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: websrvs:appsrvs
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remote-user-组件&#34;&gt;&lt;a href=&#34;#remote-user-组件&#34; class=&#34;headerlink&#34; title=&#34;remote_user 组件&#34;&gt;&lt;/a&gt;remote_user 组件&lt;/h3&gt;&lt;p&gt;remote_user: 可用于Host和task中。也可以通过指定其通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务；此外，甚至可以在sudo时使用sudo_user指定sudo时切换的用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: websrvs
  remote_user: root
  tasks:
    - name: test connection
    ping:
    remote_user: magedu
    sudo: yes #默认sudo为root
    sudo_user:wang #sudo为wang
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;task列表和action组件&#34;&gt;&lt;a href=&#34;#task列表和action组件&#34; class=&#34;headerlink&#34; title=&#34;task列表和action组件&#34;&gt;&lt;/a&gt;task列表和action组件&lt;/h3&gt;&lt;p&gt;play的主体部分是task list，task list中有一个或多个task,各个task 按次序逐个在hosts中指定的所有主机上执行，即在所有主机上完成第一个task后，再开始第二个task&lt;br&gt;task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致&lt;br&gt;每个task都应该有其name，用于playbook的执行结果输出，建议其内容能清晰地描述任务执行步骤。&lt;br&gt;如果未提供name，则action的结果将用于输出&lt;br&gt;task两种格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;action: module arguments #示例: action: shell wall hello
module: arguments #建议使用 #示例: shell: wall hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：shell和command模块后面跟命令，而非key&amp;#x3D;value&lt;br&gt;范例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ansible]#cat hello.yml
---
#first yaml文件
#
- hosts: websrvs
  remote_user: root
  gather_facts: no
  tasks:
    - name: task1
      debug: msg=&amp;quot;task1 running&amp;quot;
    - name: task2
      debug: msg=&amp;quot;task2 running&amp;quot;
- hosts: appsrvs
  remote_user: root
  gather_facts: no
  tasks:
    - name: task3
      debug: msg=&amp;quot;task3 running&amp;quot;
    - name: task4
      debug: msg=&amp;quot;task4 running&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;其它组件说明&#34;&gt;&lt;a href=&#34;#其它组件说明&#34; class=&#34;headerlink&#34; title=&#34;其它组件说明&#34;&gt;&lt;/a&gt;其它组件说明&lt;/h3&gt;&lt;p&gt;某任务的状态在运行后为changed时，可通过”notify”通知给相应的handlers任务&lt;br&gt;还可以通过”tags”给task 打标签，可在ansible-playbook命令上使用-t指定进行调用&lt;/p&gt;
&lt;h3 id=&#34;ShellScripts-VS-Playbook-案例&#34;&gt;&lt;a href=&#34;#ShellScripts-VS-Playbook-案例&#34; class=&#34;headerlink&#34; title=&#34;ShellScripts VS Playbook 案例&#34;&gt;&lt;/a&gt;ShellScripts VS Playbook 案例&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#SHELL脚本实现
#!/bin/bash
# 安装Apache
yum install --quiet -y httpd
# 复制配置文件
cp /tmp/httpd.conf /etc/httpd/conf/httpd.conf
cp/tmp/vhosts.conf /etc/httpd/conf.d/
# 启动Apache，并设置开机启动
systemctl enable --now httpd
#Playbook实现
---
- hosts: websrvs
  remote_user: root
  gather_facts: no
  tasks:
  - name: &amp;quot;安装Apache&amp;quot;
    yum: name=httpd
  - name: &amp;quot;复制配置文件&amp;quot;
    copy: src=/tmp/httpd.conf dest=/etc/httpd/conf/
  - name: &amp;quot;复制配置文件&amp;quot;
    copy: src=/tmp/vhosts.conf dest=/etc/httpd/conf.d/
  - name: &amp;quot;启动Apache，并设置开机启动&amp;quot;
    service: name=httpd state=started enabled=yes
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;playbook-命令&#34;&gt;&lt;a href=&#34;#playbook-命令&#34; class=&#34;headerlink&#34; title=&#34;playbook 命令&#34;&gt;&lt;/a&gt;playbook 命令&lt;/h2&gt;&lt;p&gt;格式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook &amp;lt;filename.yml&amp;gt; ... [options]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--syntax,--syntax-check #语法检查,功能相当于bash -n
-C --check #模拟执行dry run ,只检测可能会发生的改变，但不真正执行操作
--list-hosts #列出运行任务的主机
--list-tags #列出tag
--list-tasks #列出task
--limit 主机列表 #只针对主机列表中的特定主机执行
-i INVENTORY, --inventory INVENTORY #指定主机清单文件,通常一个项对应一个主机清单文件
--start-at-task START_AT_TASK #从指定task开始执行,而非从头开始,START_AT_TASK为任务的name
-v -vv -vvv #显示过程
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 一个简单的 playbook&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ansible]#cat hello.yml
---
- hosts: websrvs
  tasks:
    - name: hello
      command: echo &amp;quot;hello ansible&amp;quot;
[root@ansible ansible]#ansible-playbook hello.yml
[root@ansible ansible]#ansible-playbook -v hello.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 检查和限制主机&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook file.yml --check #只检测
ansible-playbook file.yml
ansible-playbook file.yml --limit websrvs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 一个playbook 多个play&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat test_plays.yaml
---
- hosts: localhost
  remote_user: root
  gather_facts: no
  tasks:
    - name: play1
      command: echo &amp;quot;play1&amp;quot;
- hosts: centos7
  remote_user: root
  gather_facts: no
  tasks:
    - name: play2
      command: echo &amp;quot;play2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;忽略错误-ignore-errors&#34;&gt;&lt;a href=&#34;#忽略错误-ignore-errors&#34; class=&#34;headerlink&#34; title=&#34;忽略错误 ignore_errors&#34;&gt;&lt;/a&gt;忽略错误 ignore_errors&lt;/h2&gt;&lt;p&gt;如果一个task出错,默认将不会继续执行后续的其它task&lt;br&gt;利用 ignore_errors: yes 可以忽略此task的错误,继续向下执行playbook其它task&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ansible]#cat test_ignore.yml
---
- hosts: centos7
  tasks:
    - name: error
      command: /bin/false
      ignore_errors: yes
    - name: continue
      command: wall continue
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ansible-playbook案例&#34;&gt;&lt;a href=&#34;#ansible-playbook案例&#34; class=&#34;headerlink&#34; title=&#34;ansible-playbook案例&#34;&gt;&lt;/a&gt;ansible-playbook案例&lt;/h2&gt;&lt;h3 id=&#34;安装nginx&#34;&gt;&lt;a href=&#34;#安装nginx&#34; class=&#34;headerlink&#34; title=&#34;安装nginx&#34;&gt;&lt;/a&gt;安装nginx&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;ymal&#34;&gt;---
- hosts: centos7
# yum install nginx
  remote_user: root
  gather_facts: no
  tasks:
    - name: install nginx
      yum: name=nginx state=present
    - name:
      service: name=nginx state=started enabled=yes
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;卸载httpd&#34;&gt;&lt;a href=&#34;#卸载httpd&#34; class=&#34;headerlink&#34; title=&#34;卸载httpd&#34;&gt;&lt;/a&gt;卸载httpd&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;#remove_httpd.yml
---
- hosts: webservers
  remote_user: root
  gather_facts: no
  tasks:
  - name: remove httpd package
    yum: name=httpd state=absent
  - name: remove apache user
    user: name=apache state=absent
  - name: remove config file
    file: name=/etc/httpd state=absent
  - name: remove web html
    file: name=/data/html/ state=absent
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Playbook中使用handlers和notify&#34;&gt;&lt;a href=&#34;#Playbook中使用handlers和notify&#34; class=&#34;headerlink&#34; title=&#34;Playbook中使用handlers和notify&#34;&gt;&lt;/a&gt;Playbook中使用handlers和notify&lt;/h2&gt;&lt;h3 id=&#34;handlers和notify&#34;&gt;&lt;a href=&#34;#handlers和notify&#34; class=&#34;headerlink&#34; title=&#34;handlers和notify&#34;&gt;&lt;/a&gt;handlers和notify&lt;/h3&gt;&lt;p&gt;Handlers本质是task list ，类似于MySQL中的触发器触发的行为，其中的task与前述的task并没有本质上的不同，只有在关注的资源发生变化时，才会采取一定的操作。&lt;br&gt;Notify对应的action 在所有task都执行完才会最后被触发，这样可避免多个task多次改变发生时每次都触发执行指定的操作，Handlers仅在所有的变化发生完成后一次性地执行指定操作。&lt;br&gt;在notify中列出的操作称为handler，也即notify中调用handler中定义的操作&lt;br&gt;注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果多个task通知了相同的handlers， 此handlers仅会在所有task结束后运行一 次。&lt;/li&gt;
&lt;li&gt;只有notify对应的task发生改变了才会通知handlers， 没有改变则不会触发handlers&lt;/li&gt;
&lt;li&gt;handlers 是在所有前面的tasks都成功执行才会执行,如果前面任何一个task失败,会导致handle跳过执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;案例:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677315798458.png&#34; alt=&#34;1677315798458&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677315812687.png&#34; alt=&#34;1677315812687&#34;&gt;&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677315839869.png&#34; alt=&#34;1677315839869&#34;&gt;&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677315862982.png&#34; alt=&#34;1677315862982&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677315872464.png&#34; alt=&#34;1677315872464&#34;&gt;&lt;/p&gt;
&lt;p&gt;范例: 部署haproxy&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677315902745.png&#34; alt=&#34;1677315902745&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;force-handlers&#34;&gt;&lt;a href=&#34;#force-handlers&#34; class=&#34;headerlink&#34; title=&#34;force_handlers&#34;&gt;&lt;/a&gt;force_handlers&lt;/h3&gt;&lt;p&gt;如果不论前面的task成功与否,都希望handlers能执行, 可以使用force_handlers: yes 强制执行handler&lt;br&gt;范例: 强制调用handlers&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677315975960.png&#34; alt=&#34;1677315975960&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Playbook中使用tags组件&#34;&gt;&lt;a href=&#34;#Playbook中使用tags组件&#34; class=&#34;headerlink&#34; title=&#34;Playbook中使用tags组件&#34;&gt;&lt;/a&gt;Playbook中使用tags组件&lt;/h2&gt;&lt;p&gt;官方文档:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://docs.ansible.com/ansible/latest/user_guide/playbooks_tags.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认情况下， Ansible 在执行一个 playbook 时，会执行 playbook 中所有的任务，在playbook文件中，可以利用tags组件，为特定 task 指定标签，当在执行playbook时，可以只执行特定tags的task,而非整个playbook文件&lt;br&gt;可以一个task对应多个tag,也可以多个task对应同一个tag&lt;br&gt;还有另外3个特殊关键字用于标签, tagged, untagged 和 all,它们分别是仅运行已标记，只有未标记和所有任务。&lt;br&gt;tags 主要用于调试环境&lt;br&gt;范例： tag 标签&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677316033321.png&#34; alt=&#34;1677316033321&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Playbook中使用变量&#34;&gt;&lt;a href=&#34;#Playbook中使用变量&#34; class=&#34;headerlink&#34; title=&#34;Playbook中使用变量&#34;&gt;&lt;/a&gt;Playbook中使用变量&lt;/h2&gt;&lt;p&gt;Playbook中同样也支持变量&lt;br&gt;变量名：仅能由字母、数字和下划线组成，且只能以字母开头&lt;br&gt;变量定义：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;variable=value
variable: value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http_port=80
http_port: 80
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过  调用变量，且变量名前后建议加空格，有时用”“才生效&lt;br&gt;变量来源：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ansible 的 setup facts 远程主机的所有变量都可直接调用&lt;/li&gt;
&lt;li&gt;通过命令行指定变量，优先级最高&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook -e varname=value test.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.在playbook文件中定义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vars:
var1: value1
var2: value2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.在独立的变量YAML文件中定义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: all
vars_files:
- vars.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;在主机清单文件中定义&lt;br&gt;主机（普通）变量：主机组中主机单独定义，优先级高于公共变量&lt;br&gt;组（公共）变量：针对主机组中所有主机定义统一变量&lt;/li&gt;
&lt;li&gt;在项目中针对主机和主机组定义&lt;br&gt;在项目目录中创建 host_vars和group_vars目录&lt;/li&gt;
&lt;li&gt;在role中定义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;变量的优先级从高到低如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-e 选项定义变量 --&amp;gt;playbook中vars_files --&amp;gt; playbook中vars变量定义 --&amp;gt;host_vars/主机名文件 --&amp;gt;主机清单中主机变量--&amp;gt; group_vars/主机组名文件--&amp;gt;group_vars/all文件--&amp;gt; 主机清单组变量
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用-setup-模块中变量&#34;&gt;&lt;a href=&#34;#使用-setup-模块中变量&#34; class=&#34;headerlink&#34; title=&#34;使用 setup 模块中变量&#34;&gt;&lt;/a&gt;使用 setup 模块中变量&lt;/h3&gt;&lt;h4 id=&#34;使用-facts-变量&#34;&gt;&lt;a href=&#34;#使用-facts-变量&#34; class=&#34;headerlink&#34; title=&#34;使用 facts 变量&#34;&gt;&lt;/a&gt;使用 facts 变量&lt;/h4&gt;&lt;p&gt;本模块自动在playbook调用，生成的系统状态信息, 并将之存放在facts变量中&lt;br&gt;facts 包括的信息很多,如: 主机名,IP,CPU,内存,网卡等&lt;br&gt;facts 变量的实际使用场景案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过facts变量获取被控端CPU的个数信息,从而生成不同的Nginx配置文件&lt;/li&gt;
&lt;li&gt;通过facts变量获取被控端内存大小信息,从而生成不同的memcached的配置文件&lt;/li&gt;
&lt;li&gt;通过facts变量获取被控端主机名称信息,从而生成不同的Zabbix配置文件&lt;/li&gt;
&lt;li&gt;通过facts变量获取被控端网卡信息,从而生成不同的主机名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;案例：使用setup变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]# ansible localhost -m setup -a &amp;#39;filter=&amp;quot;ansible_default_ipv4&amp;quot;&amp;#39;
localhost | SUCCESS =&amp;gt; &amp;#123;
    &amp;quot;ansible_facts&amp;quot;: &amp;#123;
        &amp;quot;ansible_default_ipv4&amp;quot;: &amp;#123;
            &amp;quot;address&amp;quot;: &amp;quot;192.168.32.133&amp;quot;,
            &amp;quot;alias&amp;quot;: &amp;quot;ens160&amp;quot;,
            &amp;quot;broadcast&amp;quot;: &amp;quot;192.168.32.255&amp;quot;,
            &amp;quot;gateway&amp;quot;: &amp;quot;192.168.32.2&amp;quot;,
            &amp;quot;interface&amp;quot;: &amp;quot;ens160&amp;quot;,
            &amp;quot;macaddress&amp;quot;: &amp;quot;00:0c:29:7c:80:cd&amp;quot;,
            &amp;quot;mtu&amp;quot;: 1500,
            &amp;quot;netmask&amp;quot;: &amp;quot;255.255.255.0&amp;quot;,
            &amp;quot;network&amp;quot;: &amp;quot;192.168.32.0&amp;quot;,
            &amp;quot;prefix&amp;quot;: &amp;quot;24&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;ether&amp;quot;
        &amp;#125;
    &amp;#125;,
    &amp;quot;changed&amp;quot;: false
&amp;#125;
[root@ansible ~]# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：显示ens33的网卡的IP地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- hosts: centos7
  tasks:
    - name: show ens33 ip
      debug:
        msg: IP address &amp;#123;&amp;#123; ansible_ens33.ipv4.address &amp;#125;&amp;#125;
        #msg: IP address &amp;#123;&amp;#123; ansible_facts[&#34;ens33&#34;][&#34;ipv4&#34;][&#34;address&#34;] &amp;#125;&amp;#125;
        #msg: IP address &amp;#123;&amp;#123; ansible_facts.ens33.ipv4.address &amp;#125;&amp;#125;
        #msg: IP address &amp;#123;&amp;#123; ansible_default_ipv4.address &amp;#125;&amp;#125;
        #msg: IP address &amp;#123;&amp;#123; ansible_ens33.ipv4.address &amp;#125;&amp;#125;
        #msg: IP address &amp;#123;&amp;#123; ansible_ens33.ipv4.address.split(&#39;.&#39;)[-1] &amp;#125;&amp;#125;  #取IP中的最后一个数字
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ansible]# ansible-playbook -v show_ip.yml 
Using /etc/ansible/ansible.cfg as config file

PLAY [centos7] *************************************************************************************************************************

TASK [Gathering Facts] *****************************************************************************************************************
ok: [192.168.32.179]
ok: [192.168.32.178]

TASK [show ens33 ip] *******************************************************************************************************************
ok: [192.168.32.178] =&amp;gt; &amp;#123;
    &amp;quot;msg&amp;quot;: &amp;quot;IP address 192.168.32.178&amp;quot;
&amp;#125;
ok: [192.168.32.179] =&amp;gt; &amp;#123;
    &amp;quot;msg&amp;quot;: &amp;quot;IP address 192.168.32.179&amp;quot;
&amp;#125;

PLAY RECAP *****************************************************************************************************************************
192.168.32.178             : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
192.168.32.179             : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

[root@ansible ansible]# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：修改主机名称为web-IP&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: centos7
  tasks:
  - name: 打印facts变量
    debug: msg=&amp;#123;&amp;#123; ansible_ens33.ipv4.address &amp;#125;&amp;#125;
  - name: 修改主机名
    hostname: name=web-&amp;#123;&amp;#123; ansible_ens33.ipv4.address &amp;#125;&amp;#125;
  #- name: 获取facts变量提取IP地址，以.结尾的最后一列,修改主机名为web-hostid
    #hostname: name=web-&amp;#123;&amp;#123; ansible_ens33.ipv4.address.split(&#39;.&#39;)[-1] &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ansible]# ansible-playbook change_hostname.yml 

PLAY [centos7] *************************************************************************************************************************

TASK [Gathering Facts] *****************************************************************************************************************
ok: [192.168.32.178]
ok: [192.168.32.179]

TASK [打印facts变量] *******************************************************************************************************************
ok: [192.168.32.178] =&amp;gt; &amp;#123;
    &amp;quot;msg&amp;quot;: &amp;quot;192.168.32.178&amp;quot;
&amp;#125;
ok: [192.168.32.179] =&amp;gt; &amp;#123;
    &amp;quot;msg&amp;quot;: &amp;quot;192.168.32.179&amp;quot;
&amp;#125;

TASK [修改主机名] **********************************************************************************************************************
changed: [192.168.32.179]
changed: [192.168.32.178]

PLAY RECAP *****************************************************************************************************************************
192.168.32.178             : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
192.168.32.179             : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

[root@ansible ansible]# 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;性能优化&#34;&gt;&lt;a href=&#34;#性能优化&#34; class=&#34;headerlink&#34; title=&#34;性能优化&#34;&gt;&lt;/a&gt;性能优化&lt;/h4&gt;&lt;p&gt;每次执行playbook,默认会收集每个主机的所有facts变量,将会导致速度很慢,可以采用下面方法加速&lt;br&gt;方法1&lt;br&gt;关闭facts采集加速执行,此方法将导致无法使用facts变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: all
  gather_facts: no
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方法2&lt;br&gt;当使用 gather_facts: no 关闭 facts，确实能加速 Ansible 执行，但是有时候又需要使用 facts 中的内容，还希望执行的速度快，这时候可以设置facts 的缓存,将facts变量信息存在redis服务器中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]# cat /etc/ansible/ansible.cfg
[defaults]
# smart 表示默认收集 facts，但 facts 已有的情况下不会收集，即使用缓存 facts
# implicit 表示默认收集 facts，要禁止收集，必须使用 gather_facts: False
# explicit 则表示默认不收集，要显式收集，必须使用gather_facts: True
gathering = smart #在使用 facts 缓存时设置为smart
fact_caching_timeout = 86400 #缓存时长
fact_caching = redis #缓存存在redis中
fact_caching_connection = 10.0.0.100:6379:0 #0表示redis的0号数据库
#若redis设置了密码
fact_caching_connection = 10.0.0.100:6379:0:password
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;register-注册变量&#34;&gt;&lt;a href=&#34;#register-注册变量&#34; class=&#34;headerlink&#34; title=&#34;register 注册变量&#34;&gt;&lt;/a&gt;register 注册变量&lt;/h3&gt;&lt;p&gt;在playbook中可以使用register将捕获命令的输出保存在临时变量中，方便后续调用此变量,比如可以使用debug模块进行显示输出&lt;br&gt;范例: 利用debug 模块输出变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- hosts: centos7
  tasks:
    - name: get variable
      shell: hostname
      register: name
    - name: print variable
      debug:
        msg: &amp;quot;&amp;#123;&amp;#123; name &amp;#125;&amp;#125;&amp;quot; #输出register注册的name变量的全部信息,注意变量要加&amp;quot; &amp;quot;引起来
         #msg: &amp;quot;&amp;#123;&amp;#123; name.cmd &amp;#125;&amp;#125;&amp;quot; #显示命令
         #msg: &amp;quot;&amp;#123;&amp;#123; name.rc &amp;#125;&amp;#125;&amp;quot; #显示命令成功与否
         #msg: &amp;quot;&amp;#123;&amp;#123; name.stdout &amp;#125;&amp;#125;&amp;quot; #显示命令的输出结果为字符串形式,所有结果都放在一行里显示,适合于结果是单行输出
        #msg: &amp;quot;&amp;#123;&amp;#123; name.stdout_lines &amp;#125;&amp;#125;&amp;quot; #显示命令的输出结果为列表形式,逐行标准输出,适用于多行显示
        #msg: &amp;quot;&amp;#123;&amp;#123; name[&#39;stdout_lines&#39;] &amp;#125;&amp;#125;&amp;quot; #显示命令的执行结果为列表形式,和效果上面相同
        #msg: &amp;quot;&amp;#123;&amp;#123; name.stdout_lines[0] &amp;#125;&amp;#125;&amp;quot; #显示命令的输出结果的列表中的第一个元素
#说明 第一个 task 中，使用了 register 注册变量名为 name ；当 shell 模块执行完毕后，会将数据放到该变量中。第二给 task 中，使用了 debug 模块，并从变量name中获取数据。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ansible]# ansible-playbook -C register.yml 

PLAY [centos7] *************************************************************************************************************************

TASK [Gathering Facts] *****************************************************************************************************************
ok: [192.168.32.179]
ok: [192.168.32.178]

TASK [get variable] ********************************************************************************************************************
skipping: [192.168.32.179]
skipping: [192.168.32.178]

TASK [print variable] ******************************************************************************************************************
ok: [192.168.32.178] =&amp;gt; &amp;#123;
    &amp;quot;msg&amp;quot;: &amp;#123;
        &amp;quot;changed&amp;quot;: false,
        &amp;quot;cmd&amp;quot;: &amp;quot;hostname&amp;quot;,
        &amp;quot;delta&amp;quot;: null,
        &amp;quot;end&amp;quot;: null,
        &amp;quot;failed&amp;quot;: false,
        &amp;quot;msg&amp;quot;: &amp;quot;Command would have run if not in check mode&amp;quot;,
        &amp;quot;rc&amp;quot;: 0,
        &amp;quot;skipped&amp;quot;: true,
        &amp;quot;start&amp;quot;: null,
        &amp;quot;stderr&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;stderr_lines&amp;quot;: [],
        &amp;quot;stdout&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;stdout_lines&amp;quot;: []
    &amp;#125;
&amp;#125;
ok: [192.168.32.179] =&amp;gt; &amp;#123;
    &amp;quot;msg&amp;quot;: &amp;#123;
        &amp;quot;changed&amp;quot;: false,
        &amp;quot;cmd&amp;quot;: &amp;quot;hostname&amp;quot;,
        &amp;quot;delta&amp;quot;: null,
        &amp;quot;end&amp;quot;: null,
        &amp;quot;failed&amp;quot;: false,
        &amp;quot;msg&amp;quot;: &amp;quot;Command would have run if not in check mode&amp;quot;,
        &amp;quot;rc&amp;quot;: 0,
        &amp;quot;skipped&amp;quot;: true,
        &amp;quot;start&amp;quot;: null,
        &amp;quot;stderr&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;stderr_lines&amp;quot;: [],
        &amp;quot;stdout&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;stdout_lines&amp;quot;: []
    &amp;#125;
&amp;#125;

PLAY RECAP *****************************************************************************************************************************
192.168.32.178             : ok=2    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
192.168.32.179             : ok=2    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   

[root@ansible ansible]# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 安装启动服务并检查&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- hosts: centos7
  vars:
    package_name: nginx
    service_name: nginx
  tasks:
  - name: install &amp;#123;&amp;#123; package_name &amp;#125;&amp;#125;
    yum: name=&amp;#123;&amp;#123; package_name &amp;#125;&amp;#125;
  - name: start &amp;#123;&amp;#123; service_name &amp;#125;&amp;#125;
    service: name=&amp;#123;&amp;#123; service_name &amp;#125;&amp;#125; state=started enabled=yes
  - name: check
    shell: ps axu|grep &amp;#123;&amp;#123; service_name &amp;#125;&amp;#125;
    register: check_service
  - name: debug
    debug:
      msg: &amp;quot;&amp;#123;&amp;#123; check_service.stdout_lines &amp;#125;&amp;#125;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 修改主机名形式为 web_&amp;lt;随机字符&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: centos7
  tasks:
  - name: genarate random
    shell:
      cmd: openssl rand -base64 12 |tr -dc &amp;#39;[:alnum:]&amp;#39;
    register:
      num
  - name: show random
    debug:
      msg: &amp;quot;&amp;#123;&amp;#123; num &amp;#125;&amp;#125;&amp;quot;
  - name: change hostname
    hostname:
      name: web-&amp;#123;&amp;#123; num.stdout &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 修改主机名形式为 web_随机数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: centos7
  tasks:
  - name: 定义一个随机数，设定为变量，然后后续调用
    shell: echo $((RANDOM%255))
    register: web_number
  - name: 使用debug输出变量结果
    debug: msg=&amp;#123;&amp;#123; web_number &amp;#125;&amp;#125;
  - name: 使用hostname模块将主机名修改为web_随机数
    hostname: name=web_&amp;#123;&amp;#123; web_number.stdout &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 批量修改主机名为随机字符&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: centos7
  vars:
    host: web
    domain: wang.org
  tasks:
  - name: get variable
    shell: echo $RANDOM | md5sum | cut -c 1-8
    register: get_random
  - name: print variable
    debug:
      msg: &amp;quot;&amp;#123;&amp;#123; get_random.stdout &amp;#125;&amp;#125;&amp;quot;
  - name: set hostname
    hostname: name=&amp;#123;&amp;#123; host &amp;#125;&amp;#125;-&amp;#123;&amp;#123; get_random.stdout &amp;#125;&amp;#125;.&amp;#123;&amp;#123; domain &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 批量修改主机名为IP最后1位数字&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: centos7
  vars:
    host: web
    domain: wang.org
  tasks:
    - name: get variable
      shell: hostname -I | awk &amp;#39;&amp;#123;print $1&amp;#125;&amp;#39;
      register: get_ip
    - name: print variable
      debug:
        msg: &amp;quot;&amp;#123;&amp;#123; get_ip.stdout.split(&#39;.&#39;)[3] &amp;#125;&amp;#125;&amp;quot;
    - name: set hostname
      hostname: name=&amp;#123;&amp;#123; host &amp;#125;&amp;#125;-&amp;#123;&amp;#123; get_ip.stdout.split(&#39;.&#39;)[3] &amp;#125;&amp;#125;.&amp;#123;&amp;#123; domain &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;在-Playbook-命令行中定义变量&#34;&gt;&lt;a href=&#34;#在-Playbook-命令行中定义变量&#34; class=&#34;headerlink&#34; title=&#34;在 Playbook 命令行中定义变量&#34;&gt;&lt;/a&gt;在 Playbook 命令行中定义变量&lt;/h3&gt;&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- hosts: centos7
  remote_user: root
  tasks:
  - name: install nginx
    yum: name=&amp;#123;&amp;#123; pkname &amp;#125;&amp;#125; state=present
    
    
[root@ansible ~]#ansible-playbook -e pkname=nginx var2.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#也可以将多个变量放在一个文件中
[root@ansible ~]#cat vars
pkname1: memcached
pkname2: vsftpd
[root@ansible ~]#vim var2.yml
---
- hosts: centos7
  remote_user: root
  tasks:
  - name: install package &amp;#123;&amp;#123; pkname1 &amp;#125;
    yum: name=&amp;#123;&amp;#123; pkname1 &amp;#125;&amp;#125; state=present
  - name: install package &amp;#123;&amp;#123; pkname2 &amp;#125;
    yum: name=&amp;#123;&amp;#123; pkname2 &amp;#125;&amp;#125; state=present
[root@ansible ~]#ansible-playbook -e pkname1=memcached -e pkname2=httpd var2.yml
[root@ansible ~]#ansible-playbook -e &amp;#39;@vars&amp;#39; var2.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;在playbook文件中定义变量&#34;&gt;&lt;a href=&#34;#在playbook文件中定义变量&#34; class=&#34;headerlink&#34; title=&#34;在playbook文件中定义变量&#34;&gt;&lt;/a&gt;在playbook文件中定义变量&lt;/h3&gt;&lt;p&gt;此方式定义的是私有变量,即只能在当前playbook中使用,不能被其它Playbook共用&lt;br&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: webservers
  remote_user: root
  vars:
    username: user1
    groupname: group1
  tasks:
  - name: create group &amp;#123;&amp;#123; groupname &amp;#125;&amp;#125;
    group: name=&amp;#123;&amp;#123; groupname &amp;#125;&amp;#125; state=present
  - name: create user &amp;#123;&amp;#123; username &amp;#125;&amp;#125;
    user: name=&amp;#123;&amp;#123; username &amp;#125;&amp;#125; group=&amp;#123;&amp;#123; groupname &amp;#125;&amp;#125; state=present
    
[root@ansible ~]#ansible-playbook -e &amp;quot;username=user2 groupname=group2&amp;quot; var3.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：变量的相互调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- hosts: centos7
  remote_user: root
  vars:
    collect_info: &amp;quot;/data/test/&amp;#123;&amp;#123;ansible_default_ipv4[&#39;address&#39;]&amp;#125;&amp;#125;/&amp;quot;
  tasks:
  - name: create IP directory
    file: name=&amp;quot;&amp;#123;&amp;#123;collect_info&amp;#125;&amp;#125;&amp;quot; state=directory
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用专用的公共的变量文件&#34;&gt;&lt;a href=&#34;#使用专用的公共的变量文件&#34; class=&#34;headerlink&#34; title=&#34;使用专用的公共的变量文件&#34;&gt;&lt;/a&gt;使用专用的公共的变量文件&lt;/h3&gt;&lt;p&gt;可以在一个独立的playbook文件中定义公共变量，在其它的playbook文件中可以引用变量文件中的变量&lt;br&gt;此方式比playbook中定义的变量优化级高&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim vars.yml
---
# variables file
package_name: mariadb-server
service_name: mariadb

vim var5.yml
---
#install package and start service
- hosts: dbsrvs
  remote_user: root
  vars_files:
  # 指定变量文件名
    - vars.yml
  tasks:
  - name: install package
    yum: name=&amp;#123;&amp;#123; package_name &amp;#125;&amp;#125;
    tags: install
  - name: start service
    service: name=&amp;#123;&amp;#123; service_name &amp;#125;&amp;#125; state=started enabled=yes
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;在主机清单中定义主机和主机组的变量&#34;&gt;&lt;a href=&#34;#在主机清单中定义主机和主机组的变量&#34; class=&#34;headerlink&#34; title=&#34;在主机清单中定义主机和主机组的变量&#34;&gt;&lt;/a&gt;在主机清单中定义主机和主机组的变量&lt;/h3&gt;&lt;h4 id=&#34;所有项目的主机变量&#34;&gt;&lt;a href=&#34;#所有项目的主机变量&#34; class=&#34;headerlink&#34; title=&#34;所有项目的主机变量&#34;&gt;&lt;/a&gt;所有项目的主机变量&lt;/h4&gt;&lt;p&gt;在inventory 主机清单文件中为指定的主机定义变量以便于在playbook中使用&lt;br&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[webservers]
www1.wang.org http_port=80 maxRequestsPerChild=808
www2.wang.org http_port=8080 maxRequestsPerChild=909
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;所有项目的组（公共）变量&#34;&gt;&lt;a href=&#34;#所有项目的组（公共）变量&#34; class=&#34;headerlink&#34; title=&#34;所有项目的组（公共）变量&#34;&gt;&lt;/a&gt;所有项目的组（公共）变量&lt;/h4&gt;&lt;p&gt;在inventory 主机清单文件中赋予给指定组内所有主机上的在playbook中可用的变量，如果和主机变是同名，优先级低于主机变量&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[webservers:vars]
http_port=80
ntp_server=ntp.wang.org
nfs_server=nfs.wang.org
[all:vars]
# --------- Main Variables ---------------
# Cluster container-runtime supported: docker, containerd
CONTAINER_RUNTIME=&amp;quot;docker&amp;quot;
# Network plugins supported: calico, flannel, kube-router, cilium, kube-ovn
CLUSTER_NETWORK=&amp;quot;calico&amp;quot;
# Service proxy mode of kube-proxy: &amp;#39;iptables&amp;#39; or &amp;#39;ipvs&amp;#39;
PROXY_MODE=&amp;quot;ipvs&amp;quot;
# K8S Service CIDR, not overlap with node(host) networking
SERVICE_CIDR=&amp;quot;192.168.0.0/16&amp;quot;
# Cluster CIDR (Pod CIDR), not overlap with node(host) networking
CLUSTER_CIDR=&amp;quot;172.16.0.0/16&amp;quot;
# NodePort Range
NODE_PORT_RANGE=&amp;quot;20000-60000&amp;quot;
# Cluster DNS Domain
CLUSTER_DNS_DOMAIN=&amp;quot;magedu.local.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#vim /etc/ansible/hosts
[webservers]
10.0.0.8 hname=www1 domain=magedu.io
10.0.0.7 hname=www2
[webservers:vars]
mark=&amp;quot;-&amp;quot;
[all:vars]
domain=wang.org
[root@ansible ~]#ansible webservers -m hostname -a &amp;#39;name=&amp;#123;&amp;#123; hname &amp;#125;&amp;#125;&amp;#123;&amp;#123; mark &amp;#125;&amp;#125;
&amp;#123;&amp;#123; domain &amp;#125;&amp;#125;&amp;#39;
#命令行指定变量：
[root@ansible ~]#ansible webservers -e domain=magedu.cn -m hostname -a &amp;#39;name=
&amp;#123;&amp;#123; hname &amp;#125;&amp;#125;&amp;#123;&amp;#123; mark &amp;#125;&amp;#125;&amp;#123;&amp;#123; domain &amp;#125;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;针对当前项目的主机和主机组的变量&#34;&gt;&lt;a href=&#34;#针对当前项目的主机和主机组的变量&#34; class=&#34;headerlink&#34; title=&#34;针对当前项目的主机和主机组的变量&#34;&gt;&lt;/a&gt;针对当前项目的主机和主机组的变量&lt;/h3&gt;&lt;p&gt;上面的方式是针对所有项目都有效,而官方更建议的方式是使用ansible特定项目的主机变量和组变量.生产建议在每个项目对应的目录中创建额外的两个变量目录,分别是host_vars和group_vars&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;host_vars下面的文件名和主机清单主机名一致,针对单个主机进行变量定义格式:host_vars&amp;#x2F;hostname&lt;/li&gt;
&lt;li&gt;group_vars下面的文件名和主机清单中组名一致, 针对单个组进行变量定义格式: group_vars&amp;#x2F;groupname&lt;/li&gt;
&lt;li&gt;group_vars&amp;#x2F;all文件内定义的变量对所有组都有效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;范例: 特定项目的主机和组变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ansible]#pwd
/data/ansible
[root@ansible ansible]#mkdir host_vars
[root@ansible ansible]#mkdir group_vars
[root@ansible ansible]#cat host_vars/10.0.0.8
id: 2
[root@ansible ansible]#cat host_vars/10.0.0.7
id: 1
[root@ansible ansible]#cat group_vars/webservers
name: web
[root@ansible ansible]#cat group_vars/all
domain: wang.org
[root@ansible ansible]#tree host_vars/ group_vars/
host_vars/
├── 10.0.0.7
└── 10.0.0.8
group_vars/
├── all
└── webservers
0 directories, 4 files
[root@ansible ansible]#cat test.yml
- hosts: webservers
tasks:
- name: get variable
command: echo &amp;quot;&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&amp;#123;&amp;#123;id&amp;#125;&amp;#125;.&amp;#123;&amp;#123;domain&amp;#125;&amp;#125;&amp;quot;
register: result
- name: print variable
debug:
msg: &amp;quot;&amp;#123;&amp;#123;result.stdout&amp;#125;&amp;#125;&amp;quot;
[root@ansible ansible]#ansible-playbook test.yml
PLAY [webservers]
********************************************************************************
***************************************
TASK [Gathering Facts]
********************************************************************************
*******************************
ok: [10.0.0.7]
ok: [10.0.0.8]
TASK [get variable]
********************************************************************************
**********************************
changed: [10.0.0.7]
changed: [10.0.0.8]
TASK [print variable]
********************************************************************************
********************************
ok: [10.0.0.7] =&amp;gt; &amp;#123;
&amp;quot;msg&amp;quot;: &amp;quot;web1.wang.org&amp;quot;
&amp;#125;
ok: [10.0.0.8] =&amp;gt; &amp;#123;
&amp;quot;msg&amp;quot;: &amp;quot;web2.wang.org&amp;quot;
&amp;#125;
PLAY RECAP
********************************************************************************
*******************************************
10.0.0.7 : ok=3 changed=1 unreachable=0 failed=0
skipped=0 rescued=0 ignored=0
10.0.0.8 : ok=3 changed=1 unreachable=0 failed=0
skipped=0 rescued=0 ignored=0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Template-模板&#34;&gt;&lt;a href=&#34;#Template-模板&#34; class=&#34;headerlink&#34; title=&#34;Template 模板&#34;&gt;&lt;/a&gt;Template 模板&lt;/h2&gt;&lt;p&gt;模板是一个文本文件，可以用于根据每个主机的不同环境而为生成不同的文件&lt;br&gt;模板文件中支持嵌套jinja2语言的指令,来实现变量,条件判断,循环等功能&lt;br&gt;需要使用template模块实现文件的复制到远程主机,但和copy模块不同,复制过去的文件每个主机可以会有所不同&lt;/p&gt;
&lt;h3 id=&#34;jinja2语言&#34;&gt;&lt;a href=&#34;#jinja2语言&#34; class=&#34;headerlink&#34; title=&#34;jinja2语言&#34;&gt;&lt;/a&gt;jinja2语言&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677662324156.png&#34; alt=&#34;1677662324156&#34;&gt;&lt;/p&gt;
&lt;p&gt;Jinja2 是一个现代的，设计者友好的，仿照 Django 模板的 Python 模板语言。 它速度快，被广泛使用，并且提供了可选的沙箱模板执行环境保证安全:&lt;br&gt;特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;沙箱中执行&lt;/li&gt;
&lt;li&gt;强大的 HTML 自动转义系统保护系统免受 XSS&lt;/li&gt;
&lt;li&gt;模板继承&lt;/li&gt;
&lt;li&gt;及时编译最优的 python 代码&lt;/li&gt;
&lt;li&gt;可选提前编译模板的时间&lt;/li&gt;
&lt;li&gt;易于调试。异常的行数直接指向模板中的对应行。&lt;/li&gt;
&lt;li&gt;可配置的语法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方网站：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://jinja.pocoo.org/
https://jinja.palletsprojects.com/en/2.11.x/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;官方中文文档&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://docs.jinkan.org/docs/jinja2/
https://www.w3cschool.cn/yshfid/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;jinja2 语言支持多种数据类型和操作:&lt;br&gt;字面量，如: 字符串：使用单引号或双引号,数字：整数，浮点数&lt;br&gt;列表：[item1, item2, …]&lt;br&gt;元组：(item1, item2, …)&lt;br&gt;字典：{key1:value1, key2:value2, …}&lt;br&gt;布尔型：true&amp;#x2F;false&lt;br&gt;算术运算：+, -, *, &amp;#x2F;, &amp;#x2F;&amp;#x2F;, %, **&lt;br&gt;比较操作：&amp;#x3D;&amp;#x3D;, !&amp;#x3D;, &amp;gt;, &amp;gt;&amp;#x3D;, &amp;lt;, &amp;lt;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;逻辑运算：and，or，not&lt;br&gt;流表达式：For，If，When&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字面量：&lt;/strong&gt;&lt;br&gt;表达式最简单的形式就是字面量。字面量表示诸如字符串和数值的 Python 对象。如”Hello World”&lt;br&gt;双引号或单引号中间的一切都是字符串。无论何时你需要在模板中使用一个字符串（比如函数调用、过滤器或只是包含或继承一个模板的参数），如42，42.23&lt;br&gt;数值可以为整数和浮点数。如果有小数点，则为浮点数，否则为整数。在 Python 里， 42 和 42.0 是不一样的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算术运算：&lt;/strong&gt;&lt;br&gt;Jinja 允许用计算值。支持下面的运算符&lt;br&gt;+：把两个对象加到一起。通常对象是素质，但是如果两者是字符串或列表，你可以用这 种方式来衔接&lt;br&gt;它们。无论如何这不是首选的连接字符串的方式！连接字符串见 ~ 运算符。 2 等于 2&lt;br&gt;-：用第一个数减去第二个数。 1 等于 1&lt;br&gt;&amp;#x2F;：对两个数做除法。返回值会是一个浮点数。 0.5 等于 0.5&lt;br&gt;&amp;#x2F;&amp;#x2F;：对两个数做除法，返回整数商。 2 等于 2&lt;br&gt;%：计算整数除法的余数。 4 等于 4&lt;br&gt;*：用右边的数乘左边的操作数。 4 会返回 4 。也可以用于重 复一个字符串多次。 NaN&lt;br&gt;会打印 80 个等号的横条&lt;br&gt;**：取左操作数的右操作数次幂。 8 会返回 8&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;比较操作符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D; 比较两个对象是否相等&lt;br&gt;!&amp;#x3D; 比较两个对象是否不等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果左边大于右边，返回 true&lt;br&gt;&amp;#x3D; 如果左边大于等于右边，返回 true&lt;br&gt;&amp;lt; 如果左边小于右边，返回 true&lt;br&gt;&amp;lt;&amp;#x3D; 如果左边小于等于右边，返回 true&lt;br&gt;逻辑运算符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于 if 语句，在 for 过滤或 if 表达式中，它可以用于联合多个表达式&lt;br&gt;and 如果左操作数和右操作数同为真，返回 true&lt;br&gt;or 如果左操作数和右操作数有一个为真，返回 true&lt;br&gt;not 对一个表达式取反&lt;br&gt;(expr)表达式组&lt;br&gt;true &amp;#x2F; false true 永远是 true ，而 false 始终是 false&lt;/p&gt;
&lt;h3 id=&#34;template&#34;&gt;&lt;a href=&#34;#template&#34; class=&#34;headerlink&#34; title=&#34;template&#34;&gt;&lt;/a&gt;template&lt;/h3&gt;&lt;p&gt;template功能：可以根据和参考模块文件，动态生成相类似的配置文件&lt;br&gt;template文件存建议放于templates目录下，且命名为 .j2 结尾&lt;/p&gt;
&lt;p&gt;yaml&amp;#x2F;yml 文件和templates目录平级，此时playbook中指定模版文件时可不用指定路径, 目录结构如下&lt;br&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./
├── temnginx.yml
└── templates
   └── nginx.conf.j2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：利用template 同步nginx配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#准备templates/nginx.conf.j2文件
[root@ansible ~]#vim temnginx.yml
---
- hosts: centos7
  remote_user: root
  tasks:
  - name: template config to remote hosts
    template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
    
[root@ansible ~]#ansible-playbook temnginx.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template变更替换&lt;br&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改文件nginx.conf.j2
[root@ansible ~]#mkdir templates
[root@ansible ~]#vim templates/nginx.conf.j2
......
worker_processes &amp;#123;&amp;#123; ansible_processor_vcpus &amp;#125;&amp;#125;;
......
[root@ansible ~]#vim temnginx2.yml
---
- hosts: centos7
  remote_user: root
  tasks:
  - name: install nginx
    yum: name=nginx
  - name: template config to remote hosts
    template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  - name: start service
    service: name=nginx state=started enabled=yes
[root@ansible ~]#ansible-playbook temnginx2.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Roles-角色&#34;&gt;&lt;a href=&#34;#Roles-角色&#34; class=&#34;headerlink&#34; title=&#34;Roles 角色&#34;&gt;&lt;/a&gt;Roles 角色&lt;/h2&gt;&lt;p&gt;角色是ansible自1.2版本引入的新特性，用于层次性、结构化地组织playbook。roles能够根据层次型结构自动装载变量文件、tasks以及handlers等。要使用roles只需要在playbook中使用include指令即可。简单来讲，roles就是通过分别将变量、文件、任务、模板及处理器放置于单独的目录中，并可以便捷地include它们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中&lt;br&gt;运维复杂的场景：建议使用 roles，代码复用度高&lt;br&gt;roles：多个角色的集合目录， 可以将多个的role，分别放至roles目录下的独立子目录中,如下示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;roles/
mysql/
nginx/
tomcat/
redis/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认roles存放路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/root/.ansible/roles
/usr/share/ansible/roles
/etc/ansible/roles
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;官方文档:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Ansible-Roles目录编排&#34;&gt;&lt;a href=&#34;#Ansible-Roles目录编排&#34; class=&#34;headerlink&#34; title=&#34;Ansible Roles目录编排&#34;&gt;&lt;/a&gt;Ansible Roles目录编排&lt;/h3&gt;&lt;p&gt;roles目录结构如下所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677664119238.png&#34; alt=&#34;1677664119238&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个角色，以特定的层级目录结构进行组织&lt;br&gt;roles目录结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;playbook1.yml
playbook2.yml
roles/
project1/
tasks/
files/
vars/
templates/
handlers/
default/
meta/
project2/
tasks/
files/
vars/
templates/
handlers/
default/
meta/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Roles各目录作用&lt;br&gt;roles&amp;#x2F;project&amp;#x2F; :项目名称,有以下子目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;files&amp;#x2F; ：存放由copy或script模块等调用的文件&lt;/li&gt;
&lt;li&gt;templates&amp;#x2F;：template模块查找所需要模板文件的目录&lt;/li&gt;
&lt;li&gt;tasks&amp;#x2F;：定义task,role的基本元素，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含&lt;/li&gt;
&lt;li&gt;handlers&amp;#x2F;：至少应该包含一个名为main.yml的文件；此目录下的其它的文件需要在此文件中通过include进行包含&lt;/li&gt;
&lt;li&gt;vars&amp;#x2F;：定义变量，至少应该包含一个名为main.yml的文件；此目录下的其它的变量文件需要在此文件中通过include进行包含,也可以通过项目目录中的group_vars&amp;#x2F;all定义变量,从而实现角色通用代码和项目数据的分离&lt;/li&gt;
&lt;li&gt;meta&amp;#x2F;：定义当前角色的特殊设定及其依赖关系,至少应该包含一个名为main.yml的文件，其它文件需在此文件中通过include进行包含&lt;/li&gt;
&lt;li&gt;default&amp;#x2F;：设定默认变量时使用此目录中的main.yml文件，比vars的优先级低&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建-role&#34;&gt;&lt;a href=&#34;#创建-role&#34; class=&#34;headerlink&#34; title=&#34;创建 role&#34;&gt;&lt;/a&gt;创建 role&lt;/h3&gt;&lt;p&gt;创建role的步骤&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;1 创建role的目录结构.在以roles命名的目录下分别创建以各角色名称命名的目录，如mysql等,在每个角色命名的目录中分别创建相关的目录和文件,比如tasks、files、handlers、templates和vars等目录；用不到的目录可以创建为空目录，也可以不创建
2 编写和准备指定role的功能文件,包括: tasks,templates,vars等相关文件
3 编写playbook文件调用上面定义的role,应用到指定的主机
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;针对大型项目使用Roles进行编排&lt;br&gt;范例: 利用 ansible-galaxy 创建角色目录的结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#创建初始化目录结构
[root@ansible roles]#ansible-galaxy role init test_role
- Role test_role was created successfully
[root@ansible roles]#tree test_role/
test_role/
├── defaults
│ └── main.yml
├── files
├── handlers
│ └── main.yml
├── meta
│ └── main.yml
├── README.md
├── tasks
│ └── main.yml
├── templates
├── tests
│ ├── inventory
│ └── test.yml
└── vars
└── main.yml
8 directories, 8 files
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：roles的目录结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx-role.yml
roles/
└── nginx
├── files
│ └── nginx.conf
├── tasks
│ ├── groupadd.yml
│ ├── install.yml
│ ├── main.yml
│ ├── restart.yml
│ └── useradd.yml
└── vars
└── main.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Playbook-调用角色&#34;&gt;&lt;a href=&#34;#Playbook-调用角色&#34; class=&#34;headerlink&#34; title=&#34;Playbook 调用角色&#34;&gt;&lt;/a&gt;Playbook 调用角色&lt;/h3&gt;&lt;p&gt;调用角色方法1：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- hosts: webservers
  remote_user: root
  roles:
    - mysql
    - memcached
    - nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用角色方法2：&lt;br&gt;键role用于指定角色名称，后续的k&amp;#x2F;v用于传递变量给角色&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- hosts: all
  remote_user: root
  roles:
    - role: mysql
    username: mysql
    - &amp;#123; role: nginx, username: nginx &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用角色方法3：&lt;br&gt;还可基于条件测试实现角色调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- hosts: all
  remote_user: root
  roles:
   - &amp;#123; role: nginx, username: nginx, when: ansible_distribution_major_version == &amp;#39;7&amp;#39; &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Roles-中-Tags-使用&#34;&gt;&lt;a href=&#34;#Roles-中-Tags-使用&#34; class=&#34;headerlink&#34; title=&#34;Roles 中 Tags 使用&#34;&gt;&lt;/a&gt;Roles 中 Tags 使用&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@ansible ~]#vi app-role.yml
---
#可以有多个play
- hosts: lbserver
  roles:
    - role: haproxy
    - role: keepalived
    - hosts: appsrvs
  remote_user: root
  roles:
    - &amp;#123; role: nginx ,tags: [ &amp;#39;nginx&amp;#39;, &amp;#39;web&amp;#39; ] ,when:
    ansible_distribution_major_version == &amp;quot;6&amp;quot; &amp;#125;
    - &amp;#123; role: httpd ,tags: [ &amp;#39;httpd&amp;#39;, &amp;#39;web&amp;#39; ] &amp;#125;
    - &amp;#123; role: mysql ,tags: [ &amp;#39;mysql&amp;#39;, &amp;#39;db&amp;#39; ] &amp;#125;
    - role: mariadb
      tags:
      - mariadb
      - db
  tags: app #play的tag
[root@ansible ~]#ansible-playbook --tags=&amp;quot;nginx,mysql&amp;quot; app-role.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;实战案例&#34;&gt;&lt;a href=&#34;#实战案例&#34; class=&#34;headerlink&#34; title=&#34;实战案例&#34;&gt;&lt;/a&gt;实战案例&lt;/h3&gt;&lt;h4 id=&#34;实现httpd角色&#34;&gt;&lt;a href=&#34;#实现httpd角色&#34; class=&#34;headerlink&#34; title=&#34;实现httpd角色&#34;&gt;&lt;/a&gt;实现httpd角色&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# 创建role目录
[root@ansible data]# ansible-galaxy role init httpd
- Role htppd was created successfully
[root@ansible data]# tree httpd/
httpd/
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── README.md
├── tasks
│   └── main.yml
├── templates
├── tests
│   ├── inventory
│   └── test.yml
└── vars
    └── main.yml

8 directories, 8 files
[root@ansible data]# 

#main.yml 是task的入口文件
[root@ansible tasks]# cat main.yml 
---
# tasks file for httpd
- include: group.yml
- include: user.yml
- include: install_httpd.yml
- include: config.yml
- inclusde: index.yml
- include: service.yml
[root@ansible tasks]# 

# 创建用户组
[root@ansible httpd]# cat tasks/group.yml 
- name: add group 
  group: name=&amp;#123;&amp;#123; httpd_group&amp;#125;&amp;#125; system=yes gid=&amp;#123;&amp;#123; httpd_gid &amp;#125;&amp;#125;
[root@ansible htppd]# 

# 创建用户
[root@ansible httpd]# cat tasks/user.yml 
- name: add httpd user
  user: name=&amp;#123;&amp;#123; httpd_user &amp;#125;&amp;#125; system=yes shel=/sbin/nologin home=/var/www uid=&amp;#123;&amp;#123; httpd_uid &amp;#125;&amp;#125; group=&amp;#123;&amp;#123; httpd_group &amp;#125;&amp;#125;
[root@ansible htppd]# 

# yum install httpd
[root@ansible httpd]# cat tasks/install_httpd.yml 
- name: install httpd
  yum: name=httpd
[root@ansible httpd]# 

# 拷贝配置文件
#注意: 文件是放在files目录下,但src的路径无需写files目录名
[root@ansible htppd]# cat tasks/config.yml
- name: httpd config
  copy: src=httpd.conf dest=/etc/httpd/conf backup=yes
  notify: restart httpd
 
 # 准备测试文件
[root@ansible htppd]# cat tasks/index.yml 
- name: copy index.html
  copy: src=index.html dest=/var/www/html
[root@ansible htppd]# 

# start httpd
[root@ansible htppd]# cat tasks/service.yml 
- name: start httpd
  service: name=httpd state=started enabled=yes
[root@ansible htppd]# 

# 配置文件修改则重启httpd
[root@ansible htppd]# cat handlers/main.yml 
---
# handlers file for httpd
- name: restart httpd
  service: name=httpd state=restarted
[root@ansible htppd]# 

#在files目录下准备两个文件
[root@ansible data]# ll httpd/files
total 16
-rw-r--r-- 1 root root 11753 Mar  1 18:36 httpd.conf
-rw-r--r-- 1 root root    23 Mar  1 21:10 index.html

# 准备变量文件
[root@ansible data]# cat httpd/vars/main.yml 
---
# vars file for httpd
httpd_group: apache
httpd_gid: 88
httpd_user: apache
httpd_uid: 88
[root@ansible data]# 

#在playbook中调用角色
[root@ansible data]# cat web_roles.yml 
---
- hosts: centos7
  remote_user: root
  roles:
    - httpd
    
#运行playbook
[root@ansible data]# ansible-playbook /data/web_roles.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;实现Nginx角色&#34;&gt;&lt;a href=&#34;#实现Nginx角色&#34; class=&#34;headerlink&#34; title=&#34;实现Nginx角色&#34;&gt;&lt;/a&gt;实现Nginx角色&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# 创建roles目录
[root@ansible data]# ansible-galaxy init nginx
- Role nginx was created successfully
[root@ansible data]# ll
total 12
-rw-r--r--  1 root root  614 Mar  1 21:07 ansible.cfg
-rw-r--r--  1 root root 1382 Mar  1 21:07 hosts
drwxr-xr-x 10 root root  154 Mar  1 18:07 httpd
drwxr-xr-x 10 root root  154 Mar  1 21:52 nginx
-rw-r--r--  1 root root   63 Mar  1 21:14 web_roles.yml
[root@ansible data]# 

# 创建tasks文件
[root@ansible data]# cat nginx/tasks/main.yml 
---
# tasks file for nginx
- include: install_nginx.yml
- import_playbook: config.yml
- include: index.yml
- import_playbook: service.yml
[root@ansible data]#

# 安装nginx
[root@ansible data]# cat nginx/tasks/install_nginx.yml
---
- name: install nginx
  yum:
    name: nginx
    state: present
[root@ansible data]# 

# 配置文件
[root@ansible data]# cat nginx/tasks/config.yml
---
- name: copy config
  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  notify: restart nginx
  
# 创建测试文件
[root@ansible data]# cat nginx/tasks/index.yml
---
- name: copt index.html
  copy: src=index.html dest=/usr/share/nginx/html/

# 启动nginx
[root@ansible data]# cat nginx/tasks/service.yml
---
- name: start nginx
  service: name=nginx state=started enabled=yes
  
#创建handler文件
[root@ansible data]# cat nginx/handlers/main.yml 
---
# handlers file for nginx
- name: restart nginx
  service: naem=nginx state=restarted
[root@ansible data]# ll

#创建template文件
[root@ansible data]# ll nginx/templates/
total 4
-rw-r--r-- 1 root root 2336 Mar  1 22:12 nginx.conf.j2
[root@ansible data]# 


# 创建测试文件
[root@ansible data]# ll nginx/files/
total 4
-rw-r--r-- 1 root root 23 Mar  1 22:14 index.html
[root@ansible data]#

#在playbook中调用角色
[root@ansible data]# cat web_roles.yml 
---
- hosts: centos7
  remote_user: root
  roles:
  #  - httpd
    - nginx
[root@ansible data]# 
#运行playbook
[root@ansible data]# ansible-playbook web_roles.yml 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;实现MySql8角色&#34;&gt;&lt;a href=&#34;#实现MySql8角色&#34; class=&#34;headerlink&#34; title=&#34;实现MySql8角色&#34;&gt;&lt;/a&gt;实现MySql8角色&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建角色目录&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible data]# ansible-galaxy init mysql8
[root@ansible data]# ll
total 12
-rw-r--r--  1 root root  614 Mar  1 21:07 ansible.cfg
-rw-r--r--  1 root root 1382 Mar  1 21:07 hosts
drwxr-xr-x 10 root root  154 Mar  1 18:07 httpd
drwxr-xr-x 10 root root  154 Mar  1 22:55 mysql8
drwxr-xr-x  8 root root  125 Mar  1 22:44 nginx
-rw-r--r--  1 root root   75 Mar  1 22:38 web_roles.yml
[root@ansible data]# 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建tasks yml文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 安装包
[root@ansible data]# cat mysql8/tasks/install_package.yml
---
- name: install package
  yum: name=&amp;#123;&amp;#123; item &amp;#125;&amp;#125; state=latest
  loop:
    - libaio
    - numactl-libs
    
# add group
[root@ansible data]# cat mysql8/tasks/group.yml
---
- name: add group
  group: name=&amp;#123;&amp;#123; group &amp;#125;&amp;#125; gid=&amp;#123;&amp;#123; group_gid &amp;#125;&amp;#125;
[root@ansible data]# 

# add user
[root@ansible data]# cat mysql8/tasks/user.yml
---
- name: add user
  user: name=&amp;#123;&amp;#123; user &amp;#125;&amp;#125; uid=&amp;#123;&amp;#123; user_uid &amp;#125;&amp;#125; shell=/sbin/nologin group=&amp;#123;&amp;#123; group &amp;#125;&amp;#125; create_home=no system=yes home=/data/mysql
[root@ansible data]# 

# 准备my.cnf文件
[root@ansible data]# cat mysql8/files/my.cnf
[mysqld]
server-id=1
log-bin
datadir=/data/mysql
socket=/data/mysql/mysql.sock
log-error=/data/mysql/mysql.log
pid-file=/data/mysql/mysql.pid
[client]
socket=/data/mysql/mysql.sock

# 准备mysql二进制包
[root@ansible data]# ll mysql8/files/
total 1176056
-rw-r--r-- 1 root root        181 Mar  1 23:10 my.cnf
-rw-r--r-- 1 root root 1204277208 Dec 18  2021 mysql-8.0.28-linux-glibc2.12-x86_64.tar.xz
[root@ansible data]# 

# 将mysql二进制包解压到远程主机
[root@ansible data]# cat mysql8/tasks/unarchive.yml
---
- name: copy mysql tar host
  # mysql_tar 为mysql二进制的压缩包名称
  unarchive: src=&amp;#123;&amp;#123; mysql_tar &amp;#125;&amp;#125; dest=/usr/local/ owner=root group=root
[root@ansible data]# 

# 将远程主机解压出的二进制包创建软连接
[root@ansible data]# cat mysql8/tasks/linkfile.yml
---
- name: create link
  file: src=/usr/local/mysql-&amp;#123;&amp;#123; mysql_version &amp;#125;&amp;#125;-linux-glibc2.12-x86_64 dest=/usr/local/mysql state=link
[root@ansible data]# 

# 初始化数据库
[root@ansible data]# cat mysql8/tasks/init_mysql_data.yml
---
- name: create datadir dir
  file: path=/data/mysql state=directory owner=&amp;#123;&amp;#123; user &amp;#125;&amp;#125; group=
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Ansible/Ansible/</guid>
            <title>运维自动化工具Ansible(一)</title>
            <link>http://blog.itshare.work/Ansible/Ansible/</link>
            <category term="Ansible" scheme="http://blog.itshare.work/categories/Ansible/" />
            <pubDate>Tue, 21 Feb 2023 19:12:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ansible介绍和架构&#34;&gt;&lt;a href=&#34;#Ansible介绍和架构&#34; class=&#34;headerlink&#34; title=&#34;Ansible介绍和架构&#34;&gt;&lt;/a&gt;Ansible介绍和架构&lt;/h1&gt;&lt;h2 id=&#34;Ansible发展史&#34;&gt;&lt;a href=&#34;#Ansible发展史&#34; class=&#34;headerlink&#34; title=&#34;Ansible发展史&#34;&gt;&lt;/a&gt;Ansible发展史&lt;/h2&gt;&lt;p&gt;Ansible 的名称来自科幻小说《安德的游戏》中跨越时空的即时通信工具，使用它可以在相距数光年的距离，远程实时控制前线的舰队战斗&lt;br&gt;2012-03-09，发布0.0.1版，2015-10-17，Red Hat宣布1.5亿美元收购&lt;br&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYW5zaWJsZS5jb20v&#34;&gt;https://www.ansible.com/&lt;/span&gt;&lt;br&gt;官方文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmFuc2libGUuY29tLw==&#34;&gt;https://docs.ansible.com/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;Ansible-功能&#34;&gt;&lt;a href=&#34;#Ansible-功能&#34; class=&#34;headerlink&#34; title=&#34;Ansible 功能&#34;&gt;&lt;/a&gt;Ansible 功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;批量执行远程命令,可以对远程的多台主机同时进行命令的执行&lt;/li&gt;
&lt;li&gt;批量安装和配置软件服务，可以对远程的多台主机进行自动化的方式配置和管理各种服务&lt;/li&gt;
&lt;li&gt;编排高级的企业级复杂的IT架构任务, Ansible的Playbook和role可以轻松实现大型的IT复杂架构&lt;/li&gt;
&lt;li&gt;提供自动化运维工具的开发API, 有很多运维工具,如jumpserver就是基于 ansible 实现自动化管工功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Ansible-特点&#34;&gt;&lt;a href=&#34;#Ansible-特点&#34; class=&#34;headerlink&#34; title=&#34;Ansible 特点&#34;&gt;&lt;/a&gt;Ansible 特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能丰富的模块：提供了多达数千个的各种功能的模块,完成特定任务只需调用特定模块即可，还&lt;/li&gt;
&lt;li&gt;支持自定义模块，可使用任何编程语言写模块&lt;/li&gt;
&lt;li&gt;使用和部署简单: 无需安装专用代理软件,基于python和SSH(默认已安装)实现&lt;/li&gt;
&lt;li&gt;安全: 基于OpenSSH实现安全通讯无需专用协议&lt;/li&gt;
&lt;li&gt;幂等性：一个任务执行1遍和执行n遍效果一样，不因重复执行带来意外情况,此特性和模块有关&lt;/li&gt;
&lt;li&gt;支持playbook编排任务，YAML格式，编排任务，支持丰富的数据结构&lt;/li&gt;
&lt;li&gt;较强大的多层解决方案 Role&lt;/li&gt;
&lt;li&gt;Python语言实现, 基于Paramiko（python对ssh的实现），PyYAML，Jinja2（模板语言）三个关键模块&lt;/li&gt;
&lt;li&gt;属于红帽(IBM)公司产品,背景强大,未来发展前景光明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果管理的主机较多时,执行效率不如saltstack高&lt;/li&gt;
&lt;li&gt;当前还不支持像MySQL数据库一样的事务回滚&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Ansible-架构&#34;&gt;&lt;a href=&#34;#Ansible-架构&#34; class=&#34;headerlink&#34; title=&#34;Ansible 架构&#34;&gt;&lt;/a&gt;Ansible 架构&lt;/h2&gt;&lt;h3 id=&#34;Ansible-组成&#34;&gt;&lt;a href=&#34;#Ansible-组成&#34; class=&#34;headerlink&#34; title=&#34;Ansible 组成&#34;&gt;&lt;/a&gt;Ansible 组成&lt;/h3&gt;&lt;p&gt;组合INVENTORY、API、MODULES、PLUGINS的绿框，为ansible命令工具，其为核心执行工具&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1676984392121.png&#34; alt=&#34;1676984392121&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;INVENTORY：Ansible管理主机的清单文件,默认为 &amp;#x2F;etc&amp;#x2F;ansible&amp;#x2F;hosts&lt;/li&gt;
&lt;li&gt;MODULES：Ansible执行命令的功能模块，多数为内置核心模块，也可自定义&lt;/li&gt;
&lt;li&gt;PLUGINS：模块功能的补充，如连接类型插件、循环插件、变量插件、过滤插件等，该功能不常用&lt;/li&gt;
&lt;li&gt;API：供第三方程序调用的应用程序编程接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Ansible-命令执行来源&#34;&gt;&lt;a href=&#34;#Ansible-命令执行来源&#34; class=&#34;headerlink&#34; title=&#34;Ansible 命令执行来源&#34;&gt;&lt;/a&gt;Ansible 命令执行来源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;USER 普通用户，即SYSTEM ADMINISTRATOR&lt;/li&gt;
&lt;li&gt;PLAYBOOKS：任务剧本（任务集），编排定义Ansible任务集的配置文件，由Ansible顺序依次执行，通常是JSON格式的YML文件&lt;/li&gt;
&lt;li&gt;CMDB（配置管理数据库） API 调用&lt;/li&gt;
&lt;li&gt;PUBLIC&amp;#x2F;PRIVATE CLOUD API调用&lt;/li&gt;
&lt;li&gt;USER-&amp;gt; Ansible Playbook -&amp;gt; Ansibile&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注意事项&#34;&gt;&lt;a href=&#34;#注意事项&#34; class=&#34;headerlink&#34; title=&#34;注意事项&#34;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;执行ansible的主机一般称为管理端, 主控端，中控，master或堡垒机&lt;/li&gt;
&lt;li&gt;主控端Python版本需要2.6或以上&lt;/li&gt;
&lt;li&gt;被控端Python版本小于2.4，需要安装python-simplejson&lt;/li&gt;
&lt;li&gt;被控端如开启SELinux需要安装libselinux-python&lt;/li&gt;
&lt;li&gt;windows 不能做为主控端,只能做为被控制端&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ansible-安装和常见模块&#34;&gt;&lt;a href=&#34;#Ansible-安装和常见模块&#34; class=&#34;headerlink&#34; title=&#34;Ansible 安装和常见模块&#34;&gt;&lt;/a&gt;Ansible 安装和常见模块&lt;/h1&gt;&lt;h2 id=&#34;Ansible-安装&#34;&gt;&lt;a href=&#34;#Ansible-安装&#34; class=&#34;headerlink&#34; title=&#34;Ansible 安装&#34;&gt;&lt;/a&gt;Ansible 安装&lt;/h2&gt;&lt;p&gt;ansible的安装方法有多种&lt;br&gt;官方文档&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html
https://docs.ansible.com/ansible/latest/installation_guide/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下载&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;https://releases.ansible.com/ansible/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pip 下载&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;https://pypi.org/project/ansible/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;包安装方式&#34;&gt;&lt;a href=&#34;#包安装方式&#34; class=&#34;headerlink&#34; title=&#34;包安装方式&#34;&gt;&lt;/a&gt;包安装方式&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;#CentOS 的EPEL源的rpm包安装
[root@centos ~]#yum install ansible
#ubuntu 安装
[root@ubuntu ~]#apt -y install ansible
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pip安装&#34;&gt;&lt;a href=&#34;#pip安装&#34; class=&#34;headerlink&#34; title=&#34;pip安装&#34;&gt;&lt;/a&gt;pip安装&lt;/h3&gt;&lt;p&gt;pip 是安装Python包的管理器，类似 yum&lt;br&gt;范例: 在rocky8上通过pip3安装ansible&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@rocky8 ~]#yum -y install python39 rust
[root@rocky8 ~]#pip3 install ansible
[root@rocky8 ~]#ansible --version
ansible [core 2.12.6]
config file = None
configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/lib/python3.9/site-packages/ansible
ansible collection location =
/root/.ansible/collections:/usr/share/ansible/collections
executable location = /usr/bin/ansible
python version = 3.9.6 (default, Nov 9 2021, 13:31:27) [GCC 8.5.0 20210514
(Red Hat 8.5.0-3)]
jinja version = 3.1.2
libyaml = True
[root@rocky8 ~]#ansible-doc -l 2&amp;gt; /dev/null|wc -l
6763
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 安装python3.8 支持ansible2.12以上版本&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@rocky8 ~]#yum -y install python38 python38-pip
[root@rocky8 ~]#pip3 install --upgrade pip -i https://pypi.douban.com/simple
[root@rocky8 ~]#pip3 install ansible -i https://pypi.douban.com/simple/
[root@rocky8 ~]#ansible --version
ansible [core 2.12.6]
config file = None
configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/local/lib/python3.8/site-
packages/ansible
ansible collection location =
/root/.ansible/collections:/usr/share/ansible/collections
executable location = /usr/local/bin/ansible
python version = 3.8.8 (default, Nov 9 2021, 13:31:34) [GCC 8.5.0 20210514
(Red Hat 8.5.0-3)]
jinja version = 3.1.2
libyaml = True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 安装默认的python3.6版本会有警报提示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@rocky8 ~]#yum -y install python3
[root@rocky8 ~]#pip3 install --upgrade pip -i https://pypi.douban.com/simple
[root@rocky8 ~]#pip3 install ansible -i https://pypi.douban.com/simple/
[root@rocky8 ~]#ansible --version
[DEPRECATION WARNING]: Ansible will require Python 3.8 or newer on the
controller starting with Ansible 2.12. Current version: 3.6.8 (default, Nov
9 2021, 14:44:26) [GCC 8.5.0 20210514 (Red Hat 8.5.0-3)]. This feature will be
removed from ansible-core in version 2.12. Deprecation warnings
can be disabled by setting deprecation_warnings=False in ansible.cfg.
/usr/local/lib/python3.6/site-packages/ansible/parsing/vault/__init__.py:44:
CryptographyDeprecationWarning: Python 3.6 is no longer supported by the Python
core team. Therefore, support for it is deprecated in cryptography and will be
removed in a future release.
from cryptography.exceptions import InvalidSignature
ansible [core 2.11.12]
config file = None
configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/local/lib/python3.6/site-
packages/ansible
ansible collection location =
/root/.ansible/collections:/usr/share/ansible/collections
executable location = /usr/local/bin/ansible
python version = 3.6.8 (default, Nov 9 2021, 14:44:26) [GCC 8.5.0 20210514
(Red Hat 8.5.0-3)]
jinja version = 3.0.3
libyaml = True
[root@rocky8 ~]#ansible-doc -l 2&amp;gt; /dev/null|wc -l
6141
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1676985923345.png&#34; alt=&#34;1676985923345&#34;&gt;&lt;/p&gt;
&lt;p&gt;范例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@centos7 ~]#yum -y install python-pip
[root@centos7 ~]#pip install --upgrade pip
[root@centos7 ~]#pip install ansible --upgrade
[root@centos7 ~]#ansible --version
/usr/lib64/python2.7/site-packages/cryptography/__init__.py:39:
CryptographyDeprecationWarning: Python 2 is no longer supported by the Python
core team. Support for it is now deprecated in cryptography, and will be removed
in a future release.
CryptographyDeprecationWarning,
ansible 2.9.12
config file = None
configured module search path = [u&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
u&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/lib/python2.7/site-packages/ansible
executable location = /usr/bin/ansible
python version = 2.7.5 (default, Apr 2 2020, 13:16:51) [GCC 4.8.5 20150623
(Red Hat 4.8.5-39)]
[root@centos7 ~]#ll /opt/etc/ansible/ansible.cfg
-rw-r--r-- 1 wang bin 19980 Aug 11 21:34 /opt/etc/ansible/ansible.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;确认安装&#34;&gt;&lt;a href=&#34;#确认安装&#34; class=&#34;headerlink&#34; title=&#34;确认安装&#34;&gt;&lt;/a&gt;确认安装&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@ansible ~]#ansible --version
ansible 2.9.5
config file = /etc/ansible/ansible.cfg
configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/lib/python3.6/site-packages/ansible
executable location = /usr/bin/ansible
python version = 3.6.8 (default, Nov 21 2019, 19:31:34) [GCC 8.3.1 20190507
(Red Hat 8.3.1-4)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Ansible-相关文件&#34;&gt;&lt;a href=&#34;#Ansible-相关文件&#34; class=&#34;headerlink&#34; title=&#34;Ansible 相关文件&#34;&gt;&lt;/a&gt;Ansible 相关文件&lt;/h2&gt;&lt;h3 id=&#34;Ansible-配置文件列表&#34;&gt;&lt;a href=&#34;#Ansible-配置文件列表&#34; class=&#34;headerlink&#34; title=&#34;Ansible 配置文件列表&#34;&gt;&lt;/a&gt;Ansible 配置文件列表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&amp;#x2F;etc&amp;#x2F;ansible&amp;#x2F;ansible.cfg 主配置文件，配置ansible工作特性,也可以在项目的目录中创建此文件,当前目录下如果也有ansible.cfg,则此文件优先生效,建议每个项目目录下,创建独有的ansible.cfg文&lt;br&gt;件&lt;/li&gt;
&lt;li&gt;&amp;#x2F;etc&amp;#x2F;ansible&amp;#x2F;hosts 主机清单&lt;/li&gt;
&lt;li&gt;&amp;#x2F;etc&amp;#x2F;ansible&amp;#x2F;roles&amp;#x2F; 存放角色的目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Ansible-主配置文件&#34;&gt;&lt;a href=&#34;#Ansible-主配置文件&#34; class=&#34;headerlink&#34; title=&#34;Ansible 主配置文件&#34;&gt;&lt;/a&gt;Ansible 主配置文件&lt;/h3&gt;&lt;p&gt;Ansible 的配置文件可以放在多个不同地方,优先级从高到低顺序如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;ANSIBLE_CONFIG #环境变量,目录下的文件必须存在才能生效
./ansible.cfg #当前目录下的ansible.cfg,一般一个项目对应一个专用配置文件,推荐使用
~/.ansible.cfg #当前用户家目录下的.ansible.cfg
/etc/ansible/ansible.cfg #系统默认配置文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ansible 的默认配置文件 &amp;#x2F;etc&amp;#x2F;ansible&amp;#x2F;ansible.cfg ,其中大部分的配置内容无需进行修改&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[defaults]
#inventory = /etc/ansible/hosts #主机列表配置文件
#library = /usr/share/my_modules/ #库文件存放目录
#remote_tmp = $HOME/.ansible/tmp #临时py命令文件存放在远程主机目录
#local_tmp = $HOME/.ansible/tmp #本机的临时命令执行目录
#forks = 5 #默认并发数
#sudo_user = root #默认sudo 用户
#ask_sudo_pass = True #每次执行ansible命令是否询问ssh密码
#ask_pass = True
#remote_port = 22
#host_key_checking = False #检查对应服务器的host_key，建议取消此行注释,实现第一次连
接自动信任目标主机
#log_path=/var/log/ansible.log #日志文件，建议启用
#module_name = command #默认模块，可以修改为shell模块
[privilege_escalation] #普通用户提权配置
#become=True
#become_method=sudo
#become_user=root
#become_ask_pass=False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 通过环境变量ANSIBLE_CONFIG指定ansible配置文件路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@rocky8 ~]#cd /data/ansible/
[root@rocky8 ansible]#cat ansbile.cfg
[defaults]
inventory = ./hosts
[root@rocky8 ansible]#cat hosts
[ubuntu]
10.0.0.100
[centos]
10.0.0.7
10.0.0.8
#定义变量
[root@rocky8 ansible]#export ANSIBLE_CONFIG=./ansbile.cfg
[root@rocky8 ansible]#ansible --version
ansible [core 2.12.6]
config file = /data/ansible/ansbile.cfg
configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/lib/python3.9/site-packages/ansible
ansible collection location =
/root/.ansible/collections:/usr/share/ansible/collections
executable location = /usr/bin/ansible

python version = 3.9.6 (default, Nov 9 2021, 13:31:27) [GCC 8.5.0 20210514
(Red Hat 8.5.0-3)]
jinja version = 3.1.2
libyaml = True
[root@rocky8 ansible]#ansible --list-hosts all
hosts (3):
10.0.0.100
10.0.0.7
10.0.0.8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 创建ansible 指定项目专用的配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@ubuntu2004 ~]#ansible --version
ansible 2.9.6
config file = /etc/ansible/ansible.cfg
configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/lib/python3/dist-packages/ansible
executable location = /usr/bin/ansible
python version = 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
[root@ubuntu2004 ~]#mkdir /data/ansible -p
[root@ubuntu2004 ~]#cd /data/ansible/
[root@ubuntu2004 ansible]#touch ansible.cfg
[root@ubuntu2004 ansible]#ansible --version
ansible 2.9.6
config file = /data/ansible/ansible.cfg
configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/lib/python3/dist-packages/ansible
executable location = /usr/bin/ansible
python version = 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
[root@ubuntu2004 ansible]#cd
[root@ubuntu2004 ~]#ansible --version
ansible 2.9.6
config file = /etc/ansible/ansible.cfg
configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/lib/python3/dist-packages/ansible
executable location = /usr/bin/ansible
python version = 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 当前目录下的ansible的配置文件优先生效&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@ansible ~]#ansible --version
ansible 2.9.17
config file = /etc/ansible/ansible.cfg
configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/lib/python3.6/site-packages/ansible
executable location = /usr/bin/ansible
python version = 3.6.8 (default, Apr 16 2020, 01:36:27) [GCC 8.3.1 20191121
(Red Hat 8.3.1-5)]
[root@ansible ~]#cp /etc/ansible/ansible.cfg .

[root@ansible ~]#ansible --version
ansible 2.9.17
config file = /root/ansible.cfg #注意配置文件路径
configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;,
&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;]
ansible python module location = /usr/lib/python3.6/site-packages/ansible
executable location = /usr/bin/ansible
python version = 3.6.8 (default, Apr 16 2020, 01:36:27) [GCC 8.3.1 20191121
(Red Hat 8.3.1-5)]
[root@ansible ~]#
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Inventory-主机清单文件&#34;&gt;&lt;a href=&#34;#Inventory-主机清单文件&#34; class=&#34;headerlink&#34; title=&#34;Inventory 主机清单文件&#34;&gt;&lt;/a&gt;Inventory 主机清单文件&lt;/h3&gt;&lt;p&gt;ansible的主要功用在于批量主机操作，为了便捷地使用其中的部分主机，可以在inventory 主机清单文件中将其分组组织&lt;br&gt;默认的inventory file为 &amp;#x2F;etc&amp;#x2F;ansible&amp;#x2F;hosts&lt;br&gt;inventory file可以有多个，且也可以通过Dynamic Inventory来动态生成&lt;br&gt;注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产建议在每个项目目录下创建项目独立的hosts文件&lt;/li&gt;
&lt;li&gt;通过项目目录下的ansible.cfg文件中的 inventory &amp;#x3D; .&amp;#x2F;hosts实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方文档:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;url&#34;&gt;https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;主机清单文件格式&lt;/strong&gt;&lt;br&gt;inventory文件遵循INI文件风格，中括号中的字符为组名。可以将同一个主机同时归并到多个不同的组中,此外，当如若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明,如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机&lt;br&gt;&lt;strong&gt;Inventory 参数说明&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;ansible_ssh_host #将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.
ansible_ssh_port #ssh端口号.如果不是默认的端口号,通过此变量设置.这种可以使用 ip:端口
192.168.1.100:2222
ansible_ssh_user #默认的 ssh 用户名
ansible_ssh_pass #ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)
ansible_sudo_pass #sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)
ansible_sudo_exe (new in version 1.8) #sudo 命令路径(适用于1.8及以上版本)
ansible_connection #与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 &amp;#39;smart&amp;#39;,&amp;#39;smart&amp;#39; 方式会根据是否支持 ControlPersist,来判断&amp;#39;ssh&amp;#39; 方式是否可行.
ansible_ssh_private_key_file #ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.
ansible_shell_type #目标系统的shell类型.默认情况下,命令的执行使用 &amp;#39;sh&amp;#39; 语法,可设置为&amp;#39;csh&amp;#39; 或 &amp;#39;fish&amp;#39;.
ansible_python_interpreter #目标主机的 python 路径.适用于的情况: 系统中有多个 Python,或者命令路径不是&amp;quot;/usr/bin/python&amp;quot;,比如 \*BSD, 或者 /usr/bin/python 不是 2.X 版本的Python.之所以不使用 &amp;quot;/usr/bin/env&amp;quot; 机制,因为这要求远程用户的路径设置正确,且要求 &amp;quot;python&amp;quot;可执行程序名不可为 python以外的名字(实际有可能名为python26).与ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径....
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;ntp.wang.org
[webservers]
www1.wang.org:2222
www2.wang.org
[dbservers]
db1.wang.org
db2.wang.org
db3.wang.org
#或者
db[1:3].wang.org
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 组嵌套&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[webservers]
www[1:100].example.com
[dbservers]
db-[a:f].example.com
[appservers]
10.0.0.[1:100]
#定义testsrvs组中包括两个其它分组,实现组嵌套
[testsrvs:children]
webservers
dbservers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 基于用户名和密码的ssh连接主机清单&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[test]
10.0.0.8 ansible_connection=local #指定本地连接,无需ssh配置

#每个主机分别指定用户和密码,ansible_connection=ssh 需要StrictHostKeyChecking no 或者host_key_checking = False
10.0.0.7 ansible_connection=ssh ansible_ssh_port=2222 ansible_ssh_user=wangansible_ssh_password=123456
10.0.0.6 ansible_ssh_user=root ansible_ssh_password=123456
#对每个分组的所有主机统一定义用户和密码,执行ansible命令时显示别名,如web01
[websrvs]
web01 ansible_ssh_host=10.0.0.101
web02 ansible_ssh_host=10.0.0.102
[websrvs:vars]
ansible_ssh_password=magedu
some_host ansible_ssh_port=2222 ansible_ssh_user=manager
aws_host ansible_ssh_private_key_file=/home/example/.ssh/aws.pem
freebsd_host ansible_python_interpreter=/usr/local/bin/python
ruby_module_host ansible_ruby_interpreter=/usr/bin/ruby.1.9.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Ansible相关工具&#34;&gt;&lt;a href=&#34;#Ansible相关工具&#34; class=&#34;headerlink&#34; title=&#34;Ansible相关工具&#34;&gt;&lt;/a&gt;Ansible相关工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;ansible 主程序，临时命令执行工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;ansible-doc 查看配置文档，模块功能查看工具,相当于man&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;ansible-playbook 定制自动化任务，编排剧本工具,相当于脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;ansible-pull 远程执行命令的工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;ansible-vault 文件加密工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;ansible-console 基于Console界面与用户交互的执行工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;ansible-galaxy 下载&amp;#x2F;上传优秀代码或Roles模块的官网平台&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;利用ansible实现管理的主要方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ansible Ad-Hoc 即利用ansible命令，主要用于临时命令使用场景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ansible playbook 主要用于长期规划好的，大型项目的场景，需要有前期的规划过程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ansible 使用前准备&lt;/strong&gt;&lt;br&gt;ansible 相关工具大多数是通过ssh协议，实现对远程主机的配置管理、应用部署、任务执行等功能&lt;br&gt;建议：使用此工具前，先配置ansible主控端能基于密钥认证的方式联系各个被管理节点&lt;br&gt;范例：利用sshpass批量实现基于key验证脚本1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@centos8 ~]#vim /etc/ssh/ssh_config
#修改下面一行
StrictHostKeyChecking no
[root@centos8 ~]#cat hosts.list
192.168.32.178
192.168.32.179
[root@centos8 ~]#vim push_ssh_key.sh
#!/bin/bash
rpm -ql shpass &amp;amp;&amp;gt; /dev/null || yum -y install sshpass
[ -f /root/.ssh/id_rsa ] || ssh-keygen -f /root/.ssh/id_rsa -P &amp;#39;&amp;#39;
export SSHPASS=123456
while read IP;do
    sshpass -e ssh-copy-id -o StrictHostKeyChecking=no $IP


done &amp;lt; hosts.list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 实现基于key验证的脚本2&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@centos8 ~]#cat ssh_key.sh

#!/bin/bash
PLIST=&amp;quot;
192.168.32.178
192.168.32.179&amp;quot;
rpm -q sshpass &amp;amp;&amp;gt; /dev/null || yum -y install sshpass
[ -f /root/.ssh/id_rsa ] || ssh-keygen -f /root/.ssh/id_rsa -P &amp;#39;&amp;#39;
export SSHPASS=123456
for IP in $IPLIST;do
       &amp;#123; sshpass -e ssh-copy-id -o StrictHostKeyChecking=no $IP; &amp;#125; &amp;amp;

done
wait
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ansible-doc&#34;&gt;&lt;a href=&#34;#ansible-doc&#34; class=&#34;headerlink&#34; title=&#34;ansible-doc&#34;&gt;&lt;/a&gt;ansible-doc&lt;/h3&gt;&lt;p&gt;此工具用来显示模块帮助,相当于man&lt;br&gt;格式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-doc [options] [module...]
-l, --list #列出可用模块
-s, --snippet #显示指定模块的playbook片段
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 查看帮助&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@rocky ~]# ansible-doc --help
usage: ansible-doc [-h] [--version] [-v] [-M MODULE_PATH] [--playbook-dir BASEDIR]
                   [-t &amp;#123;become,cache,callback,cliconf,connection,httpapi,inventory,lookup,netconf,shell,vars,module,strategy,role,keyword&amp;#125;]
                   [-j] [-r ROLES_PATH] [-e ENTRY_POINT | -s | -F | -l | --metadata-dump] [--no-fail-on-errors]
                   [plugin ...]

plugin documentation tool

positional arguments:
  plugin                Plugin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#列出所有模块
ansible-doc -l
#查看指定模块帮助用法
ansible-doc ping
#查看指定模块帮助用法
ansible-doc -s ping
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 查看指定的插件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@rocky ~]# ansible-doc -t connection -l
local        execute on controller                                                                                                 
paramiko_ssh Run tasks via python ssh (paramiko)                                                                                   
psrp         Run tasks over Microsoft PowerShell Remoting Protocol                                                                 
ssh          connect via SSH client binary                                                                                         
winrm        Run tasks over Microsoft&amp;#39;s WinRM                                                                                      
[root@rocky ~]# 
[root@rocky ~]# ansible-doc -t lookup -l
config              Lookup current Ansible configuration values                                                                    
csvfile             read data from a TSV or CSV file                                                                               
dict                returns key/value pair items from dictionaries                                                                 
env                 Read the value of environment variables                                                                        
file                read file contents                                                                                             
fileglob            list files matching a pattern                                                                                  
first_found         return first file found from list                                                                              
indexed_items       rewrites lists to return &amp;#39;indexed items&amp;#39;                                                                       
ini                 read data from an ini file                                                                                     
inventory_hostnames list of inventory hosts matching a host pattern                                                                
items               list of items                                                                                                  
lines               read lines from command                                                                                        
list                simply returns what it is given                                                                                
nested              composes a list with nested elements of other lists                                                            
password            retrieve or generate a random password, stored in a file                                                       
pipe                read output from a command                                                                                     
random_choice       return random element from list                                                                                
sequence            generate a list based on a number sequence                                                                     
subelements         traverse nested key from a list of dictionaries                                                                
template            retrieve contents of file after templating with Jinja2                                                         
together            merges lists into synchronized list                                                                            
unvault             read vaulted file(s) contents                                                                                  
url                 return contents from URL                                                                                       
varnames            Lookup matching variable names                                                                                 
vars                Lookup templated value of variables                                                                            
[root@rocky ~]# 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ansible&#34;&gt;&lt;a href=&#34;#ansible&#34; class=&#34;headerlink&#34; title=&#34;ansible&#34;&gt;&lt;/a&gt;ansible&lt;/h3&gt;&lt;h4 id=&#34;Ansible-Ad-Hoc-介绍&#34;&gt;&lt;a href=&#34;#Ansible-Ad-Hoc-介绍&#34; class=&#34;headerlink&#34; title=&#34;Ansible Ad-Hoc 介绍&#34;&gt;&lt;/a&gt;Ansible Ad-Hoc 介绍&lt;/h4&gt;&lt;p&gt;Ansible Ad-Hoc 的执行方式的主要工具就是 ansible&lt;br&gt;特点: 一次性的执行,不会保存执行命令信息,只适合临时性或测试性的任务&lt;/p&gt;
&lt;h4 id=&#34;ansible-命令用法&#34;&gt;&lt;a href=&#34;#ansible-命令用法&#34; class=&#34;headerlink&#34; title=&#34;ansible 命令用法&#34;&gt;&lt;/a&gt;ansible 命令用法&lt;/h4&gt;&lt;p&gt;格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible &amp;lt;host-pattern&amp;gt; [-m module_name] [-a args]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;选项说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--version #显示版本
-m module #指定模块，默认为command
-v #详细过程 -vv -vvv更详细
--list-hosts #显示主机列表，可简写 --list
-C, --check #检查，并不执行
-T, --timeout=TIMEOUT #执行命令的超时时间，默认10s
-k, --ask-pass #提示输入ssh连接密码，默认Key验证
-u, --user=REMOTE_USER #执行远程执行的用户,默认root
-b, --become #代替旧版的sudo实现通过sudo机制实现提升权限
--become-user=USERNAME #指定sudo的runas用户，默认为root
-K, --ask-become-pass #提示输入sudo时的口令
-f FORKS, --forks FORKS #指定并发同时执行ansible任务的主机数
-i INVENTORY, --inventory INVENTORY #指定主机清单文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#以wang用户执行ping存活检测
ansible all -m ping -u wang -k
#以wang sudo至root执行ping存活检测
ansible all -m ping -u wang -k -b
#以wang sudo至mage用户执行ping存活检测
ansible all -m ping -u wang -k -b --become-user=mage
#以wang sudo至root用户执行ls
ansible all -m command -u wang -a &amp;#39;ls /root&amp;#39; -b --become-user=root -k -K
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 并发执行控制&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#分别执行下面两条命令观察结果
[root@ansible ~]#ansible all -a &amp;#39;sleep 5&amp;#39; -f1
[root@ansible ~]#ansible all -a &amp;#39;sleep 5&amp;#39; -f10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 使用普能用户进行远程管理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#在所有控制端和被控制端创建用户和密码
[root@rocky8 ~]#useradd wang
[root@rocky8 ~]#echo wang:123456 | chpasswd
#在所有被控制端对用户sudo授权
[root@rocky8 ~]#visudo
wang ALL=(ALL) NOPASSWD: ALL
[root@rocky8 ~]#visudo -c
/etc/sudoers: parsed OK
#实现从控制端到被控制端的基于key验证
[root@ansible ~]#su - wang
wang@ansible:~$ssh-keygen -f ~/.ssh/id_rsa -P &amp;#39;&amp;#39;
wang@ansible:~$$ssh-copy-id wang@&amp;#39;10.0.0.8&amp;#39;
#使用普通用户测试连接,默认连接权限不足失败
wang@ansible:~$ ansible 10.0.0.8 -m shell -a &amp;#39;ls /root&amp;#39;
10.0.0.8 | FAILED | rc=2 &amp;gt;&amp;gt;
ls: cannot open directory &amp;#39;/root&amp;#39;: Permission deniednon-zero return code
#使用普通用户通过-b选项连接实现sudo提权后连接成功
wang@ansible:~$ ansible 10.0.0.8 -m shell -a &amp;#39;ls /root&amp;#39; -b --become-user root
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
anaconda-ks.cfg
#修改配置文件指定sudo机制
[root@ansible ~]#vim /etc/ansible/ansible.cfg
#取消下面行前面的注释
[privilege_escalation]
become=True
become_method=sudo
become_user=root
become_ask_pass=False
#再次测试
[root@ansible ~]#su - wang
wang@ansible:~$ ansible 10.0.0.8 -m shell -a &amp;#39;ls /root&amp;#39;
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
anaconda-ks.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 使用普通用户连接远程主机执行代替另一个用户身份执行操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos8 ~]#useradd wang
[root@centos8 ~]#echo wang:123456 | chpasswd
#先在被控制端能过sudo对普通用户授权
[root@centos8 ~]#grep wang /etc/sudoers
wang ALL=(ALL) NOPASSWD: ALL
#以wang的用户连接用户,并利用sudo代表mage执行whoami命令
[root@ansible ~]#ansible 10.0.0.8 -m shell -a &amp;#39;whoami&amp;#39; -u wang -k -b --become-
user=mage
SSH password: #输入远程主机wang用户ssh连接密码
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
mage
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ansible的Host-pattern&#34;&gt;&lt;a href=&#34;#ansible的Host-pattern&#34; class=&#34;headerlink&#34; title=&#34;ansible的Host-pattern&#34;&gt;&lt;/a&gt;ansible的Host-pattern&lt;/h4&gt;&lt;p&gt;用于匹配被控制的主机的列表&lt;br&gt;All ：表示所有Inventory中的所有主机&lt;br&gt;范例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m ping
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;*:通配符&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible &amp;quot;*&amp;quot; -m ping
ansible 192.168.1.* -m ping
ansible &amp;quot;srvs&amp;quot; -m ping
ansible &amp;quot;10.0.0.6 10.0.0.7&amp;quot; -m ping
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或关系&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible &amp;quot;websrvs:appsrvs&amp;quot; -m ping
ansible &amp;quot;192.168.1.10:192.168.1.20&amp;quot; -m ping
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;逻辑与&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#在websrvs组并且在dbsrvs组中的主机
ansible &amp;quot;websrvs:&amp;amp;dbsrvs&amp;quot; -m ping
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;逻辑非&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#在所有主机,但不在websrvs组和dbsrvs组中的主机
#注意：此处为单引号
ansible &amp;#39;all:!dbsrvs:!websrvs&amp;#39; -m ping
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;综合逻辑&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible &amp;#39;websrvs:dbsrvs:&amp;amp;appsrvs:!ftpsrvs&amp;#39; -m ping
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正则表达式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible &amp;quot;websrvs:dbsrvs&amp;quot; -m ping
ansible &amp;quot;~(web|db).*\.magedu\.com&amp;quot; -m ping
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;ansible-命令的执行过程&#34;&gt;&lt;a href=&#34;#ansible-命令的执行过程&#34; class=&#34;headerlink&#34; title=&#34;ansible 命令的执行过程&#34;&gt;&lt;/a&gt;ansible 命令的执行过程&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;加载自己的配置文件,默认&amp;#x2F;etc&amp;#x2F;ansible&amp;#x2F;ansible.cfg&lt;/li&gt;
&lt;li&gt;查找主机清单中对应的主机或主机组&lt;/li&gt;
&lt;li&gt;加载自己对应的模块文件，如：command&lt;/li&gt;
&lt;li&gt;通过ansible将模块或命令生成对应的临时py文件，并将该文件传输至远程服务器的对应执行用户&lt;br&gt;$HOME&amp;#x2F;.ansible&amp;#x2F;tmp&amp;#x2F;ansible-tmp-数字&amp;#x2F;XXX.PY文件&lt;/li&gt;
&lt;li&gt;给文件+x执行&lt;/li&gt;
&lt;li&gt;执行并返回结果&lt;/li&gt;
&lt;li&gt;删除临时py文件，退出&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;ansible-命令的执行状态&#34;&gt;&lt;a href=&#34;#ansible-命令的执行状态&#34; class=&#34;headerlink&#34; title=&#34;ansible 命令的执行状态&#34;&gt;&lt;/a&gt;ansible 命令的执行状态&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;[root@centos8 ~]#grep -A 14 &amp;#39;\[colors\]&amp;#39; /etc/ansible/ansible.cfg
[colors]
#highlight = white
#verbose = blue
#warn = bright purple
#error = red
#debug = dark gray
#deprecate = purple
#skip = cyan
#unreachable = red
#ok = green
#changed = yellow
#diff_add = green
#diff_remove = red
#diff_lines = cyan
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;绿色：执行成功并且对目标主机不需要做改变的操作&lt;/li&gt;
&lt;li&gt;黄色：执行成功并且对目标主机做变更&lt;/li&gt;
&lt;li&gt;红色：执行失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ansible-console&#34;&gt;&lt;a href=&#34;#ansible-console&#34; class=&#34;headerlink&#34; title=&#34;ansible-console&#34;&gt;&lt;/a&gt;ansible-console&lt;/h3&gt;&lt;p&gt;此工具可交互执行命令，支持tab，ansible 2.0+新增&lt;br&gt;提示符格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;执行用户@当前操作的主机组 (当前组的主机数量)[f:并发数]$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常用子命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置并发数： forks n 例如： forks 10&lt;/li&gt;
&lt;li&gt;切换组： cd 主机组 例如： cd web&lt;/li&gt;
&lt;li&gt;列出当前组主机列表： list&lt;/li&gt;
&lt;li&gt;列出所有的内置命令： ?或help&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;范例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#ansible-console
Welcome to the ansible console.
Type help or ? to list commands.
root@all (3)[f:5]$ ping
10.0.0.7 | SUCCESS =&amp;gt; &amp;#123;
&amp;quot;ansible_facts&amp;quot;: &amp;#123;
&amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;
&amp;#125;,
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
&amp;#125;
10.0.0.6 | SUCCESS =&amp;gt; &amp;#123;
&amp;quot;ansible_facts&amp;quot;: &amp;#123;
&amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;
&amp;#125;,
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
&amp;#125;
10.0.0.8 | SUCCESS =&amp;gt; &amp;#123;
&amp;quot;ansible_facts&amp;quot;: &amp;#123;
&amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/libexec/platform-python&amp;quot;
&amp;#125;,
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
&amp;#125;
root@all (3)[f:5]$ list
10.0.0.8
10.0.0.7
10.0.0.6
root@all (3)[f:5]$ cd websrvs
root@websrvs (2)[f:5]$ list
10.0.0.7
10.0.0.8
root@websrvs (2)[f:5]$ forks 10
root@websrvs (2)[f:10]$ cd appsrvs
root@appsrvs (2)[f:5]$ yum name=httpd state=present
root@appsrvs (2)[f:5]$ service name=httpd state=started
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ansible-playbook&#34;&gt;&lt;a href=&#34;#ansible-playbook&#34; class=&#34;headerlink&#34; title=&#34;ansible-playbook&#34;&gt;&lt;/a&gt;ansible-playbook&lt;/h3&gt;&lt;p&gt;此工具用于执行编写好的 playbook 任务&lt;br&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook hello.yml
cat hello.yml
---
#hello world yml file
- hosts: websrvs
  remote_user: root
  gather_facts: no
  tasks:
  - name: hello world
    command: /usr/bin/wall hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ansible-vault&#34;&gt;&lt;a href=&#34;#ansible-vault&#34; class=&#34;headerlink&#34; title=&#34;ansible-vault&#34;&gt;&lt;/a&gt;ansible-vault&lt;/h3&gt;&lt;p&gt;此工具可以用于加密解密yml文件&lt;br&gt;格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-vault [create|decrypt|edit|encrypt|rekey|view]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-vault encrypt hello.yml #加密
ansible-vault decrypt hello.yml #解密
ansible-vault view hello.yml #查看
ansible-vault edit hello.yml #编辑加密文件
ansible-vault rekey hello.yml #修改口令
ansible-vault create new.yml #创建新文件
#执行加密的playbook,交互式输入密码
chmod 600 hello.yml
ansible-playbook --ask-vault-pass hello.yml
#从pass.txt文件中读取密码
ansible-playbook --vault-password-file pass.txt hello.yml
#从配置文件中取得密码
#vi /etc/ansible/ansible.cfg
[defaults]
ault-password-file=pass.txt
#可以直接执行加密文件
ansible-playbook hello.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ansible-galaxy&#34;&gt;&lt;a href=&#34;#ansible-galaxy&#34; class=&#34;headerlink&#34; title=&#34;ansible-galaxy&#34;&gt;&lt;/a&gt;ansible-galaxy&lt;/h3&gt;&lt;p&gt;Galaxy 是一个免费网站, 类似于github网站, 网站上发布了很多的共享的roles角色。&lt;br&gt;Ansible 提供了ansible-galaxy命令行工具连接 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9nYWxheHkuYW5zaWJsZS5jb20v&#34;&gt;https://galaxy.ansible.com&lt;/span&gt; 网站下载相应的roles, 进行init(初始化、search( 查拘、install(安装、 remove(移除)等操作。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1677156776774.png&#34; alt=&#34;1677156776774&#34;&gt;&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#搜索项目
[root@ansible ~]#ansible-galaxy search lamp
#列出所有已安装的galaxy
ansible-galaxy list
#安装galaxy,默认下载到~/.ansible/roles下
ansible-galaxy install geerlingguy.mysql
ansible-galaxy install geerlingguy.redis
#删除galaxy
ansible-galaxy remove geerlingguy.redis
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Ansible常用模块&#34;&gt;&lt;a href=&#34;#Ansible常用模块&#34; class=&#34;headerlink&#34; title=&#34;Ansible常用模块&#34;&gt;&lt;/a&gt;Ansible常用模块&lt;/h2&gt;&lt;p&gt;2015年12月只270多个模块&lt;br&gt;2016年12年26日ansible 1.9.2 有540个模块&lt;br&gt;2018年01月12日ansible 2.3.8 有1378个模块&lt;br&gt;2018年05月28日ansible 2.5.3 有1562个模块&lt;br&gt;2018年07月15日ansible 2.6.3 有1852个模块&lt;br&gt;2018年11月19日ansible 2.7.2 有2080个模块&lt;br&gt;2020年03月02日ansible 2.9.5 有3387个模块&lt;br&gt;2021年12月22日ansible 2.11.8 有6141个模块&lt;br&gt;2022年06月04日ansible 2.12.6 有6763个模块&lt;br&gt;虽然模块众多，但最常用的模块也就2，30个而已，针对特定业务只需要熟悉10几个模块即可&lt;br&gt;常用模块帮助文档参考：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://docs.ansible.com/ansible/2.9/modules/modules_by_category.html
https://docs.ansible.com/ansible/2.9/modules/list_of_all_modules.html
https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html
https://docs.ansible.com/ansible/latest/modules/modules_by_category.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Command-模块&#34;&gt;&lt;a href=&#34;#Command-模块&#34; class=&#34;headerlink&#34; title=&#34;Command 模块&#34;&gt;&lt;/a&gt;Command 模块&lt;/h3&gt;&lt;p&gt;功能：在远程主机执行命令，此为默认模块，可忽略 -m 选项&lt;br&gt;注意：此命令不支持 $VARNAME &amp;lt; &amp;gt; | ; &amp;amp; 等，可用shell模块实现&lt;br&gt;注意：此模块不具有幂等性&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chdir=dir #执行命令前,先切换至目录dir
creates=file #当file不存在时才会执行
removes=file #当file存在时才会执行
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#ansible websrvs -m command -a &amp;#39;chdir=/etc cat centos-release&amp;#39;
10.0.0.7 | CHANGED | rc=0 &amp;gt;&amp;gt;
CentOS Linux release 7.7.1908 (Core)
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
CentOS Linux release 8.1.1911 (Core)
[root@ansible ~]#ansible websrvs -m command -a &amp;#39;chdir=/etc creates=/data/f1.txt cat centos-release&amp;#39;
10.0.0.7 | CHANGED | rc=0 &amp;gt;&amp;gt;
CentOS Linux release 7.7.1908 (Core)
10.0.0.8 | SUCCESS | rc=0 &amp;gt;&amp;gt;
skipped, since /data/f1.txt exists
[root@ansible ~]#ansible websrvs -m command -a &amp;#39;chdir=/etc removes=/data/f1.txt cat centos-release&amp;#39;
10.0.0.7 | SUCCESS | rc=0 &amp;gt;&amp;gt;
skipped, since /data/f1.txt does not exist
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
CentOS Linux release 8.1.1911 (Core)
ansible websrvs -m command -a &amp;#39;service vsftpd start&amp;#39;
ansible websrvs -m command -a &amp;#39;echo magedu |passwd --stdin wang&amp;#39;
ansible websrvs -m command -a &amp;#39;rm -rf /data/&amp;#39;
ansible websrvs -m command -a &amp;#39;echo hello &amp;gt; /data/hello.log&amp;#39;

ansible websrvs -m command -a &amp;quot;echo $HOSTNAME&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Shell-模块&#34;&gt;&lt;a href=&#34;#Shell-模块&#34; class=&#34;headerlink&#34; title=&#34;Shell 模块&#34;&gt;&lt;/a&gt;Shell 模块&lt;/h3&gt;&lt;p&gt;功能：和command相似，用shell执行命令,支持各种符号,比如:*,$, &amp;gt; , 相当于增强版的command模块&lt;br&gt;注意：此模块不具有幂等性,建议能不能就用此模块,最好使用专用模块&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chdir=dir #执行命令前,先切换至目录dir
creates=file #当file不存在时才会执行
removes=file #当file存在时才会执行
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#ansible websrvs -m shell -a &amp;quot;echo $HOSTNAME&amp;quot;
10.0.0.7 | CHANGED | rc=0 &amp;gt;&amp;gt;
ansible
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
ansible
[root@ansible ~]#ansible websrvs -m shell -a &amp;#39;echo $HOSTNAME&amp;#39;
10.0.0.7 | CHANGED | rc=0 &amp;gt;&amp;gt;
centos7.wangxiaochun.com
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
centos8.localdomain
[root@ansible ~]#ansible websrvs -m shell -a &amp;#39;echo centos | passwd --stdin wang&amp;#39;
10.0.0.7 | CHANGED | rc=0 &amp;gt;&amp;gt;
Changing password for user wang.
passwd: all authentication tokens updated successfully.
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
Changing password for user wang.
passwd: all authentication tokens updated successfully.
[root@ansible ~]#ansible websrvs -m shell -a &amp;#39;ls -l /etc/shadow&amp;#39;
10.0.0.7 | CHANGED | rc=0 &amp;gt;&amp;gt;
---------- 1 root root 889 Mar 2 14:34 /etc/shadow
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
---------- 1 root root 944 Mar 2 14:34 /etc/shadow
[root@ansible ~]#ansible websrvs -m shell -a &amp;#39;echo hello &amp;gt; /data/hello.log&amp;#39;
10.0.0.7 | CHANGED | rc=0 &amp;gt;&amp;gt;
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
[root@ansible ~]#ansible websrvs -m shell -a &amp;#39;cat /data/hello.log&amp;#39;
10.0.0.7 | CHANGED | rc=0 &amp;gt;&amp;gt;
hello
10.0.0.8 | CHANGED | rc=0 &amp;gt;&amp;gt;
hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：调用bash执行命令 类似 cat &amp;#x2F;tmp&amp;#x2F;test.md | awk -F’|’ ‘{print $1,$2}’ &amp;amp;&amp;gt; &amp;#x2F;tmp&amp;#x2F;example.txt 这些复杂命令，即使使用shell也可能会失败，解决办法：写到脚本时，copy到远程，执行，再把需要的结果拉回执行命令的机器&lt;br&gt;范例：将shell模块代替command，设为模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#vim /etc/ansible/ansible.cfg
#修改下面一行
module_name = shell
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Script-模块&#34;&gt;&lt;a href=&#34;#Script-模块&#34; class=&#34;headerlink&#34; title=&#34;Script 模块&#34;&gt;&lt;/a&gt;Script 模块&lt;/h3&gt;&lt;p&gt;功能：在远程主机上运行ansible服务器上的脚本(无需执行权限)&lt;br&gt;注意：此模块不具有幂等性&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chdir=dir #执行命令前,先切换至目录dir
cmd #指定ansible主机的命令
creates=file #当file不存在时才会执行
removes=file #当file存在时才会执行
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible websrvs -m script -a /data/test.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Copy-模块&#34;&gt;&lt;a href=&#34;#Copy-模块&#34; class=&#34;headerlink&#34; title=&#34;Copy 模块&#34;&gt;&lt;/a&gt;Copy 模块&lt;/h3&gt;&lt;p&gt;功能：复制ansible服务器主控端或远程的本机的文件到远程主机&lt;br&gt;注意: src&amp;#x3D;file 如果是没指明路径,则为当前目录或当前目录下的files目录下的file文件&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src #控制端的源文件路径
dest #被控端的文件路径
owner #属主
group #属组
mode #权限
backup #是否备份
validate #验证成功才会执行copy
remote_src #no是默认值,表示src文件在ansible主机,yes表示src文件在远程主机
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#如目标存在，默认覆盖，此处指定先备
ansible websrvs -m copy -a &amp;quot;src=/root/test1.sh dest=/tmp/test2.sh owner=wang mode=600 backup=yes&amp;quot;
#指定内容，直接生成目标文件
ansible websrvs -m copy -a &amp;quot;content=&amp;#39;wang 123456\nxiao 654321\n&amp;#39; dest=/etc/rsync.pas owner=root group=root mode=0600&amp;quot;
#复制/etc目录自身,注意/etc/后面没有/
ansible websrvs -m copy -a &amp;quot;src=/etc dest=/backup&amp;quot;
#复制/etc/下的文件，不包括/etc/目录自身,注意/etc/后面有/
ansible websrvs -m copy -a &amp;quot;src=/etc/ dest=/backup&amp;quot;
#复制/etc/suders,并校验语法
ansible websrvs -m copy -a &amp;quot;src=/etc/suders dest=/etc/sudoers.edit remote_src=yes validate=/usr/sbin/visudo -csf %s&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Get-url-模块&#34;&gt;&lt;a href=&#34;#Get-url-模块&#34; class=&#34;headerlink&#34; title=&#34;Get_url 模块&#34;&gt;&lt;/a&gt;Get_url 模块&lt;/h3&gt;&lt;p&gt;功能: 用于将文件从http、https或ftp下载到被管理机节点上&lt;br&gt;常用参数如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url #下载文件的URL,支持HTTP，HTTPS或FTP协议
dest #下载到目标路径（绝对路径），如果目标是一个目录，就用原文件名，如果目标设置了名称就用目标
设置的名称
owner #指定属主
group #指定属组
mode #指定权限
force #如果yes，dest不是目录，将每次下载文件，如果内容改变替换文件。如果no，则只有在目标不存
在时才会下载
checksum #对目标文件在下载后计算摘要，以确保其完整性
#示例: checksum=&amp;quot;sha256:D98291AC[...]B6DC7B97&amp;quot;,
checksum=&amp;quot;sha256:http://example.com/path/sha256sum.txt&amp;quot;
url_username #用于HTTP基本认证的用户名。 对于允许空密码的站点，此参数可以不使用`url_password&amp;#39;
url_password #用于HTTP基本认证的密码。 如果未指定`url_username&amp;#39;参数，则不会使用`url_password&amp;#39;参数
validate_certs #如果“no”，SSL证书将不会被验证。 适用于自签名证书在私有网站上使用
timeout #URL请求的超时时间,秒为单位
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 下载并MD5验证&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#ansible websrvs -m get_url -a &amp;#39;url=http://nginx.org/download/nginx-1.18.0.tar.gz dest=/usr/local/src/nginx.tar.gz checksum=&amp;quot;md5:b2d33d24d89b8b1f87ff5d251aa27eb8&amp;quot;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Fetch-模块&#34;&gt;&lt;a href=&#34;#Fetch-模块&#34; class=&#34;headerlink&#34; title=&#34;Fetch 模块&#34;&gt;&lt;/a&gt;Fetch 模块&lt;/h3&gt;&lt;p&gt;功能：从远程主机提取文件至ansible的主控端，copy相反，目前不支持目录&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src #被控制端的源文件路径,只支持文件
dest #ansible控制端的目录路径
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible websrvs -m fetch -a &amp;#39;src=/root/test.sh dest=/data/scripts&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#ansible all -m fetch -a &amp;#39;src=/etc/redhat-release
dest=/data/os&amp;#39;
[root@ansible ~]#tree /data/os/
/data/os/
├── 10.0.0.6
│ └── etc
│ └── redhat-release
├── 10.0.0.7
│ └── etc
│ └── redhat-release
└── 10.0.0.8
└── etc
└── redhat-release
6 directories, 3 files
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;File-模块&#34;&gt;&lt;a href=&#34;#File-模块&#34; class=&#34;headerlink&#34; title=&#34;File 模块&#34;&gt;&lt;/a&gt;File 模块&lt;/h3&gt;&lt;p&gt;功能：设置文件属性,创建文件,目录和软链接等&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path #在被控端创建的路径
owner #属主
group #属组
mode #权限
state #状态
=touch #创建文件
=directory #创建目录
=link #软链接
=hard #硬链接
recurse #yes表示递归授权
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#创建空文件
ansible all -m file -a &amp;#39;path=/data/test.txt state=touch&amp;#39;
ansible all -m file -a &amp;#39;path=/data/test.txt state=absent&amp;#39;
ansible all -m file -a &amp;quot;path=/root/test.sh owner=wang mode=755&amp;quot;
#创建目录
ansible all -m file -a &amp;quot;path=/data/mysql state=directory owner=mysql group=mysql&amp;quot;
#创建软链接
ansible all -m file -a &amp;#39;src=/data/testfile path|dest|name=/data/testfile-link state=link&amp;#39;
#创建目录
ansible all -m file -a &amp;#39;path=/data/testdir state=directory&amp;#39;
#递归修改目录属性,但不递归至子目录
ansible all -m file -a &amp;quot;path=/data/mysql state=directory owner=mysql group=mysql&amp;quot;
#递归修改目录及子目录的属性
ansible all -m file -a &amp;quot;path=/data/mysql state=directory owner=mysql group=mysql recurse=yes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;stat-模块&#34;&gt;&lt;a href=&#34;#stat-模块&#34; class=&#34;headerlink&#34; title=&#34;stat 模块&#34;&gt;&lt;/a&gt;stat 模块&lt;/h3&gt;&lt;p&gt;功能：检查文件或文件系统的状态&lt;br&gt;注意：对于Windows目标，请改用win_stat模块&lt;/p&gt;
&lt;p&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path #文件/对象的完整路径（必须）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常用的返回值判断：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exists： 判断是否存在
isuid： 调用用户的ID与所有者ID是否匹配
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#ansible 127.0.0.1 -m stat -a &amp;#39;path=/etc/passwd&amp;#39;
127.0.0.1 | SUCCESS =&amp;gt; &amp;#123;
&amp;quot;changed&amp;quot;: false,
&amp;quot;stat&amp;quot;: &amp;#123;
&amp;quot;atime&amp;quot;: 1614601466.7493012,
&amp;quot;attr_flags&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;attributes&amp;quot;: [],
&amp;quot;block_size&amp;quot;: 4096,
&amp;quot;blocks&amp;quot;: 8,
&amp;quot;charset&amp;quot;: &amp;quot;us-ascii&amp;quot;,
&amp;quot;checksum&amp;quot;: &amp;quot;8f7a9a996d24de98bf1eab4a047f8e89e9c708cf&amp;quot;,
&amp;quot;ctime&amp;quot;: 1614334259.4498665,
&amp;quot;dev&amp;quot;: 2050,
&amp;quot;device_type&amp;quot;: 0,
&amp;quot;executable&amp;quot;: false,
&amp;quot;exists&amp;quot;: true,
&amp;quot;gid&amp;quot;: 0,
&amp;quot;gr_name&amp;quot;: &amp;quot;root&amp;quot;,
&amp;quot;inode&amp;quot;: 134691833,
&amp;quot;isblk&amp;quot;: false,
&amp;quot;ischr&amp;quot;: false,
&amp;quot;isdir&amp;quot;: false,
&amp;quot;isfifo&amp;quot;: false,
&amp;quot;isgid&amp;quot;: false,
&amp;quot;islnk&amp;quot;: false,
&amp;quot;isreg&amp;quot;: true,
&amp;quot;issock&amp;quot;: false,
&amp;quot;isuid&amp;quot;: false,
&amp;quot;mimetype&amp;quot;: &amp;quot;text/plain&amp;quot;,
&amp;quot;mode&amp;quot;: &amp;quot;0000&amp;quot;,
&amp;quot;mtime&amp;quot;: 1614334259.4498665,
&amp;quot;nlink&amp;quot;: 1,
&amp;quot;path&amp;quot;: &amp;quot;/etc/passwd&amp;quot;,
&amp;quot;pw_name&amp;quot;: &amp;quot;root&amp;quot;,
&amp;quot;readable&amp;quot;: true,
&amp;quot;rgrp&amp;quot;: false,
&amp;quot;roth&amp;quot;: false,
&amp;quot;rusr&amp;quot;: false,
&amp;quot;size&amp;quot;: 1030,
&amp;quot;uid&amp;quot;: 0,
&amp;quot;version&amp;quot;: &amp;quot;671641160&amp;quot;,
&amp;quot;wgrp&amp;quot;: false,
&amp;quot;woth&amp;quot;: false,
&amp;quot;writeable&amp;quot;: true,
&amp;quot;wusr&amp;quot;: false,
&amp;quot;xgrp&amp;quot;: false,
&amp;quot;xoth&amp;quot;: false,
&amp;quot;xusr&amp;quot;: false
&amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: install | Check if file is already configured.
  stat: path=&amp;#123;&amp;#123; nginx_file_path &amp;#125;&amp;#125;
  connection: local
  register: nginx_file_result
- name: install | Download nginx file
  get_url: url=&amp;#123;&amp;#123; nginx_file_url &amp;#125;&amp;#125; dest=&amp;#123;&amp;#123; software_files_path &amp;#125;&amp;#125;
  validate_certs=no
  connection: local
  when:，not. nginx_file_result.stat.exists
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ansible]#cat stat.yml
---
- hosts: websrvs
  tasks:
  - name: check file
    stat: path=/data/mysql
    register: st
  - name: debug
    debug:
      msg: &amp;quot;/data/mysql is not exist&amp;quot;
    when: not st.stat.exists
[root@ansible ansible]#ansible-playbook stat.yml
PLAY [websrvs]
********************************************************************************
***************************************
TASK [Gathering Facts]
********************************************************************************
*******************************
ok: [10.0.0.7]
ok: [10.0.0.8]
TASK [check file]
********************************************************************************
************************************
ok: [10.0.0.7]
ok: [10.0.0.8]
TASK [debug]
********************************************************************************
*****************************************
ok: [10.0.0.7] =&amp;gt; &amp;#123;
&amp;quot;msg&amp;quot;: &amp;quot;/data/mysql is not exist&amp;quot;
&amp;#125;
ok: [10.0.0.8] =&amp;gt; &amp;#123;
&amp;quot;msg&amp;quot;: &amp;quot;/data/mysql is not exist&amp;quot;
&amp;#125;
PLAY RECAP
********************************************************************************
*******************************************
10.0.0.7 : ok=3 changed=0 unreachable=0 failed=0
skipped=0 rescued=0 ignored=0
10.0.0.8 : ok=3 changed=0 unreachable=0 failed=0
skipped=0 rescued=0 ignored=0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;unarchive-模块&#34;&gt;&lt;a href=&#34;#unarchive-模块&#34; class=&#34;headerlink&#34; title=&#34;unarchive 模块&#34;&gt;&lt;/a&gt;unarchive 模块&lt;/h3&gt;&lt;p&gt;功能：解包解压缩&lt;br&gt;实现有两种用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将ansible主机上的压缩包传到远程主机后解压缩至特定目录，设置remote_src&amp;#x3D;no,此为默认值,可省略&lt;/li&gt;
&lt;li&gt;将远程本主机上或非ansible的其它主机的某个压缩包解压缩到远程主机本机的指定路径下，需要设置remote_src&amp;#x3D;yes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remote_src #和copy功能一样且选项互斥，yes表示源文件在远程被控主机或其它非ansible的其它主机上，no表示文件在ansible主机上,默认值为no, 此选项代替copy选项
copy #默认为yes，当copy=yes，拷贝的文件是从ansible主机复制到远程主机上，如果设置为copy=no，会在远程主机上寻找src源文件,此选项已废弃
src #源路径，可以是ansible主机上的路径，也可以是远程主机(被管理端或者第三方主机)上的路径，如果是远程主机上的路径，则需要设置remote_src=yes
dest #远程主机上的目标路径
mode #设置解压缩后的文件权限
creates=/path/file #当绝对路径/path/file不存在时才会执行
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m unarchive -a &amp;#39;src=/data/foo.tgz dest=/var/lib/foo owner=wang group=bin&amp;#39;

ansible all -m unarchive -a &amp;#39;src=/tmp/foo.zip dest=/data  mode=0777&amp;#39;

ansible all -m unarchive -a &amp;#39;src=https://example.com/example.zip dest=/data &amp;#39;

ansible websrvs -m unarchive -a &amp;#39;src=https://releases.ansible.com/ansible/ansible-2.1.6.0-0.1.rc1.tar.gz dest=/data/ owner=root remote_src=yes&amp;#39;

ansible websrvs -m unarchive -a &amp;#39;src=http://nginx.org/download/nginx- 1.18.0.tar.gz dest=/usr/local/src/ remote_src=yes&amp;#39;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Archive-模块&#34;&gt;&lt;a href=&#34;#Archive-模块&#34; class=&#34;headerlink&#34; title=&#34;Archive 模块&#34;&gt;&lt;/a&gt;Archive 模块&lt;/h3&gt;&lt;p&gt;功能：打包压缩保存在被管理节点&lt;/p&gt;
&lt;p&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path #压缩的文件或目录
dest #压缩后的文件
format #压缩格式,支持gz,bz2,xz,tar,zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible websrvs -m archive -a &amp;#39;path=/var/log/ dest=/data/log.tar.bz2 format=bz2 owner=wang mode=0600&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Hostname-模块&#34;&gt;&lt;a href=&#34;#Hostname-模块&#34; class=&#34;headerlink&#34; title=&#34;Hostname 模块&#34;&gt;&lt;/a&gt;Hostname 模块&lt;/h3&gt;&lt;p&gt;功能：管理主机名&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name #修改后的主机名称
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible node1 -m hostname -a &amp;quot;name=websrv&amp;quot;
ansible 10.0.0.18 -m hostname -a &amp;#39;name=node18.wang.org&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Cron-模块&#34;&gt;&lt;a href=&#34;#Cron-模块&#34; class=&#34;headerlink&#34; title=&#34;Cron 模块&#34;&gt;&lt;/a&gt;Cron 模块&lt;/h3&gt;&lt;p&gt;功能：计划任务&lt;br&gt;支持时间：minute，hour，day，month，weekday&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name #描述脚本的作用
minute #分钟
hour #小时
weekday #周
user #任务由哪个用户运行；默认root
job #任务
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#备份数据库脚本
[root@centos8 ~]#cat /root/mysql_backup.sh
#!/bin/bash
mysqldump -A -F --single-transaction --master-data=2 -q -uroot |gzip &amp;gt; /data/mysql_`date +%F_%T`.sql.gz
#创建任务
ansible 10.0.0.8 -m cron -a &amp;#39;hour=2 minute=30 weekday=1-5 name=&amp;quot;backup mysql&amp;quot; job=/root/mysql_backup.sh&amp;#39;

ansible websrvs -m cron -a &amp;quot;minute=*/5 job=&amp;#39;/usr/sbin/ntpdate ntp.aliyun.com &amp;amp;&amp;gt;/dev/null&amp;#39; name=Synctime&amp;quot;

#禁用计划任务
ansible websrvs -m cron -a &amp;quot;minute=*/5 job=&amp;#39;/usr/sbin/ntpdate 172.20.0.1 &amp;amp;&amp;gt;/dev/null&amp;#39; name=Synctime disabled=yes&amp;quot;

#启用计划任务
ansible websrvs -m cron -a &amp;quot;minute=*/5 job=&amp;#39;/usr/sbin/ntpdate 172.20.0.1 &amp;amp;&amp;gt; /dev/null&amp;#39; name=Synctime disabled=no&amp;quot;

#删除任务
ansible websrvs -m cron -a &amp;quot;name=&amp;#39;backup mysql&amp;#39; state=absent&amp;quot;
ansible websrvs -m cron -a &amp;#39;state=absent name=Synctime&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Yum-和-Apt-模块&#34;&gt;&lt;a href=&#34;#Yum-和-Apt-模块&#34; class=&#34;headerlink&#34; title=&#34;Yum 和 Apt 模块&#34;&gt;&lt;/a&gt;Yum 和 Apt 模块&lt;/h3&gt;&lt;p&gt;功能：管理软件包&lt;br&gt;yum 管理软件包，只支持RHEL，CentOS，fedora，不支持Ubuntu其它版本&lt;br&gt;apt 模块管理 Debian 相关版本的软件包&lt;br&gt;yum常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name #软件包名称
state #状态
=present #安装,此为默认值
=absent #删除
=latest #最新版
list #列出指定包
enablerepo #启用哪个仓库安装
disablerepo #不使用哪些仓库的包
exclude #排除指定的包
validate #是否检验,默认为yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#ansible websrvs -m yum -a &amp;#39;name=httpd state=present&amp;#39;
#安装zabbix agent rpm包

[root@ansible ~]#ansible websrvs -m yum -a &amp;#39;name=https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/5.0/rhel/8/x86_64/zabbix-agent2-5.0.24-1.el8.x86_64.rpm state=present validate_certs=no&amp;#39;

#启用epel源进行安装
[root@ansible ~]#ansible websrvs -m yum -a &amp;#39;name=nginx state=present enablerepo=epel&amp;#39;

#升级除kernel和foo开头以外的所有包
[root@ansible ~]#ansible websrvs -m yum -a &amp;#39;name=* state=lastest exclude=kernel*,foo*&amp;#39;

#删除
[root@ansible ~]#ansible websrvs -m yum -a &amp;#39;name=httpd state=absent&amp;#39;
[root@ansible ~]#ansible websrvs -m yum -a &amp;#39;name=sl,cowsay&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;yum-repository-模块&#34;&gt;&lt;a href=&#34;#yum-repository-模块&#34; class=&#34;headerlink&#34; title=&#34;yum_repository 模块&#34;&gt;&lt;/a&gt;yum_repository 模块&lt;/h3&gt;&lt;p&gt;功能: 此模块实现yum的仓库配置管理&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name #仓库id
description #仓库描述名称,对应配置文件中的name=
baseurl #仓库的地址
gpgcheck #验证开启
gpgkey #仓库公钥路径
state=absen  #删除
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible websrvs -m yum_repository -a &amp;#39;name=ansible_nginx description=&amp;quot;nginx repo&amp;quot; baseurl=&amp;quot;http://nginx.org/packages/centos/$releasever/$basearch/&amp;quot; gpgcheck=yes gpgkey=&amp;quot;https://nginx.org/keys/nginx_signing.key&amp;quot;&amp;#39;

[root@rocky8 ~]#cat /etc/yum.repos.d/ansible_nginx.repo
[ansible_nginx]
baseurl = http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck = 1
gpgkey = https://nginx.org/keys/nginx_signing.key
name = nginx repo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Service-模块&#34;&gt;&lt;a href=&#34;#Service-模块&#34; class=&#34;headerlink&#34; title=&#34;Service 模块&#34;&gt;&lt;/a&gt;Service 模块&lt;/h3&gt;&lt;p&gt;此模块和sytemd功能相似,选项很多相同&lt;br&gt;功能：管理服务&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name #服务名称
state #服务状态
=started #启动
=stopped #停止
=restarted #重启
=reloaded #重载
enabled #开启自启动
daemon_reload #加载新的配置文件,适用于systemd模块
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m service -a &amp;#39;name=httpd state=started enabled=yes&amp;#39;
ansible all -m service -a &amp;#39;name=httpd state=stopped&amp;#39;
ansible all -m service -a &amp;#39;name=httpd state=reloaded&amp;#39;
ansible all -m shell -a &amp;quot;sed -i &amp;#39;s/^Listen 80/Listen 8080/&amp;#39;
/etc/httpd/conf/httpd.conf&amp;quot;
ansible all -m service -a &amp;#39;name=httpd state=restarted&amp;#39;
#重启动指定网卡服务
ansible all -m service -a &amp;#39;name=network state=absent args=eth0&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;User-模块&#34;&gt;&lt;a href=&#34;#User-模块&#34; class=&#34;headerlink&#34; title=&#34;User 模块&#34;&gt;&lt;/a&gt;User 模块&lt;/h3&gt;&lt;p&gt;功能：管理用户&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name #创建的名称
uid #指定uid
group #指定基本组
shell #登录shell类型默认/bin/bash
create_home #是否创建家目录
password #设定对应的密码，必须是加密后的字符串才行，否则不生效
system #yes表示系统用户
groups #附加组
append #追加附加组使用,yes表示增加新的附加组
state #absen删除
remove #yes表示删除用户时将家目录一起删除
generate_ssh_key #创建私钥
ssh_keyu_bits #私钥位数
ssh_key_file #私钥文件路径
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#创建用户
ansible all -m user -a &amp;#39;name=user1 comment=&amp;quot;test user&amp;quot; uid=2048 home=/app/user1group=root&amp;#39;
ansible all -m user -a &amp;#39;name=nginx comment=nginx uid=88 group=nginxgroups=&amp;quot;root,daemon&amp;quot; shell=/sbin/nologin system=yes create_home=nohome=/data/nginx non_unique=yes&amp;#39;
#remove=yes表示删除用户及家目录等数据,默认remove=no
ansible all -m user -a &amp;#39;name=nginx state=absent remove=yes&amp;#39;
#生成123456加密的密码
ansible localhost -m debug -a &amp;quot;msg=&amp;#123;&amp;#123; &#39;123456&#39;| password_hash(&#39;sha512&#39;,&#39;salt&#39;)&amp;#125;&amp;#125;&amp;quot; localhost | SUCCESS =&amp;gt; &amp;#123; &amp;quot;msg&amp;quot;: &amp;quot;$6$salt$MktMKPZJ6t59GfxcJU20DwcwQzfMvOlHFVZiOVD71w.&amp;quot;
&amp;#125;
#用上面创建的密码创建用户
ansible websrvs -m user -a &amp;#39;name=www group=www system=yes shell=/sbin/nlogin password=&amp;quot;$6$salt$MktMKPZJ6t59GfxcJU20DwcwQzfMvOlHFVZiOVD71w.&amp;quot;&amp;#39;
#创建用户test,并生成4096bit的私钥
ansible websrvs -m user -a &amp;#39;name=test generate_ssh_key=yes ssh_key_bits=4096 ssh_key_file=.ssh/id_rsa&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Group-模块&#34;&gt;&lt;a href=&#34;#Group-模块&#34; class=&#34;headerlink&#34; title=&#34;Group 模块&#34;&gt;&lt;/a&gt;Group 模块&lt;/h3&gt;&lt;p&gt;功能：管理组&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name #指定组名称
gid #指定gid
state
=present #创建,默认
=absent #删除
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#创建组
ansible websrvs -m group -a &amp;#39;name=nginx gid=88 system=yes&amp;#39;
#删除组
ansible websrvs -m group -a &amp;#39;name=nginx state=absent&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Lineinfile-模块&#34;&gt;&lt;a href=&#34;#Lineinfile-模块&#34; class=&#34;headerlink&#34; title=&#34;Lineinfile 模块&#34;&gt;&lt;/a&gt;Lineinfile 模块&lt;/h3&gt;&lt;p&gt;ansible在使用sed进行替换时，经常会遇到需要转义的问题，而且ansible在遇到特殊符号进行替换时，&lt;br&gt;会存在问题，无法正常进行替换 。&lt;/p&gt;
&lt;p&gt;ansible自身提供了两个模块：lineinfile模块和replace模块，可以方便的进行替换一般在ansible当中去修改某个文件的单行进行替换的时候需要使用lineinfile模块&lt;br&gt;功能：相当于sed，主要用于修改一行的文件内容&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path #被控端文件的路径
regexp #正则匹配语法格式,表示被替换的内容
line #替换为的内容
state #absent表示删除
insertafter #插入到替换内容前面,如和regexp同时存在,只在没找到与regexp匹配时才使用
insertafter
insertbefore #插入到替换内容后面,如和regexp同时存在,只在没找到与regexp匹配时才使用
insertafter
backrefs #支持后面引用,yes和no
backup #修改前先备份
create #如果文件不存在,则创建,默认不存在会出错
mode #指定权限
owner #指定用户
group #指定组
#注意
regexp参数 ：使用正则表达式匹配对应的行，当替换文本时，如果有多行文本都能被匹配，则只有最后面被
匹配到的那行文本才会被替换，当删除文本时，如果有多行文本都能被匹配，这么这些行都会被删除。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意: 如果想进行多行匹配进行替换需要使用replace模块&lt;br&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改监听端口
ansible websrvs -m lineinfile -a &amp;quot;path=/etc/httpd/conf/httpd.conf regexp=&amp;#39;^Listen&amp;#39; line=&amp;#39;Listen 8080&amp;#39;&amp;quot;

#修改SELinux
ansible all -m lineinfile -a &amp;quot;path=/etc/selinux/config regexp=&amp;#39;^SELINUX=&amp;#39;line=&amp;#39;SELINUX=disabled&amp;#39;&amp;quot;

#添加网关
ansible webservers -m lineinfile -a &amp;#39;path=/etc/sysconfig/network-scripts/ifcfg-eth0 line=&amp;quot;GATEWAY=10.0.0.254&amp;quot;&amp;#39;

#给主机增加一个网关，但需要增加到NAME=下面
ansible webservers -m lineinfile -a &amp;#39;path=/etc/sysconfig/network-scripts/ifcfg-eth0 insertafter=&amp;quot;^NAME=&amp;quot; line=&amp;quot;GATEWAY=10.0.0.254&amp;quot;&amp;#39;
#效果如下
cat /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
NAME=eth0
GATEWAY=10.0.0.254
#给主机增加一个网关，但需要增加到NAME=上面
ansible webservers -m lineinfile -a &amp;#39;path=/etc/sysconfig/network-scripts/ifcfg-
eth0 insertbefore=&amp;quot;^NAME=&amp;quot; line=&amp;quot;GATEWAY=10.0.0.254&amp;quot;&amp;#39;
#效果如下
cat /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
GATEWAY=10.0.0.254
NAME=eth0
#删除网关
ansible webservers -m lineinfile -a &amp;#39;path=/etc/sysconfig/network-scripts/ifcfg-eth0 regexp=&amp;quot;^GATEWAY&amp;quot; state=absent&amp;#39;
#删除#开头的行
ansible all -m lineinfile -a &amp;#39;dest=/etc/fstab state=absent regexp=&amp;quot;^#&amp;quot;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Replace-模块&#34;&gt;&lt;a href=&#34;#Replace-模块&#34; class=&#34;headerlink&#34; title=&#34;Replace 模块&#34;&gt;&lt;/a&gt;Replace 模块&lt;/h3&gt;&lt;p&gt;该模块有点类似于sed命令，主要也是基于正则进行匹配和替换，建议使用&lt;br&gt;功能: 多行修改替换&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path #被控端文件的路径
regexp #正则匹配语法格式,表示被替换的内容
replace #替换为的内容
after #插入到替换内容前面,
before #插入到替换内容后面
backup #修改前先备份
mode #指定权限
owner #指定用户
group #指定组
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m replace -a &amp;quot;path=/etc/fstab regexp=&amp;#39;^(UUID.*)&amp;#39; replace=&amp;#39;#\1&amp;#39;&amp;quot;
ansible all -m replace -a &amp;quot;path=/etc/fstab regexp=&amp;#39;^#(UUID.*)&amp;#39; replace=&amp;#39;\1&amp;#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;SELinux-模块&#34;&gt;&lt;a href=&#34;#SELinux-模块&#34; class=&#34;headerlink&#34; title=&#34;SELinux 模块&#34;&gt;&lt;/a&gt;SELinux 模块&lt;/h3&gt;&lt;p&gt;功能: 该模块管理 SELInux 策略&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;policy #指定SELINUXTYPE=targeted
state #指定SELINUX=disabled
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@rocky ansible-apps]# ansible 192.168.32.132 -m selinux -a &amp;#39;state=disabled&amp;#39;
192.168.32.132 | FAILED! =&amp;gt; &amp;#123;
    &amp;quot;msg&amp;quot;: &amp;quot;The module selinux was redirected to ansible.posix.selinux, which could not be loaded.&amp;quot;
&amp;#125;

# ansible版本2.13.3出现如下错误
 &amp;quot;msg&amp;quot;: &amp;quot;The module selinux was redirected to ansible.posix.selinux, which could not be loaded.&amp;quot;
 
 # 解决方法
 [root@rocky ansible-apps]# ansible-galaxy collection install ansible.posix


# 再次执行，显示成功
[root@rocky ansible-apps]# ansible 192.168.32.132 -m selinux -a &amp;#39;state=disabled&amp;#39;
[WARNING]: SELinux state temporarily changed from &amp;#39;enforcing&amp;#39; to &amp;#39;permissive&amp;#39;. State change will take effect next reboot.
192.168.32.132 | CHANGED =&amp;gt; &amp;#123;
    &amp;quot;ansible_facts&amp;quot;: &amp;#123;
        &amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/libexec/platform-python&amp;quot;
    &amp;#125;,
    &amp;quot;changed&amp;quot;: true,
    &amp;quot;configfile&amp;quot;: &amp;quot;/etc/selinux/config&amp;quot;,
    &amp;quot;msg&amp;quot;: &amp;quot;Config SELinux state changed from &amp;#39;enforcing&amp;#39; to &amp;#39;disabled&amp;#39;&amp;quot;,
    &amp;quot;policy&amp;quot;: &amp;quot;targeted&amp;quot;,
    &amp;quot;reboot_required&amp;quot;: true,
    &amp;quot;state&amp;quot;: &amp;quot;disabled&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reboot-模块&#34;&gt;&lt;a href=&#34;#reboot-模块&#34; class=&#34;headerlink&#34; title=&#34;reboot 模块&#34;&gt;&lt;/a&gt;reboot 模块&lt;/h3&gt;&lt;p&gt;功能: 重启&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msg #重启提示
pre_reboot_delay #重启前延迟时间的秒数
post_reboot_delay #重启后延迟时间的秒数后,再验证系统正常启动
reboot_timeout #重启后延迟时间再执行测试成功与否的命令
test_command #执行测试成功与否的命令
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#ansible websrvs -m reboot -a &amp;#39;msg=&amp;quot;host will be reboot&amp;quot;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;mount-模块&#34;&gt;&lt;a href=&#34;#mount-模块&#34; class=&#34;headerlink&#34; title=&#34;mount 模块&#34;&gt;&lt;/a&gt;mount 模块&lt;/h3&gt;&lt;p&gt;功能: 挂载和卸载文件系统&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src #源设备路径，或网络地址
path #挂载至本地哪个路径下
fstype #设备类型； nfs
opts #挂载的选项
state #挂载还是卸载
=present #永久挂载，但没有立即生效
=absent #卸载临时挂载,并删除永久挂载
=mounted #临时挂载
=unmounted #临时卸载
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改fstab文件永久挂载,但不立即生效
mount websrvs -m mount -a &amp;#39;src=&amp;quot;UUID=b3e48f45-f933-4c8e-a700-22a159ec9077&amp;quot; path=/home fstype=xfs opts=noatime state=present&amp;#39;
#临时取消挂载
mount websrvs -m mount -a &amp;#39;path=/home fstype=xfs opts=noatime state=unmounted&amp;#39;
#永久挂载,并立即生效
ansible websrvs -m mount -a &amp;#39;src=10.0.0.8:/data/wordpress path=/var/www/html/wp- content/uploads opts=&amp;quot;_netdev&amp;quot; state=mounted&amp;#39;
#永久卸载,并立即生效
ansible websrvs -m mount -a &amp;#39;src=10.0.0.8:/data/wordpress path=/var/www/html/wp- content/uploads state=absent&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Setup-模块&#34;&gt;&lt;a href=&#34;#Setup-模块&#34; class=&#34;headerlink&#34; title=&#34;Setup 模块&#34;&gt;&lt;/a&gt;Setup 模块&lt;/h3&gt;&lt;p&gt;功能： setup 模块来收集主机的系统信息，这些 facts 信息可以直接以变量的形式使用，但是如果主机&lt;br&gt;较多，会影响执行速度&lt;br&gt;可以使用 gather_facts: no 来禁止 Ansible 收集 facts 信息&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filter #指定过滤条件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m setup
ansible all -m setup -a &amp;quot;filter=ansible_nodename&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_hostname&amp;quot;  #  主机名称
ansible all -m setup -a &amp;quot;filter=ansible_domain&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_memtotal_mb&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_memory_mb&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_memfree_mb&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_os_family&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_distribution&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_distribution_major_version&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_distribution_version&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_processor_vcpus&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_all_ipv4_addresses&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_architecture&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_uptime_seconds&amp;quot;
ansible all -m setup -a &amp;quot;filter=ansible_processor*&amp;quot;
ansible all -m setup -a &amp;#39;filter=ansible_env&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#ansible all -m setup -a &amp;#39;filter=ansible_python_version&amp;#39;
10.0.0.7 | SUCCESS =&amp;gt; &amp;#123;
&amp;quot;ansible_facts&amp;quot;: &amp;#123;
&amp;quot;ansible_python_version&amp;quot;: &amp;quot;2.7.5&amp;quot;,
&amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;
&amp;#125;,
&amp;quot;changed&amp;quot;: false
&amp;#125;
10.0.0.6 | SUCCESS =&amp;gt; &amp;#123;
&amp;quot;ansible_facts&amp;quot;: &amp;#123;
&amp;quot;ansible_python_version&amp;quot;: &amp;quot;2.6.6&amp;quot;,
&amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;
&amp;#125;,
&amp;quot;changed&amp;quot;: false
&amp;#125;
10.0.0.8 | SUCCESS =&amp;gt; &amp;#123;
&amp;quot;ansible_facts&amp;quot;: &amp;#123;
&amp;quot;ansible_python_version&amp;quot;: &amp;quot;3.6.8&amp;quot;,
&amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/libexec/platform-python&amp;quot;
&amp;#125;,
&amp;quot;changed&amp;quot;: false
&amp;#125;
[root@ansible ~]#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：取IP地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#取所有IP
ansible 10.0.0.101 -m setup -a &amp;#39;filter=ansible_all_ipv4_addresses&amp;#39;
10.0.0.101 | SUCCESS =&amp;gt; &amp;#123;
&amp;quot;ansible_facts&amp;quot;: &amp;#123;
&amp;quot;ansible_all_ipv4_addresses&amp;quot;: [
&amp;quot;192.168.0.1&amp;quot;,
&amp;quot;192.168.0.2&amp;quot;,
&amp;quot;192.168.64.238&amp;quot;,
&amp;quot;192.168.13.36&amp;quot;,
&amp;quot;10.0.0.101&amp;quot;,
&amp;quot;172.16.1.0&amp;quot;,
&amp;quot;172.17.0.1&amp;quot;
]
&amp;#125;,
&amp;quot;changed&amp;quot;: false
&amp;#125;
#取默认IP
ansible all -m setup -a &amp;#39;filter=&amp;quot;ansible_default_ipv4&amp;quot;&amp;#39;
10.0.0.101 | SUCCESS =&amp;gt; &amp;#123;
&amp;quot;ansible_facts&amp;quot;: &amp;#123;
&amp;quot;ansible_default_ipv4&amp;quot;: &amp;#123;
&amp;quot;address&amp;quot;: &amp;quot;10.0.0.101&amp;quot;,
&amp;quot;alias&amp;quot;: &amp;quot;eth0&amp;quot;,
&amp;quot;broadcast&amp;quot;: &amp;quot;10.0.0.255&amp;quot;,
&amp;quot;gateway&amp;quot;: &amp;quot;10.0.0.2&amp;quot;,
&amp;quot;interface&amp;quot;: &amp;quot;eth0&amp;quot;,
&amp;quot;macaddress&amp;quot;: &amp;quot;00:0c:29:e8:c7:9b&amp;quot;,
&amp;quot;mtu&amp;quot;: 1500,
&amp;quot;netmask&amp;quot;: &amp;quot;255.255.255.0&amp;quot;,
&amp;quot;network&amp;quot;: &amp;quot;10.0.0.0&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;ether&amp;quot;
&amp;#125;
&amp;#125;,
&amp;quot;changed&amp;quot;: false
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;debug-模块&#34;&gt;&lt;a href=&#34;#debug-模块&#34; class=&#34;headerlink&#34; title=&#34;debug 模块&#34;&gt;&lt;/a&gt;debug 模块&lt;/h3&gt;&lt;p&gt;功能: 此模块可以用于输出信息,并且通过 msg 定制输出的信息内容,功能类似于echo命令&lt;br&gt;注意: msg后面的变量有时需要加 “ “ 引起来&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msg #指定命令输出的信息
var #指定变量名,和msg互斥
verbosity #详细度
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: debug 模块默认输出Hello world&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]#ansible 10.0.0.18 -m debug
10.0.0.18 | SUCCESS =&amp;gt; &amp;#123;
&amp;quot;msg&amp;quot;: &amp;quot;Hello world!&amp;quot;
&amp;#125;
[root@ansible ansible]#cat debug.yml
---
- hosts: websrvs
tasks:
- name: output Hello world
debug:
#默认没有指定msg,默认输出&amp;quot;Hello world!&amp;quot;
[root@ansible ansible]#ansible-playbook debug.yml
.....
TASK [output variables]
********************************************************************************
******************************
ok: [10.0.0.7] =&amp;gt; &amp;#123;
&amp;quot;msg&amp;quot;: &amp;quot;Hello world!&amp;quot;
&amp;#125;
ok: [10.0.0.8] =&amp;gt; &amp;#123;
&amp;quot;msg&amp;quot;: &amp;quot;Hello world!&amp;quot;
&amp;#125;
PLAY RECAP
********************************************************************************
*******************************************
10.0.0.7 : ok=2 changed=0 unreachable=0 failed=0
skipped=0 rescued=0 ignored=0
10.0.0.8 : ok=2 changed=0 unreachable=0 failed=0
skipped=0 rescued=0 ignored=0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 利用debug 模块输出变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos8 ~]#cat debug.yaml
---
- hosts: websrvs
tasks:
- name: output variables
debug:
msg: Host &amp;quot;&amp;#123;&amp;#123; ansible_nodename &amp;#125;&amp;#125;&amp;quot; Ip &amp;quot;&amp;#123;&amp;#123; ansible_default_ipv4.address
&amp;#125;&amp;#125;&amp;quot;
[root@centos8 ~]#ansible-playbook debug.yaml
PLAY [websrvs]
********************************************************************************
***************************************
TASK [Gathering Facts]
********************************************************************************
*******************************
ok: [10.0.0.7]
ok: [10.0.0.8]
TASK [output variables]
********************************************************************************
******************************
ok: [10.0.0.7] =&amp;gt; &amp;#123;
&amp;quot;msg&amp;quot;: &amp;quot;Host \&amp;quot;centos7.wangxiaochun.com\&amp;quot; Ip \&amp;quot;10.0.0.7\&amp;quot;&amp;quot;
&amp;#125;
ok: [10.0.0.8] =&amp;gt; &amp;#123;
&amp;quot;msg&amp;quot;: &amp;quot;Host \&amp;quot;centos8.wangxiaochun.com\&amp;quot; Ip \&amp;quot;10.0.0.8\&amp;quot;&amp;quot;
&amp;#125;
PLAY RECAP
********************************************************************************
*******************************************
10.0.0.7 : ok=2 changed=0 unreachable=0 failed=0
skipped=0 rescued=0 ignored=0
10.0.0.8 : ok=2 changed=0 unreachable=0 failed=0
skipped=0 rescued=0 ignored=0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 显示字符串特定字符&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat debug.yml
- hosts: all
  gather_facts: no
  vars:
    a: &amp;quot;12345&amp;quot;
  tasks:
  - debug:
    msg:
      - &amp;quot;&amp;#123;&amp;#123;a[0]&amp;#125;&amp;#125;&amp;quot;
      - &amp;quot;&amp;#123;&amp;#123;a[1]&amp;#125;&amp;#125;&amp;quot;
      - &amp;quot;&amp;#123;&amp;#123;a[2]&amp;#125;&amp;#125;&amp;quot;
#定义了一个字符串变量a，如果想要获取a字符串的第3个字符，则可以使用”a[2]”获取，索引从0开始，执行上例playbook，debug的输出信息如下：
TASK [debug] *************************
ok: [test1] =&amp;gt; &amp;#123;
&amp;quot;msg&amp;quot;: &amp;quot;1&amp;quot;
&amp;quot;msg&amp;quot;: &amp;quot;2&amp;quot;
&amp;quot;msg&amp;quot;: &amp;quot;3&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sysctl-模块&#34;&gt;&lt;a href=&#34;#sysctl-模块&#34; class=&#34;headerlink&#34; title=&#34;sysctl 模块&#34;&gt;&lt;/a&gt;sysctl 模块&lt;/h3&gt;&lt;p&gt;功能: 修改内核参数&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name #内核参数
value #指定值
state #是否保存在sysctl.conf文件中,默认present
sysctl_set #使用sysctl -w 验证值生效
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible websrvs -m sysctl -a &amp;#39;name=net.ipv4.ip_forward value=1 state=present&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 内核参数优化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: Change Port Range
  sysctl:
    name: net.ipv4.ip_local_port_range
    value: &amp;#39;1024 65000&amp;#39;
    sysctl_set: yes
- name: Enabled Forward
  sysctl:
    name: net.ipv4.ip_forward
    value: &amp;#39;1&amp;#39;
    sysctl_set: yes
- name: Enabled tcp_reuse
  sysctl:
    name: net.ipv4.tcp_tw_reuse
    value: &amp;#39;1&amp;#39;
    sysctl_set: yes
- name: Chanage tcp tw_buckets
  sysctl:
    name: net.ipv4.tcp_max_tw_buckets
    value: &amp;#39;5000&amp;#39;
    sysctl_set: yes
- name: Chanage tcp_syncookies
  sysctl:
    name: net.ipv4.tcp_syncookies
    value: &amp;#39;1&amp;#39;
    sysctl_set: yes
- name: Chanage tcp max_syn_backlog
  sysctl:
    name: net.ipv4.tcp_max_syn_backlog
    value: &amp;#39;8192&amp;#39;
    sysctl_set: yes
- name: Chanage tcp Established Maxconn
  sysctl:
    name: net.core.somaxconn
    value: &amp;#39;32768&amp;#39;
    sysctl_set: yes
    state: present
- name: Chanage tcp_syn_retries
  sysctl:
    name: net.ipv4.tcp_syn_retries
    value: &amp;#39;2&amp;#39;
    sysctl_set: yes
    state: present
- name: Chanage net.ipv4.tcp_synack_retries
  sysctl:
    name: net.ipv4.tcp_synack_retries
    value: &amp;#39;2&amp;#39;
    sysctl_set: yes
    state: presen
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pam-limits&#34;&gt;&lt;a href=&#34;#pam-limits&#34; class=&#34;headerlink&#34; title=&#34;pam_limits&#34;&gt;&lt;/a&gt;pam_limits&lt;/h3&gt;&lt;p&gt;功能: 管理资源限制&lt;br&gt;范例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: Change Limit /etc/security/limit.conf
  pam_limits:
  domain: &amp;quot;*&amp;quot;
    limit_type: &amp;quot;&amp;#123;&amp;#123; item.limit_type &amp;#125;&amp;#125;&amp;quot;
    limit_item: &amp;quot;&amp;#123;&amp;#123; item.limit_item &amp;#125;&amp;#125;&amp;quot;
    value: &amp;quot;&amp;#123;&amp;#123; item.value &amp;#125;&amp;#125;&amp;quot;
  loop:
    - &amp;#123; limit_type: &amp;#39;soft&amp;#39;, limit_item: &amp;#39;nofile&amp;#39;,value: &amp;#39;100000&amp;#39; &amp;#125;
    - &amp;#123; limit_type: &amp;#39;hard&amp;#39;, limit_item: &amp;#39;nofile&amp;#39;,value: &amp;#39;10000&amp;#39; &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;apt-repository-模块&#34;&gt;&lt;a href=&#34;#apt-repository-模块&#34; class=&#34;headerlink&#34; title=&#34;apt_repository 模块&#34;&gt;&lt;/a&gt;apt_repository 模块&lt;/h3&gt;&lt;p&gt;功能: 此模块实现apt的仓库配置管理&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;repo #仓库信息
state #添加或删除
update_cache #是否apt update,默认yes
filename #仓库文件,默认放在/etc/apt/sources.list.d/file.list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible ubuntu-servers -m apt_repository -a &amp;#39;repo=&amp;quot;deb
http://archive.canonical.com/ubuntu focal partner&amp;quot; filename=google-chrome&amp;#39;
[root@ubuntu2004 ~]#cat /etc/apt/sources.list.d/google-chrome.list
deb http://archive.canonical.com/ubuntu focal partner
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;apt-key-模块&#34;&gt;&lt;a href=&#34;#apt-key-模块&#34; class=&#34;headerlink&#34; title=&#34;apt_key 模块&#34;&gt;&lt;/a&gt;apt_key 模块&lt;/h3&gt;&lt;p&gt;功能: 添加和删除apt key&lt;br&gt;常见选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url #key路径
state #添加或删除
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 生成ceph仓库配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#先导入key,注意先后顺序
ansible ubuntu-servers -m apt_key -a
&amp;#39;url=https://download.ceph.com/keys/release.asc state=present&amp;#39;
#再生成apt配置,如果不导入key此步会出错
ansible ubuntu-servers -m apt_repository -a &amp;#39;repo=&amp;quot;deb
http://mirror.tuna.tsinghua.edu.cn/ceph/debian-pacific focal main&amp;quot;
filename=ansible_ceph&amp;#39;
#验证结果
[root@ubuntu2004 ~]#cat /etc/apt/sources.list.d/ansible_ceph.list
deb http://mirror.tuna.tsinghua.edu.cn/ceph/debian-pacific focal main
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;其它模块&#34;&gt;&lt;a href=&#34;#其它模块&#34; class=&#34;headerlink&#34; title=&#34;其它模块&#34;&gt;&lt;/a&gt;其它模块&lt;/h3&gt;&lt;p&gt;ansible 还提供了很多针对各种应用的模块,比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx_status_info
nginx_status_facts
mysql_db #需要安装MySQL-python包
mysql_user #需要安装MySQL-python包
redis
mongodb*
postgresql*
haproxy
git
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Docker/docker-compose%E9%83%A8%E7%BD%B2MySQL/</guid>
            <title>docker-compose部署MySql</title>
            <link>http://blog.itshare.work/Docker/docker-compose%E9%83%A8%E7%BD%B2MySQL/</link>
            <category term="Docker" scheme="http://blog.itshare.work/categories/Docker/" />
            <category term="Linux从入门到放弃" scheme="http://blog.itshare.work/tags/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/" />
            <pubDate>Fri, 06 Jan 2023 14:00:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;CentOS-Docker-安装&#34;&gt;&lt;a href=&#34;#CentOS-Docker-安装&#34; class=&#34;headerlink&#34; title=&#34;CentOS Docker 安装&#34;&gt;&lt;/a&gt;CentOS Docker 安装&lt;/h1&gt;&lt;p&gt;Docker 支持以下的 64 位 CentOS 版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS 7&lt;/li&gt;
&lt;li&gt;CentOS 8&lt;/li&gt;
&lt;li&gt;更高版本…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;官方安装脚本自动安装&#34;&gt;&lt;a href=&#34;#官方安装脚本自动安装&#34; class=&#34;headerlink&#34; title=&#34;官方安装脚本自动安装&#34;&gt;&lt;/a&gt;官方安装脚本自动安装&lt;/h2&gt;&lt;p&gt;安装命令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以使用国内 daocloud 一键安装命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;curl -sSL https://get.daocloud.io/docker | sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;安装docker-compose&#34;&gt;&lt;a href=&#34;#安装docker-compose&#34; class=&#34;headerlink&#34; title=&#34;安装docker-compose&#34;&gt;&lt;/a&gt;安装docker-compose&lt;/h1&gt;&lt;p&gt;Compose 简介&lt;br&gt;Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。&lt;br&gt;Compose 安装&lt;br&gt;Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3NlL3JlbGVhc2VzJUUzJTgwJTgy&#34;&gt;https://github.com/docker/compose/releases。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;运行以下命令以下载 Docker Compose 的当前稳定版本：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;curl -L &amp;quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要安装其他版本的 Compose，请替换 v2.2.2。&lt;/p&gt;
&lt;p&gt;Docker Compose 存放在 GitHub，不太稳定。&lt;/p&gt;
&lt;p&gt;你可以也通过执行下面的命令，高速安装 Docker Compose。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将可执行权限应用于二进制文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建软链：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试是否安装成功：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[root@centos7 ~]# docker-compose version
Docker Compose version v2.4.1
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;docker-compose一键部署mysql&#34;&gt;&lt;a href=&#34;#docker-compose一键部署mysql&#34; class=&#34;headerlink&#34; title=&#34;docker-compose一键部署mysql&#34;&gt;&lt;/a&gt;docker-compose一键部署mysql&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;创建安装目录,根据实际情况修改&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdr mysql
cd mysql
mkdir -p data/db
mkdir etc
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;编写docker-compose.yml&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd mysql
vim docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;docker-compose.yml内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;version: &amp;#39;3.1&amp;#39;
services:
  mysql:
    image: mysql:5.7 #mysql版本
    container_name: $&amp;#123;MYSQL_NAME&amp;#125;
    volumes:
      - ./data/db:/var/lib/mysql
      - ./etc/my.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
    restart: always
    ports:
      - $&amp;#123;MYSQL_PORT&amp;#125;:3306
    environment:
      MYSQL_ROOT_PASSWORD: $&amp;#123;MYSQL_ROOT_PASSWD&amp;#125; #访问密码
      secure_file_priv:
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建MySQL配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd mysql/etc
vim my.cnf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;my.cnf文件内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[mysqld]
character-set-server=utf8
log-bin=mysql-bin
server-id=1
pid-file        = /var/run/mysqld/mysqld.pid
socket          = /var/run/mysqld/mysqld.sock
datadir         = /var/lib/mysql
sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
symbolic-links=0
secure_file_priv =
wait_timeout=120
interactive_timeout=120
default-time_zone = &amp;#39;+8:00&amp;#39;
skip-external-locking
skip-name-resolve
open_files_limit = 10240
max_connections = 1000
max_connect_errors = 6000
table_open_cache = 800
max_allowed_packet = 40m
sort_buffer_size = 2M
join_buffer_size = 1M
thread_cache_size = 32
query_cache_size = 64M
transaction_isolation = READ-COMMITTED
tmp_table_size = 128M
max_heap_table_size = 128M
log-bin = mysql-bin
sync-binlog = 1
binlog_format = ROW
binlog_cache_size = 1M
key_buffer_size = 128M
read_buffer_size = 2M
read_rnd_buffer_size = 4M
bulk_insert_buffer_size = 64M
lower_case_table_names = 1
explicit_defaults_for_timestamp=true
skip_name_resolve = ON
event_scheduler = ON
log_bin_trust_function_creators = 1
innodb_buffer_pool_size = 512M
innodb_flush_log_at_trx_commit = 1
innodb_file_per_table = 1
innodb_log_buffer_size = 4M
innodb_log_file_size = 256M
innodb_max_dirty_pages_pct = 90
innodb_read_io_threads = 4
innodb_write_io_threads = 4
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;编写重启脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd mysql
vim restart.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;restart.sh文件内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#!/bin/bash
docker-compose stop
docker-compose rm -f
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;编写.env文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim .env

# 容器名称
MYSQL_NAME=docker-mysql
# 启用端口
MYSQL_PORT=3306
# root密码
MYSQL_ROOT_PASSWD=123456
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;验证&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;# 执行启动脚本
bash restart.sh

# 查看运行的容器
docker ps
CONTAINER ID   IMAGE                    COMMAND                  CREATED         STATUS         PORTS                                                  NAMES
36d09017f331   mysql:5.7                &amp;quot;docker-entrypoint.s…&amp;quot;   2 minutes ago   Up 2 minutes   0.0.0.0:3306-&amp;gt;3306/tcp, :::3306-&amp;gt;3306/tcp, 33060/tcp   docker-mysql
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Linux/centos%E7%B3%BB%E7%BB%9Fyum%E9%85%8D%E7%BD%AE/</guid>
            <title>Centos系统yum源配置</title>
            <link>http://blog.itshare.work/Linux/centos%E7%B3%BB%E7%BB%9Fyum%E9%85%8D%E7%BD%AE/</link>
            <category term="Linux" scheme="http://blog.itshare.work/categories/Linux/" />
            <category term="Linux从入门到放弃" scheme="http://blog.itshare.work/tags/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/" />
            <pubDate>Sat, 17 Dec 2022 09:28:09 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统&lt;br&gt;Centos7.9&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;步骤&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.备份&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@centos7-master ~]# mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.创建&amp;#x2F;etc&amp;#x2F;yum.repos.d&amp;#x2F;CentOS-Base.repo文件并复制如下内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[base]
name=CentOS-$releasever - Base
baseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/
        http://mirrors.aliyun.com/centos/$releasever/os/$basearch/
        http://mirrors.cloud.tencent.com/centos/$releasever/os/$basearch/
        http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/os/$basearch/
        http://mirrors.huaweicloud.com/centos/$releasever/os/$basearch/
        http://mirror.centos.org/centos/$releasever/os/$basearch/		
gpgcheck=0

#released updates 
[updates]
name=CentOS-$releasever - Updates
baseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/
        http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/
        http://mirrors.cloud.tencent.com/centos/$releasever/updates/$basearch/
        http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/updates/$basearch/
        http://mirrors.huaweicloud.com/centos/$releasever/updates/$basearch/
        http://mirror.centos.org/centos/$releasever/updates/$basearch/		
gpgcheck=0

#additional packages that may be useful
[extras]
name=CentOS-$releasever - Extras
baseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/
        http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/
        http://mirrors.cloud.tencent.com/centos/$releasever/extras/$basearch/
        http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/extras/$basearch/
        http://mirrors.huaweicloud.com/centos/$releasever/extras/$basearch/
        http://mirror.centos.org/centos/$releasever/extras/$basearch/
gpgcheck=0

#additional packages that extend functionality of existing packages
[centosplus]
name=CentOS-$releasever - Plus
baseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/
        http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/
        http://mirrors.cloud.tencent.com/centos/$releasever/centosplus/$basearch/
        http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/centosplus/$basearch/
        http://mirrors.huaweicloud.com/centos/$releasever/centosplus/$basearch/
        http://mirror.centos.org/centos/$releasever/centosplus/$basearch/
gpgcheck=0
enabled=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.清除缓存&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;yum clean all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.重新生成缓存&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;yum makecache
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/MySQL/MySQL%E9%9B%86%E7%BE%A4/</guid>
            <title>MySQL集群</title>
            <link>http://blog.itshare.work/MySQL/MySQL%E9%9B%86%E7%BE%A4/</link>
            <category term="MySQL" scheme="http://blog.itshare.work/categories/MySQL/" />
            <category term="MySQL基础" scheme="http://blog.itshare.work/tags/MySQL%E5%9F%BA%E7%A1%80/" />
            <pubDate>Wed, 23 Nov 2022 13:38:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;MySQL集群&#34;&gt;&lt;a href=&#34;#MySQL集群&#34; class=&#34;headerlink&#34; title=&#34;MySQL集群&#34;&gt;&lt;/a&gt;MySQL集群&lt;/h1&gt;&lt;h2 id=&#34;主从复制架构和原理&#34;&gt;&lt;a href=&#34;#主从复制架构和原理&#34; class=&#34;headerlink&#34; title=&#34;主从复制架构和原理&#34;&gt;&lt;/a&gt;主从复制架构和原理&lt;/h2&gt;&lt;h3 id=&#34;MySQL主从复制&#34;&gt;&lt;a href=&#34;#MySQL主从复制&#34; class=&#34;headerlink&#34; title=&#34;MySQL主从复制&#34;&gt;&lt;/a&gt;MySQL主从复制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;读写分离&lt;/li&gt;
&lt;li&gt;复制：每个节点都有相同的数据集，向外扩展，基于二进制日志的单向复制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复制的功用&#34;&gt;&lt;a href=&#34;#复制的功用&#34; class=&#34;headerlink&#34; title=&#34;复制的功用&#34;&gt;&lt;/a&gt;复制的功用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;负载均衡读操作&lt;/li&gt;
&lt;li&gt;备份&lt;/li&gt;
&lt;li&gt;高可用和故障切换&lt;/li&gt;
&lt;li&gt;数据分布&lt;/li&gt;
&lt;li&gt;MySQL升级&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复制架构&#34;&gt;&lt;a href=&#34;#复制架构&#34; class=&#34;headerlink&#34; title=&#34;复制架构&#34;&gt;&lt;/a&gt;复制架构&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;一主一从复制架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669185369127.png&#34; alt=&#34;1669185369127&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一主多从复制架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669185402487.png&#34; alt=&#34;1669185402487&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;主从复制原理&#34;&gt;&lt;a href=&#34;#主从复制原理&#34; class=&#34;headerlink&#34; title=&#34;主从复制原理&#34;&gt;&lt;/a&gt;主从复制原理&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669185434299.png&#34; alt=&#34;1669185434299&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;主从复制相关线程&#34;&gt;&lt;a href=&#34;#主从复制相关线程&#34; class=&#34;headerlink&#34; title=&#34;主从复制相关线程&#34;&gt;&lt;/a&gt;主从复制相关线程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主节点：&lt;br&gt;dump Thread：为每个Slave的I&amp;#x2F;O Thread启动一个dump线程，用于向其发送binary log events&lt;/li&gt;
&lt;li&gt;从节点：&lt;br&gt;I&amp;#x2F;O Thread：向Master请求二进制日志事件，并保存于中继日志中&lt;br&gt;SQL Thread：从中继日志中读取日志事件，在本地完成重放&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;跟复制功能相关的文件：&#34;&gt;&lt;a href=&#34;#跟复制功能相关的文件：&#34; class=&#34;headerlink&#34; title=&#34;跟复制功能相关的文件：&#34;&gt;&lt;/a&gt;跟复制功能相关的文件：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;master.info：用于保存slave连接至master时的相关信息，例如账号、密码、服务器地址等&lt;/li&gt;
&lt;li&gt;relay-log.info：保存在当前slave节点上已经复制的当前二进制日志和本地relay log日志的对应关&lt;br&gt;系&lt;/li&gt;
&lt;li&gt;mysql-relay-bin.00000#: 中继日志,保存从主节点复制过来的二进制日志,本质就是二进制日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;范例: 中继日志
MySQL8.0 取消 master.info 和 relay-log.info文件
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;实现主从复制配置&#34;&gt;&lt;a href=&#34;#实现主从复制配置&#34; class=&#34;headerlink&#34; title=&#34;实现主从复制配置&#34;&gt;&lt;/a&gt;实现主从复制配置&lt;/h3&gt;&lt;p&gt;官网参考&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/replication-configuration.html
https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html
https://dev.mysql.com/doc/refman/5.5/en/replication-configuration.html
https://mariadb.com/kb/en/library/setting-up-replication/
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;MySQL版本：5.7.38&lt;/li&gt;
&lt;li&gt;centos7.9&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;主节点配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）启用二进制日志&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;vim /etc/my.cnf
[mysqld]
log_bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(2)为当前节点设置一个全局唯一的ID号&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[mysqld]
server-id=#
log-basename=master #可选项，设置datadir中日志名称，确保不依赖主机名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;server-id的取值范围
1 to 4294967295 (&amp;gt;= MariaDB 10.2.2)，默认值为1，MySQL8.0默认值为1
0 to 4294967295 (&amp;lt;= MariaDB 10.2.1)，默认值为0，如果从节点为0，所有master都将拒绝此
slave的连接
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669215296538.png&#34; alt=&#34;1669215296538&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：修改配置文件后重启mysql服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（3）创建有复制权限的用户账号&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;#MySQL8.0 分成两步实现
# 创建用户
mysql&amp;gt; create user test@&amp;#39;192.168.179.165&amp;#39; identified by&amp;#39;123456&amp;#39;;
Query OK, 0 rows affected (0.02 sec)

mysql&amp;gt; 
# 赋予权限
mysql&amp;gt; grant replication slave on *.* to test@&amp;#39;192.168.179.165&amp;#39;;
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; 

#其他
mysql&amp;gt; GRANT REPLICATION SLAVE ON *.* TO &amp;#39;test&amp;#39;@&amp;#39;HOST&amp;#39; IDENTIFIED BY &amp;#39;123456&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(4)完全备份数据库&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@centos7 ~]# mysqldum -A -F --master-data=1 --single-transaction &amp;gt; /backup/all_`date +%F`.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@centos7 backup]# ll /backup/
total 1216
-rw-r--r-- 1 root root 1244691 Nov 23 23:07 all_2022-11-23.sql
[root@centos7 backup]# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;从节点配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1)修改从节点server-id,不能和主节点server-id一致&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[mysqld]
server-id=2
#或者使用如下配置
[mysqld]
server_id=# #为当前节点设置一个全局惟的ID号
log-bin
read_only=ON #设置数据库只读，针对supper user无效
relay_log=relay-log #relay log的文件路径，默认值hostname-relay-bin
relay_log_index=relay-log.index #默认值hostname-relay-bin.index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）使用有复制权限的用户账号连接至主服务器，并启动复制线程&lt;/p&gt;
&lt;p&gt;从节点导入主节点完全备份的数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;# 关闭二进制日志
mysql&amp;gt; set sql_log_bin=0;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; 

# 还原备份
mysql&amp;gt; source all_2022-11-23.sql;

# 开启二进制日志
mysql&amp;gt; set sql_log_bin=1;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; 
# 开启线程
mysql&amp;gt; start slave;
Query OK, 0 rows affected, 1 warning (0.03 sec)

mysql&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mysql客户端命令行执行如下内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;CHANGE MASTER TO MASTER_HOST=&amp;#39;192.168.179.170&amp;#39;, MASTER_USER=&amp;#39;test&amp;#39;,MASTER_PASSWORD=&amp;#39;123456&amp;#39;,MASTER_LOG_FILE=&amp;#39;mysql-bin.000007&amp;#39;, MASTER_LOG_POS=154;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MASTER_LOG_FILE&amp;#x3D;’mysql-bin.000007’, MASTER_LOG_POS&amp;#x3D;154;的值可以从备份sql文件中找到，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669262500961.png&#34; alt=&#34;1669262500961&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后启动复制线程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;start slave
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;扩展：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;show slave status\G  # 查看相关状态信息
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669262596413.png&#34; alt=&#34;1669262596413&#34;&gt;&lt;/p&gt;
&lt;p&gt;从节点更换主节点&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;&amp;gt;mysql stop slave;  #停止复制线程

&amp;gt;mysql reset slave all;   # 清除信息 

再次使用有复制权限的用户账号连接至主服务器，并启动复制线程
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;级联复制&#34;&gt;&lt;a href=&#34;#级联复制&#34; class=&#34;headerlink&#34; title=&#34;级联复制&#34;&gt;&lt;/a&gt;级联复制&lt;/h3&gt;&lt;p&gt;案例：三台主机实现级联复制&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669306551265.png&#34; alt=&#34;1669306551265&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 192.168.179.170充当master
# 192.168.179.171充当slave1
# 192.168.179.157充当slave2
# 操作系统：centos7.9
#MySQL版本：5.7.38
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在master上实现，即192.168.179.170&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;# 在master上实现，即192.168.179.170
vim /etc/my.cnf
[mysqld]
server-id=170
log-bin=/data/mysql/mysql-bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669342445575.png&#34; alt=&#34;1669342445575&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重启服务&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@centos7 ~]# systemctl restart mysql
[root@centos7 ~]# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;创建具有复制权限的账号&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; grant replication slave on *.* to &amp;#39;test&amp;#39;@&amp;#39;192.168.179.%&amp;#39; identified by &amp;#39;123456&amp;#39;;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;完全备份&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;[root@centos7 ~]# mysqldump  -uroot -p123456 -A -F --single-transaction --master-data=1 &amp;gt; /data/all.sql;

[root@centos7 ~]# scp /data/all.sql root@192.168.179.171:/data
[root@centos7 ~]# scp /data/all.sql root@192.168.179.157:/data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在中间级联实现&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;#在中间级联实现,即192.168.179.171
#修改配置文件
vim /etc/my.cnf
[mysqld]
server-id=171
log-bin=/data/mysql/slave1-bin
read-only
log_slave_updates #级联复制中间节点的必选项,MySQL8.0此为默认值,可以不要人为添加

#重启mysql
service mysqld restart或者systemctl restart mysql

# 还原数据库
vim /data/all.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669343598599.png&#34; alt=&#34;1669343598599&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;mysql&amp;gt; set sql_log_bin=0;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; 
mysql&amp;gt; source /data/all.sql;

mysql&amp;gt; show master logs;
+-------------------+-----------+
| Log_name          | File_size |
+-------------------+-----------+
| slave1-bin.000001 |       801 |
| slave1-bin.000002 |       458 |
+-------------------+-----------+
2 rows in set (0.01 sec)

mysql&amp;gt; 


mysql&amp;gt; set sql_log_bin=1;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; 

mysql&amp;gt; start slave;
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在第三个节点slave上实现&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/my.cnf
[mysqld]
server-id=157
log-bin=/data/mysql/slave2-bin

# 还原数据库
vim /data/all.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669346692481.png&#34; alt=&#34;1669346692481&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; set sql_log_bin=0;
mysql&amp;gt; source /data/all.sql
mysql&amp;gt; set sql_log_bin=1;
mysql&amp;gt; start slave;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;半同步复制&#34;&gt;&lt;a href=&#34;#半同步复制&#34; class=&#34;headerlink&#34; title=&#34;半同步复制&#34;&gt;&lt;/a&gt;半同步复制&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669367459560.png&#34; alt=&#34;1669367459560&#34;&gt;&lt;/p&gt;
&lt;p&gt;范例：centos7.9在MySQL5.7.38实现半同步复制&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 主服务器配置，安装semisync_slave.so插件
mysql&amp;gt; INSTALL PLUGIN rpl_semi_sync_master SONAME &amp;#39;semisync_master.so&amp;#39;;
Query OK, 0 rows affected (0.05 sec)

mysql&amp;gt; 
# 修改配置文件
vim /etc/my.cnf
rpl_semi_sync_master_enabled=ON 
#修改此行,需要先安装semisync_master.so插件后,再重启,否则无法启动
rpl_semi_sync_master_timeout=3000 
#设置3s内无法同步，也将返回成功信息给客户端 

# 重启服务
systemctl restart mysql

#slave服务器配置
#安装semisync_slave.so插件
mysql&amp;gt; INSTALL PLUGIN rpl_semi_sync_master SONAME &amp;#39;semisync_master.so&amp;#39;;
Query OK, 0 rows affected (0.05 sec)

#注意:如果已经实现主从复制,需要stop slave;start slave;
mysql&amp;gt; stop slave;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; start slave
    -&amp;gt; ;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; 

# 重启mysql服务
systemctl restart mysql

# 修改配置文件
vim /etc/my.cnf
rpl_semi_sync_slave_enabled=ON

# 重启mysql服务
systemctl restart mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试半同步&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 停止从库slave1
[root@centos7 ~]# systemctl stop mysql
# 主库创建表
mysql&amp;gt; create database hellodb;
Query OK, 1 row affected (3.00 sec)

mysql&amp;gt; 
# 设置的是三秒内无法同步返回成功，所以看到是3S后返回成功
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;实战案例：利用Mycat实现MySQL的读写分离&#34;&gt;&lt;a href=&#34;#实战案例：利用Mycat实现MySQL的读写分离&#34; class=&#34;headerlink&#34; title=&#34;实战案例：利用Mycat实现MySQL的读写分离&#34;&gt;&lt;/a&gt;实战案例：利用Mycat实现MySQL的读写分离&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669456007835.png&#34; alt=&#34;1669456007835&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有主机系统环境&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;centos7.9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;服务器三台&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mycat-server 192.168.179.157 #内存建议2G以上
mysql-master 192.168.179.170 MySQL 5.7
mysql-slave  192.168.179.171 MySQL 5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;关闭SELinux和防火墙&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl stop firewalld
setenforce 0
时间同步
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669455589146.png&#34; alt=&#34;1669455589146&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：主从复制的过程省略，参考实现主从复制过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代理服务器上安装Mycat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载地址:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL015Q0FUQXBhY2hlL015Y2F0LVNlcnZlci9yZWxlYXNlcy90YWcvTXljYXQtc2VydmVyLTEuNi43LjQtcmVsZWFzZQ==&#34;&gt;https://github.com/MyCATApache/Mycat-Server/releases/tag/Mycat-server-1.6.7.4-release&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 安装jdk
[root@centos7 ~]# yum install -y java

# 验证
[root@centos7 ~]# java -version
openjdk version &amp;quot;1.8.0_352&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_352-b08)
OpenJDK 64-Bit Server VM (build 25.352-b08, mixed mode)
[root@centos7 ~]# 

[root@centos7 ~]# mkdir /apps

[root@centos7 ~]# tar xf Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz -C /apps/
[root@centos7 ~]# 

#配置环境变量
[root@centos7 ~]# echo &amp;#39;PATH=/apps/mycat/bin:$PATH&amp;#39; &amp;gt; /etc/profile.d/mycat.sh
[root@centos7 ~]# source /etc/profile.d/mycat.sh

#注意: 此步启动较慢,需要等一会儿,另外如果内存太小,会导致无法启动
[root@centos7 ~]# mycat start
Starting Mycat-server...
[root@centos7 ~]# 

# 查看日志是否启动成功
[root@centos7 ~]# tail -f /apps/mycat/logs/wrapper.log 
STATUS | wrapper  | 2022/11/26 23:27:52 | --&amp;gt; Wrapper Started as Daemon
STATUS | wrapper  | 2022/11/26 23:27:52 | Launching a JVM...
INFO   | jvm 1    | 2022/11/26 23:28:08 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org
INFO   | jvm 1    | 2022/11/26 23:28:08 |   Copyright 1999-2006 Tanuki Software, Inc.  All Rights Reserved.
INFO   | jvm 1    | 2022/11/26 23:28:08 | 
INFO   | jvm 1    | 2022/11/26 23:28:10 | MyCAT Server startup successfully. see logs in logs/mycat.log

#用默认密码123456来连接mycat
[root@centos7 ~]# mysql -uroot -p123456 -h 192.168.179.157 -P8066
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.6.29-mycat-1.6.7.4-release-20200105164103 MyCat Server (OpenCloudDB)

Copyright (c) 2000, 2022, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &amp;#39;help;&amp;#39; or &amp;#39;\h&amp;#39; for help. Type &amp;#39;\c&amp;#39; to clear the current input statement.

mysql&amp;gt; show databases;
+----------+
| DATABASE |
+----------+
| TESTDB   |
+----------+
1 row in set (0.00 sec)

mysql&amp;gt; 

# 在主节点上创建账号用于mycat数据读写分离
mysql&amp;gt;create user admin@&amp;#39;192.168.179.%&amp;#39; identified by&amp;#39;123456&amp;#39;;

# 赋予权限
mysql&amp;gt; grant all on *.* to &amp;#39;admin&amp;#39;@&amp;#39;192.168.179.%&amp;#39; IDENTIFIED BY &amp;#39;123456&amp;#39;;
Query OK, 0 rows affected, 1 warning (0.01 sec)

# 刷新
# mysql&amp;gt; flush privileges;
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;修改schema.xml实现读写分离策略&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE mycat:schema SYSTEM &amp;quot;schema.dtd&amp;quot;&amp;gt;
&amp;lt;mycat:schema xmlns:mycat=&amp;quot;http://io.mycat/&amp;quot;&amp;gt;
    &amp;lt;schema name=&amp;quot;TESTDB&amp;quot; checkSQLschema=&amp;quot;false&amp;quot; sqlMaxLimit=&amp;quot;100&amp;quot; dataNode=&amp;quot;dn1&amp;quot;&amp;gt;
    &amp;lt;/schema&amp;gt;
    &amp;lt;dataNode name=&amp;quot;dn1&amp;quot; dataHost=&amp;quot;localhost1&amp;quot; database=&amp;quot;reggie&amp;quot; /&amp;gt;
    &amp;lt;dataHost name=&amp;quot;localhost1&amp;quot; maxCon=&amp;quot;1000&amp;quot; minCon=&amp;quot;10&amp;quot; balance=&amp;quot;1&amp;quot;
              writeType=&amp;quot;0&amp;quot; dbType=&amp;quot;mysql&amp;quot; dbDriver=&amp;quot;native&amp;quot; switchType=&amp;quot;1&amp;quot;  slaveThreshold=&amp;quot;100&amp;quot;&amp;gt;
        &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
        &amp;lt;writeHost host=&amp;quot;host1&amp;quot; url=&amp;quot;192.168.179.170:3306&amp;quot; user=&amp;quot;admin&amp;quot;
                   password=&amp;quot;123456&amp;quot;&amp;gt;
         &amp;lt;readHost host=&amp;quot;host2&amp;quot; url=&amp;quot;192.168.179.171:3306&amp;quot; user=&amp;quot;admin&amp;quot; password=&amp;quot;123456&amp;quot; /&amp;gt;
        &amp;lt;/writeHost&amp;gt;
    &amp;lt;/dataHost&amp;gt;
&amp;lt;/mycat:schema&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669482336285.png&#34; alt=&#34;1669482336285&#34;&gt;&lt;/p&gt;
&lt;p&gt;重启mycat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[root@centos7 ~]# mycat restart
Stopping Mycat-server...
Stopped Mycat-server.
Starting Mycat-server...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在Mycat服务器上连接并测试&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[root@centos8 ~]# mysql -uroot -p123456 -h 192.168.179.157 -P8066
mysql&amp;gt; show databases;
+----------+
| DATABASE |
+----------+
| TESTDB   |   //只能看一个虚拟数据库,数据库内容映射的是reggie内容
+----------+
1 row in set (0.00 sec)

mysql&amp;gt; 

mysql&amp;gt; use TESTDB;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&amp;gt; show tables;
+------------------+
| Tables_in_reggie |
+------------------+
| address_book     |
| category         |
| dish             |
| dish_flavor      |
| employee         |
| order_detail     |
| orders           |
| setmeal          |
| setmeal_dish     |
| shopping_cart    |
| user             |
+------------------+
11 rows in set (0.01 sec)

mysql&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;MHA实战案例&#34;&gt;&lt;a href=&#34;#MHA实战案例&#34; class=&#34;headerlink&#34; title=&#34;MHA实战案例&#34;&gt;&lt;/a&gt;MHA实战案例&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1669541563329.png&#34; alt=&#34;1669541563329&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主从复制搭建过程省略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在所有MySQL服务器上安装mha4mysql-node包&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;下载地址
mha4mysql-manager
mha4mysql-node
#下载
https://github.com/yoshinorim/mha4mysql-manager/wiki/Downloads
https://github.com/yoshinorim/mha4mysql-node/releases/tag/v0.58
https://github.com/yoshinorim/mha4mysql-node/releases/tag/v0.58

yum -y install mha4mysql-node-0.58-0.el7.centos.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在管理节点上安装两个包mha4mysql-manager和mha4mysql-node&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[root@mha-manager ~]#yum -y install mha4mysql-manager-0.58-
0.el7.centos.noarch.rpm
[root@mha-manager ~]#yum -y install mha4mysql-node-0.58-0.el7.centos.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在所有节点实现相互之间ssh key验证&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos7 ~]# ssh-keygen 
[root@centos7 ~]# ssh-copy-id 127.0.0.1
[root@centos7 ~]# scp -r .ssh 192.168.179.170:/root/
[root@centos7 ~]# scp -r .ssh 192.168.179.171:/root/
[root@centos7 ~]# scp -r .ssh 192.168.179.157:/root/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在管理节点创建配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos7 ~]# mkdir /etc//mastermha/
[root@centos7 ~]# vim app1.cnf
# 文件内容
[server default]
user=mhauser #用于远程连接MySQL所有节点的用户,需要有管理员的权限
password=123456
manager_workdir=/data/mastermha/app1/ #目录会自动生成,无需手动创建
manager_log=/data/mastermha/app1/manager.log
remote_workdir=/data/mastermha/app1/
ssh_user=root #用于实现远程ssh基于KEY的连接,访问二进制日志
repl_user=test #主从复制的用户信息
repl_password=123456
ping_interval=1 #健康性检查的时间间隔
master_ip_failover_script=/usr/local/bin/master_ip_failover #切换VIP的perl脚本,不
支持跨网络,也可用Keepalived实现
report_script=/usr/local/bin/sendmail.sh #当执行报警脚本
check_repl_delay=0 #默认值为1,表示如果slave中从库落后主库relay log超过100M，主库不会选
择这个从库为新的master，因为这个从库进行恢复需要很长的时间.通过设置参数check_repl_delay=0，
mha触发主从切换时会忽略复制的延时，对于设置candidate_master=1的从库非常有用，这样确保这个从库
一定能成为最新的master
master_binlog_dir=/data/mysql/ #指定二进制日志存放的目录,mha4mysql-manager-0.58必须指
定,之前版本不需要指定
[server1]
hostname=192.168.179.170
port=3306
candidate_master=1
[server2]
hostname=192.168.179.171
port=3306
candidate_master=1 #设置为优先候选master，即使不是集群中事件最新的slave,也会优先当
master
[server3]
hostname=192.168.179.157
port=3306
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最终文件内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[server default]
user=mhauser
password=123456
manager_workdir=/data/mastermha/app1/
manager_log=/data/mastermha/app1/manager.log
remote_workdir=/data/mastermha/app1/
ssh_user=root
repl_user=test
repl_password=123456
ping_interval=1
master_ip_failover_script=/usr/local/bin/master_ip_failover
report_script=/usr/local/bin/sendmail.sh # 发送邮件脚本
check_repl_delay=0
master_binlog_dir=/data/mysql/

[server1]
hostname=192.168.179.170
candidate_master=1
[server2]
hostname=192.168.179.171
[server3]
hostname=192.168.179.157
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主节点创建账号user&amp;#x3D;mhauser #用于远程连接MySQL所有节点的用户,需要有管理员的权限&lt;br&gt;password&amp;#x3D;123456&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; create user mhauser@&amp;#39;192.168.179.%&amp;#39; identified by &amp;#39;123456&amp;#39;;
Query OK, 0 rows affected (0.05 sec)

mysql&amp;gt; 

mysql&amp;gt; grant all on *.* to mhauser@&amp;#39;192.168.179.%&amp;#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;master_ip_failover_script&amp;#x3D;&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;master_ip_failover文件内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl

#  Copyright (C) 2011 DeNA Co.,Ltd.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#  Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

## Note: This is a sample script and is not complete. Modify the script based on your environment.

use strict;
use warnings FATAL =&amp;gt; &amp;#39;all&amp;#39;;

use Getopt::Long;
use MHA::DBHelper;

my (
  $command,        $ssh_user,         $orig_master_host,
  $orig_master_ip, $orig_master_port, $new_master_host,
  $new_master_ip,  $new_master_port,  $new_master_user,
  $new_master_password
);
my $vip = &amp;#39;192.168.179.157/24&amp;#39;;
my $key = &amp;quot;1&amp;quot;;
my $ssh_start_vip = &amp;quot;/sbin/ifconfig eth0:$key $vip&amp;quot;;
my $ssh_stop_vip = &amp;quot;/sbin/ifconfig eth0:$key down&amp;quot;;

GetOptions(
  &amp;#39;command=s&amp;#39;             =&amp;gt; \$command,
  &amp;#39;ssh_user=s&amp;#39;            =&amp;gt; \$ssh_user,
  &amp;#39;orig_master_host=s&amp;#39;    =&amp;gt; \$orig_master_host,
  &amp;#39;orig_master_ip=s&amp;#39;      =&amp;gt; \$orig_master_ip,
  &amp;#39;orig_master_port=i&amp;#39;    =&amp;gt; \$orig_master_port,
  &amp;#39;new_master_host=s&amp;#39;     =&amp;gt; \$new_master_host,
  &amp;#39;new_master_ip=s&amp;#39;       =&amp;gt; \$new_master_ip,
  &amp;#39;new_master_port=i&amp;#39;     =&amp;gt; \$new_master_port,
  &amp;#39;new_master_user=s&amp;#39;     =&amp;gt; \$new_master_user,
  &amp;#39;new_master_password=s&amp;#39; =&amp;gt; \$new_master_password,
);

exit &amp;amp;main();

sub main &amp;#123;
  if ( $command eq &amp;quot;stop&amp;quot; || $command eq &amp;quot;stopssh&amp;quot; ) &amp;#123;

    # $orig_master_host, $orig_master_ip, $orig_master_port are passed.
    # If you manage master ip address at global catalog database,
    # invalidate orig_master_ip here.
    my $exit_code = 1;
    eval &amp;#123;

      # updating global catalog, etc
      $exit_code = 0;
    &amp;#125;;
    if ($@) &amp;#123;
      warn &amp;quot;Got Error: $@\n&amp;quot;;
      exit $exit_code;
    &amp;#125;
    exit $exit_code;
  &amp;#125;
    elsif ( $command eq &amp;quot;start&amp;quot; ) &amp;#123;

        # all arguments are passed.
        # If you manage master ip address at global catalog database,
        # activate new_master_ip here.
        # You can also grant write access (create user, set read_only=0, etc) here.
        my $exit_code = 10;
        eval &amp;#123;
            print &amp;quot;Enabling the VIP - $vip on the new master - $new_master_host \n&amp;quot;;
            &amp;amp;start_vip();
            &amp;amp;stop_vip();
            $exit_code = 0;
        &amp;#125;;
        if ($@) &amp;#123;
            warn $@;
            exit $exit_code;
        &amp;#125;
        exit $exit_code;
    &amp;#125;
    elsif ( $command eq &amp;quot;status&amp;quot; ) &amp;#123;
        print &amp;quot;Checking the Status of the script.. OK \n&amp;quot;;
        `ssh $ssh_user\@$orig_master_host \&amp;quot; $ssh_start_vip \&amp;quot;`;
        exit 0;
    &amp;#125;
    else &amp;#123;
        &amp;amp;usage();
        exit 1;
    &amp;#125;
&amp;#125;


sub start_vip() &amp;#123;
    `ssh $ssh_user\@$new_master_host \&amp;quot; $ssh_start_vip \&amp;quot;`;
&amp;#125;
# A simple system call that disable the VIP on the old_master 
sub stop_vip() &amp;#123;
   `ssh $ssh_user\@$orig_master_host \&amp;quot; $ssh_stop_vip \&amp;quot;`;
&amp;#125;


sub usage &amp;#123;
  print
&amp;quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;master修改mysql配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[mysqld]
server_id=170
log-bin=/data/mysql/mysql-bin
skip_name_resolve=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;slave节点上修改&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[mysqld]
server_id=171 #不同节点此值各不相同
log-bin=/data/mysql/mysql-bin
read_only
relay_log_purge=0
skip_name_resolve=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检查环境&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;\&#34;&gt;masterha_check_ssh --conf=/etc/mastermha/app1.cnf
# 范例
[root@centos7 ~]# masterha_check_ssh --conf=/etc/mastermha/app1.cnf
Tue Nov 29 22:21:44 2022 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Tue Nov 29 22:21:44 2022 - [info] Reading application default configuration from /etc/mastermha/app1.cnf..
Tue Nov 29 22:21:44 2022 - [info] Reading server configuration from /etc/mastermha/app1.cnf..
Tue Nov 29 22:21:44 2022 - [info] Starting SSH connection tests..
Tue Nov 29 22:21:45 2022 - [debug] 
Tue Nov 29 22:21:44 2022 - [debug]  Connecting via SSH from root@192.168.179.170(192.168.179.170:22) to root@192.168.179.171(192.168.179.171:22)..
Tue Nov 29 22:21:44 2022 - [debug]   ok.
Tue Nov 29 22:21:44 2022 - [debug]  Connecting via SSH from root@192.168.179.170(192.168.179.170:22) to root@192.168.179.157(192.168.179.157:22)..
Tue Nov 29 22:21:45 2022 - [debug]   ok.
Tue Nov 29 22:21:46 2022 - [debug] 
Tue Nov 29 22:21:45 2022 - [debug]  Connecting via SSH from root@192.168.179.171(192.168.179.171:22) to root@192.168.179.170(192.168.179.170:22)..
Tue Nov 29 22:21:45 2022 - [debug]   ok.
Tue Nov 29 22:21:45 2022 - [debug]  Connecting via SSH from root@192.168.179.171(192.168.179.171:22) to root@192.168.179.157(192.168.179.157:22)..
Tue Nov 29 22:21:45 2022 - [debug]   ok.
Tue Nov 29 22:21:47 2022 - [debug] 
Tue Nov 29 22:21:45 2022 - [debug]  Connecting via SSH from root@192.168.179.157(192.168.179.157:22) to root@192.168.179.170(192.168.179.170:22)..
Tue Nov 29 22:21:45 2022 - [debug]   ok.
Tue Nov 29 22:21:45 2022 - [debug]  Connecting via SSH from root@192.168.179.157(192.168.179.157:22) to root@192.168.179.171(192.168.179.171:22)..
Tue Nov 29 22:21:46 2022 - [debug]   ok.
Tue Nov 29 22:21:47 2022 - [info] All SSH connection tests passed successfully.
[root@centos7 ~]# 

masterha_check_repl --conf=/etc/mastermha/app1.cnf
# 范例
[root@centos7 ~]# masterha_check_repl --conf=/etc/mastermha/app1.cnf
......
......
ter_host=192.168.179.170 --orig_master_ip=192.168.179.170 --orig_master_port=3306 
Checking the Status of the script.. OK 
bash: /sbin/ifconfig: No such file or directory
Tue Nov 29 22:45:13 2022 - [info]  OK.
Tue Nov 29 22:45:13 2022 - [warning] shutdown_script is not defined.
Tue Nov 29 22:45:13 2022 - [info] Got exit code 0 (Not master dead).

MySQL Replication Health is OK.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;masterha_check_status --conf=/etc/mastermha/app1.cnf
app1 is stopped(2:NOT_RUNNING).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动和停止mha&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 后台运行
nohup masterha_manager --conf=/etc/mastermha/app1.cnf --remove_dead_master_conf
--ignore_last_failover &amp;amp;&amp;gt; /dev/null
# 前台运行
masterha_manager --conf=/etc/mastermha/app1.cnf --
remove_dead_master_conf --ignore_last_failover
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#如果想停止后台执行的MHA,可以执行下面命令
[root@mha-master ~]#masterha_stop --conf=/etc/mastermha/app1.cnf
Stopped app1 successfully.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos7 app1]# masterha_check_status --conf=/etc/mastermha/app1.cnf
app1 (pid:48280) is running(0:PING_OK), master:192.168.179.170
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/MySQL/MySQL/</guid>
            <title>MySQL数据库基础和安装使用</title>
            <link>http://blog.itshare.work/MySQL/MySQL/</link>
            <category term="MySQL" scheme="http://blog.itshare.work/categories/MySQL/" />
            <category term="MySQL基础" scheme="http://blog.itshare.work/tags/MySQL%E5%9F%BA%E7%A1%80/" />
            <pubDate>Wed, 28 Sep 2022 22:42:41 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;MySQL的特性&#34;&gt;&lt;a href=&#34;#MySQL的特性&#34; class=&#34;headerlink&#34; title=&#34;MySQL的特性&#34;&gt;&lt;/a&gt;MySQL的特性&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1668695639684.png&#34; alt=&#34;1668695639684&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;MySQL安装&#34;&gt;&lt;a href=&#34;#MySQL安装&#34; class=&#34;headerlink&#34; title=&#34;MySQL安装&#34;&gt;&lt;/a&gt;MySQL安装&lt;/h1&gt;&lt;h2 id=&#34;安装方式介绍&#34;&gt;&lt;a href=&#34;#安装方式介绍&#34; class=&#34;headerlink&#34; title=&#34;安装方式介绍&#34;&gt;&lt;/a&gt;安装方式介绍&lt;/h2&gt;&lt;p&gt;程序包管理器管理的程序包&lt;br&gt;源代码编译安装&lt;br&gt;二进制格式的程序包：展开至特定路径，并经过简单配置后即可使用&lt;/p&gt;
&lt;h3 id=&#34;rpm安装&#34;&gt;&lt;a href=&#34;#rpm安装&#34; class=&#34;headerlink&#34; title=&#34;rpm安装&#34;&gt;&lt;/a&gt;rpm安装&lt;/h3&gt;&lt;p&gt;CentOS 安装光盘&lt;br&gt;项目官方：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb3dubG9hZHMubWFyaWFkYi5vcmcvbWFyaWFkYi9yZXBvc2l0b3JpZXMv&#34;&gt;https://downloads.mariadb.org/mariadb/repositories/&lt;/span&gt;&lt;br&gt;国内镜像：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL21hcmlhZGIveXVtLw==&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/mariadb/yum/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL215c3FsL3l1bS8=&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;范例1：CentOS 7 利用yum源安装MySQL8.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9yZXBvL3l1bS8=&#34;&gt;MySQL官网&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网下载rpm包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;img data-src=&#34;/../image.assets/1664415600826.png&#34; alt=&#34;1664415600826&#34;&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用rz命令将rpm包上传到主机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;扩展：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;rz命令yum安装:yum install lrzsz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;img data-src=&#34;/../image.assets/1664415914209.png&#34; alt=&#34;1664415914209&#34;&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装rpm包&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;root@centos7[~]-&amp;gt;yum install mysql80-community-release-el7-7.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;安装MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;root@centos7[~]-&amp;gt;yum install -y mysql-community-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范例2：CentOS 7 利用yum源安装MySQL5.7&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;[root@centos7 ~]#tee /etc/yum.repos.d/mysql.repo &amp;lt;&amp;lt;EOF
[mysql]
name=mysql5.7
baseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.7-community-el7-
x86_64/
gpgcheck=0
EOF
[root@centos7 ~]#yum -y install mysql-community-server
[root@centos7 ~]#systemctl enable --now mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;二进制安装&#34;&gt;&lt;a href=&#34;#二进制安装&#34; class=&#34;headerlink&#34; title=&#34;二进制安装&#34;&gt;&lt;/a&gt;二进制安装&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统：rocky8.5&lt;/p&gt;
&lt;p&gt;MySQL版本：mysql-8.0.28-linux-glibc2.12-x86_64.tar.xz  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装相关包&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;yum -y install libaio numactl-libs
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;准备用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;groupadd mysql
useradd -r -g mysql -s /bin/false mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;下载二进制程序包&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;# -P下载到指定目录
wget https://cdn.mysql.com/archives/mysql-8.0/mysql-8.0.28-linux-glibc2.12-x86_64.tar.xz -P /usr/local/  

 ln -s mysql-8.0.28-linux-glibc2.12-x86_64 mysql
 
 chown -R root.root /usr/local/mysql/
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;准备环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;echo &amp;#39;PATH=/usr/local/mysql/bin:$PATH&amp;#39; &amp;gt; /etc/profile.d/mysql.sh
. /etc/profile.d/mysql.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;准备配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;vim /etc/my.cnf
[mysqld]
datadir=/data/mysql
skip_name_resolve=1
socket=/data/mysql/mysql.sock
log-error=/data/mysql/mysql.log
pid-file=/data/mysql/mysql.pid
[client]
socket=/data/mysql/mysql.sock
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;初始化数据库文件并提取root密码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;mkdir -pv /data/mysql
grep password /data/mysql/mysql.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成随机密码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;mysqld --initialize --user=mysql --datadir=/data/mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成空密码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;mysqld --initialize-insecure --user=mysql --datadir=/data/mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;准备服务脚本和启动&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;[root@rocky local]# cp /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld

chkconfig --add mysqld
# 启动服务
service mysqld start
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;修改口令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;# 修改随机密码为指定密码
mysqladmin -uroot -p&amp;#39;9ATjCOB(jIef&amp;#39; password 123456

#修改前面生成的空密码为指定密码
mysqladmin -uroot password 123456
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;测试登录&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;mysql -uroot -p&amp;#39;123456&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：登录mysql报如下信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;mysql: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;ln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;登录成功：&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/../image.assets/1664459241867.png&#34; alt=&#34;1664459241867&#34;&gt; &lt;/p&gt;
&lt;h3 id=&#34;源码编译安装&#34;&gt;&lt;a href=&#34;#源码编译安装&#34; class=&#34;headerlink&#34; title=&#34;源码编译安装&#34;&gt;&lt;/a&gt;源码编译安装&lt;/h3&gt;&lt;h1 id=&#34;MySQL多实例&#34;&gt;&lt;a href=&#34;#MySQL多实例&#34; class=&#34;headerlink&#34; title=&#34;MySQL多实例&#34;&gt;&lt;/a&gt;MySQL多实例&lt;/h1&gt;&lt;h1 id=&#34;SQL语言&#34;&gt;&lt;a href=&#34;#SQL语言&#34; class=&#34;headerlink&#34; title=&#34;SQL语言&#34;&gt;&lt;/a&gt;SQL语言&lt;/h1&gt;&lt;h2 id=&#34;SQL语言的兴起与语法标准&#34;&gt;&lt;a href=&#34;#SQL语言的兴起与语法标准&#34; class=&#34;headerlink&#34; title=&#34;SQL语言的兴起与语法标准&#34;&gt;&lt;/a&gt;SQL语言的兴起与语法标准&lt;/h2&gt;&lt;h3 id=&#34;SQL语句分类&#34;&gt;&lt;a href=&#34;#SQL语句分类&#34; class=&#34;headerlink&#34; title=&#34;SQL语句分类&#34;&gt;&lt;/a&gt;SQL语句分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DDL: Data Defination Language 数据定义语言&lt;br&gt;CREATE，DROP，ALTER&lt;/li&gt;
&lt;li&gt;DML: Data Manipulation Language 数据操纵语言&lt;br&gt;INSERT，DELETE，UPDATE&lt;br&gt;软件开发：CRUD&lt;/li&gt;
&lt;li&gt;DQL：Data Query Language 数据查询语言&lt;br&gt;SELECT&lt;/li&gt;
&lt;li&gt;DCL：Data Control Language 数据控制语言&lt;br&gt;GRANT，REVOKE&lt;/li&gt;
&lt;li&gt;TCL：Transaction Control Language 事务控制语言&lt;br&gt;COMMIT，ROLLBACK，SAVEPOINT&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字符集和排序&#34;&gt;&lt;a href=&#34;#字符集和排序&#34; class=&#34;headerlink&#34; title=&#34;字符集和排序&#34;&gt;&lt;/a&gt;字符集和排序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看所有支持的字符集&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;show character set;
show charset;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;查看支持的所有排序&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;show collation;
#注意
utf8_general_ci不区分大小写
utf8_bin 区分大小写
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;查看当前使用的排序规则&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show variables like &amp;#39;collation%&amp;#39;;
+----------------------+-------------------+
| Variable_name        | Value             |
+----------------------+-------------------+
| collation_connection | utf8_general_ci   |
| collation_database   | latin1_swedish_ci |
| collation_server     | latin1_swedish_ci |
+----------------------+-------------------+
3 rows in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;设置服务器端默认字符集&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/my.cnf
#针对mysql客户端
[mysql]
default-character-set=utf8mb4
#针对所有MySQL客户端
[client]
default-character-set=utf8mb4
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;查看当前字符集的使用情况&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show variables like &amp;#39;character%&amp;#39;;
+--------------------------+----------------------------------------------------------------+
| Variable_name            | Value                                                          |
+--------------------------+----------------------------------------------------------------+
| character_set_client     | utf8mb4                                                        |
| character_set_connection | utf8mb4                                                        |
| character_set_database   | latin1                                                         |
| character_set_filesystem | binary                                                         |
| character_set_results    | utf8mb4                                                        |
| character_set_server     | latin1                                                         |
| character_set_system     | utf8                                                           |
| character_sets_dir       | /usr/local/mysql-5.7.39-linux-glibc2.12-x86_64/share/charsets/ |
+--------------------------+----------------------------------------------------------------+
8 rows in set (0.00 sec)

mysql&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;面试题: VARCHAR(50) 能存放几个 UTF8 编码的汉字？&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;存放的汉字个数与版本相关。
mysql 4.0以下版本，varchar(50) 指的是 50 字节，如果存放 UTF8 格式编码的汉字时（每个汉字3字
节），只能存放16 个。
mysql 5.0以上版本，varchar(50) 指的是 50 字符，无论存放的是数字、字母还是 UTF8 编码的汉字，
都可以存放 50 个。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;MySQL用户管理&#34;&gt;&lt;a href=&#34;#MySQL用户管理&#34; class=&#34;headerlink&#34; title=&#34;ＭySQL用户管理&#34;&gt;&lt;/a&gt;ＭySQL用户管理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;相关数据库和表&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;元数据数据库：mysql
系统授权表：db, host, user,columns_priv, tables_priv, procs_priv, proxies_priv
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;用户账号&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;USERNAME&amp;#39;@&amp;#39;HOST&amp;#39;
@&amp;#39;HOST&amp;#39;: 主机名： user1@&amp;#39;web1.magedu.org&amp;#39;
IP地址或Network
通配符： % _
示例：wang@&amp;#39;172.16.%.%&amp;#39;
user2@&amp;#39;192.168.1.%&amp;#39;
mage@&amp;#39;10.0.0.0/255.255.0.0&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建用户：create user&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;CREATE USER &amp;#39;USERNAME&amp;#39;@&amp;#39;HOST&amp;#39; [IDENTIFIED BY &amp;#39;password&amp;#39;]；
#示例:
create user test@&amp;#39;10.0.0.0/255.255.255.0&amp;#39; identified by &amp;#39;123456&amp;#39;;
create user test2@&amp;#39;10.0.0.%&amp;#39; identified by 123456
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新建用户的默认权限：USAGE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户重命名：RENAME USER&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;RENAME USER old_user_name TO new_user_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;删除用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;DROP USER &amp;#39;USERNAME&amp;#39;@&amp;#39;HOST&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;删除空用户&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DROP USER &amp;#39;&amp;#39;@&amp;#39;localhost&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;修改密码&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新版mysql中用户密码可以保存在mysql.user表的authentication_string字段中&lt;br&gt;如果mysql.user表的authentication_string和password字段都保存密码，authentication_string&lt;br&gt;优先生效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#方法1,用户可以也可通过此方式修改自已的密码
SET PASSWORD FOR &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39; = PASSWORD(&amp;#39;password&amp;#39;); #MySQL8.0 版本不支持此方法,
因为password函数被取消
set password for root@&amp;#39;localhost&amp;#39;=&amp;#39;123456&amp;#39; ; #MySQL8.0版本支持此方法,此方式直接将密码
123456加密后存放在mysql.user表的authentication_string字段
#方法2
ALTER USER test@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;centos&amp;#39;; #通用改密码方法, 用户可以也可通过此方式修
改自已的密码,MySQL8 版本修改密码
#方法3 此方式MySQL8.0不支持,因为password函数被取消
UPDATE mysql.user SET password=PASSWORD(&amp;#39;password&amp;#39;) WHERE clause;
#mariadb 10.3
update mysql.user set authentication_string=password(&amp;#39;ubuntu&amp;#39;) where
user=&amp;#39;mage&amp;#39;;
#此方法需要执行下面指令才能生效：
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;忘记管理员密码解决方法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动mysqld进程时，为其使用如下选项：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;--skip-grant-tables
--skip-networking
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;使用UPDATE命令修改管理员密码&lt;/li&gt;
&lt;li&gt;关闭mysqld进程，移除上述两个选项，重启mysqld&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;范例:Mariadb 和MySQL5.6版之前破解root密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos8 ~]#vim /etc/my.cnf
[mysqld]
skip-grant-tables
skip-networking
[root@centos8 ~]#systemctl restart mysqld|mariadb
[root@centos8 ~]#mysql
#方法1
#mariadb 旧版和MySQL5.6版之前
MariaDB [(none)]&amp;gt; update mysql.user set password=password(&amp;#39;ubuntu&amp;#39;) where
user=&amp;#39;root&amp;#39;;
#mariadb 新版
MariaDB [(none)]&amp;gt; update mysql.user set authentication_string=password(&amp;#39;ubuntu&amp;#39;)
where user=&amp;#39;root&amp;#39;;
#方法2
MariaDB [(none)]&amp;gt; flush privileges;
MariaDB [(none)]&amp;gt; alter user root@&amp;#39;localhost&amp;#39; identified by &amp;#39;ubuntu&amp;#39;;
[root@centos8 ~]#vim /etc/my.cnf
[mysqld]
#skip-grant-tables
#skip-networking

[root@centos8 ~]#systemctl restart mysqld|mariadb
[root@centos8 ~]#mysql -uroot -pubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: MySQL5.7和8.0 破解root密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos8 ~]#vim /etc/my.cnf
[mysqld]
skip-grant-tables
skip-networking #MySQL8.0不需要
[root@centos8 ~]#systemctl restart mysqld
#方法1
mysql&amp;gt; update mysql.user set authentication_string=&amp;#39;&amp;#39; where user=&amp;#39;root&amp;#39; and
host=&amp;#39;localhost&amp;#39;;
#方法2
mysql&amp;gt; flush privileges;
#再执行下面任意一个命令
mysql&amp;gt; alter user root@&amp;#39;localhost&amp;#39; identified by &amp;#39;ubuntu&amp;#39;;
mysql&amp;gt; set password for root@&amp;#39;localhost&amp;#39;=&amp;#39;ubuntu&amp;#39;;
[root@centos8 ~]#vim /etc/my.cnf
[mysqld]
#skip-grant-tables
#skip-networking
[root@centos8 ~]#systemctl restart mysqld
[root@centos8 ~]#mysql -uroot -pubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例: 删库跑路之清空root密码方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#此方法适用于包安装方式的MySQL或Mariadb
[root@centos8 ~]#systemctl stop mysqld
[root@centos8 ~]#rm -rf /var/lib/mysql/*
[root@centos8 ~]#systemctl start mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;权限管理&#34;&gt;&lt;a href=&#34;#权限管理&#34; class=&#34;headerlink&#34; title=&#34;权限管理&#34;&gt;&lt;/a&gt;权限管理&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;权限类别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;管理类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;程序类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库级别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表级别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字段级别&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;管理类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CREATE USER&lt;/li&gt;
&lt;li&gt;FILE&lt;/li&gt;
&lt;li&gt;SUPER&lt;/li&gt;
&lt;li&gt;SHOW DATABASES&lt;/li&gt;
&lt;li&gt;RELOAD&lt;/li&gt;
&lt;li&gt;SHUTDOWN&lt;/li&gt;
&lt;li&gt;REPLICATION SLAVE&lt;/li&gt;
&lt;li&gt;REPLICATION CLIENT&lt;/li&gt;
&lt;li&gt;LOCK TABLES&lt;/li&gt;
&lt;li&gt;PROCESS&lt;/li&gt;
&lt;li&gt;CREATE TEMPORARY TABLES&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;程序类：针对 FUNCTION、PROCEDURE、TRIGGER&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CREATE&lt;/li&gt;
&lt;li&gt;ALTER&lt;/li&gt;
&lt;li&gt;DROP&lt;/li&gt;
&lt;li&gt;EXCUTE&lt;br&gt;&lt;strong&gt;库和表级别：针对 DATABASE、TABLE&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ALTER&lt;/li&gt;
&lt;li&gt;CREATE&lt;/li&gt;
&lt;li&gt;CREATE VIEW&lt;/li&gt;
&lt;li&gt;DROP INDEX&lt;/li&gt;
&lt;li&gt;SHOW VIEW&lt;/li&gt;
&lt;li&gt;WITH GRANT OPTION：能将自己获得的权限转赠给其他用户&lt;br&gt;&lt;strong&gt;数据操作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SELECT&lt;br&gt;-INSERT&lt;/li&gt;
&lt;li&gt;DELETE&lt;/li&gt;
&lt;li&gt;UPDATE&lt;br&gt;&lt;strong&gt;字段级别&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SELECT(col1,col2,…)&lt;/li&gt;
&lt;li&gt;UPDATE(col1,col2,…)&lt;/li&gt;
&lt;li&gt;INSERT(col1,col2,…)&lt;br&gt;&lt;strong&gt;所有权限&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ALL PRIVILEGES 或 ALL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;授权&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授权：GRANT&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;GRANT SELECT (col1), INSERT (col1,col2) ON mydb.mytbl TO &amp;#39;someuser&amp;#39;@&amp;#39;somehost&amp;#39;;
GRANT ALL ON wordpress.* TO wordpress@&amp;#39;10.0.0.%&amp;#39; ;
GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;10.0.0.%&amp;#39; WITH GRANT OPTION;
#创建用户和授权同时执行的方式在MySQL8.0取消了
GRANT ALL ON wordpress.* TO wordpress@&amp;#39;192.168.8.%&amp;#39; IDENTIFIED BY &amp;#39;magedu&amp;#39;;
GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;192.168.8.%&amp;#39; IDENTIFIED BY &amp;#39;magedu&amp;#39;
WITH GRANT OPTION;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;取消授权&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取消授权：REVOKE&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;REVOKE DELETE ON *.* FROM &amp;#39;testuser&amp;#39;@&amp;#39;172.16.0.%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;查看指定用户获得的授权&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Help SHOW GRANTS
SHOW GRANTS FOR &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39;;
SHOW GRANTS FOR CURRENT_USER[()];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;MariaDB服务进程启动时会读取mysql库中所有授权表至内存&lt;br&gt;(1) GRANT或REVOKE等执行权限操作会保存于系统表中，MariaDB的服务进程通常会自动重读授权表，&lt;br&gt;使之生效&lt;br&gt;(2) 对于不能够或不能及时重读授权表的命令，可手动让MariaDB的服务进程重读授权表：&lt;br&gt;mysql&amp;gt; FLUSH PRIVILEGES;&lt;/p&gt;
&lt;h1 id=&#34;MyISAM-存储引擎&#34;&gt;&lt;a href=&#34;#MyISAM-存储引擎&#34; class=&#34;headerlink&#34; title=&#34;MyISAM 存储引擎&#34;&gt;&lt;/a&gt;MyISAM 存储引擎&lt;/h1&gt;&lt;h2 id=&#34;MyISAM-引擎特点&#34;&gt;&lt;a href=&#34;#MyISAM-引擎特点&#34; class=&#34;headerlink&#34; title=&#34;MyISAM 引擎特点&#34;&gt;&lt;/a&gt;MyISAM 引擎特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不支持事务&lt;/li&gt;
&lt;li&gt;表级锁定&lt;/li&gt;
&lt;li&gt;读写相互阻塞，写入不能读，读时不能写&lt;/li&gt;
&lt;li&gt;只缓存索引&lt;/li&gt;
&lt;li&gt;不支持外键约束&lt;/li&gt;
&lt;li&gt;不支持聚簇索引&lt;/li&gt;
&lt;li&gt;读取数据较快，占用资源较少&lt;/li&gt;
&lt;li&gt;不支持MVCC（多版本并发控制机制）高并发&lt;/li&gt;
&lt;li&gt;崩溃恢复性较差&lt;/li&gt;
&lt;li&gt;MySQL5.5.5 前默认的数据库引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;MyISAM-存储引擎适用场景&#34;&gt;&lt;a href=&#34;#MyISAM-存储引擎适用场景&#34; class=&#34;headerlink&#34; title=&#34;MyISAM 存储引擎适用场景&#34;&gt;&lt;/a&gt;MyISAM 存储引擎适用场景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;只读（或者写较少）&lt;/li&gt;
&lt;li&gt;表较小（可以接受长时间进行修复操作）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;MyISAM-引擎文件&#34;&gt;&lt;a href=&#34;#MyISAM-引擎文件&#34; class=&#34;headerlink&#34; title=&#34;MyISAM 引擎文件&#34;&gt;&lt;/a&gt;MyISAM 引擎文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;tbl_name.frm 表格式定义&lt;/li&gt;
&lt;li&gt;tbl_name.MYD 数据文件&lt;/li&gt;
&lt;li&gt;tbl_name.MYI 索引文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;InnoDB-引擎&#34;&gt;&lt;a href=&#34;#InnoDB-引擎&#34; class=&#34;headerlink&#34; title=&#34;InnoDB 引擎&#34;&gt;&lt;/a&gt;InnoDB 引擎&lt;/h1&gt;&lt;h2 id=&#34;InnoDB引擎特点&#34;&gt;&lt;a href=&#34;#InnoDB引擎特点&#34; class=&#34;headerlink&#34; title=&#34;InnoDB引擎特点&#34;&gt;&lt;/a&gt;InnoDB引擎特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;行级锁&lt;/li&gt;
&lt;li&gt;支持事务，适合处理大量短期事务&lt;/li&gt;
&lt;li&gt;读写阻塞与事务隔离级别相关&lt;/li&gt;
&lt;li&gt;可缓存数据和索引&lt;/li&gt;
&lt;li&gt;支持聚簇索引&lt;/li&gt;
&lt;li&gt;崩溃恢复性更好&lt;/li&gt;
&lt;li&gt;支持MVCC高并发&lt;/li&gt;
&lt;li&gt;从MySQL5.5后支持全文索引&lt;/li&gt;
&lt;li&gt;从MySQL5.5.5开始为默认的数据库引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;管理存储引擎&#34;&gt;&lt;a href=&#34;#管理存储引擎&#34; class=&#34;headerlink&#34; title=&#34;管理存储引擎&#34;&gt;&lt;/a&gt;管理存储引擎&lt;/h1&gt;&lt;p&gt;查看mysql支持的存储引擎&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show engines;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看当前默认的存储引擎&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show variables like &amp;#39;%storage_engine%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置默认的存储引擎&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/my.cnf
[mysqld]
default_storage_engine= InnoDB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看库中所有表使用的存储引擎&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show table status from db_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看库中指定表的存储引擎&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show table status like &amp;#39;tb_name&amp;#39;;
show create table tb_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置表的存储引擎：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE tb_name(... ) ENGINE=InnoDB;
ALTER TABLE tb_name ENGINE=InnoDB;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;实战案例：数据库冷备份和热备份&#34;&gt;&lt;a href=&#34;#实战案例：数据库冷备份和热备份&#34; class=&#34;headerlink&#34; title=&#34;实战案例：数据库冷备份和热备份&#34;&gt;&lt;/a&gt;实战案例：数据库冷备份和热备份&lt;/h1&gt;&lt;p&gt;MySQL8.0&lt;/p&gt;
&lt;p&gt;冷备份：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;备份过程
# 停止数据库
systemctl stop mysql
# rsync可以保留文件属性
[root@centos8 ~]#rsync -a /var/lib/mysql 10.0.0.28:/data/
#如果配置及二进制文件相关有特殊设置也需要备份
#还原
[root@centos8 ~]#yum -y install mysql-server
[root@centos8 ~]#cp -a /data/mysql/* /var/lib/mysql/
[root@centos8 ~]#systemctl start mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;mysqldump备份工具&#34;&gt;&lt;a href=&#34;#mysqldump备份工具&#34; class=&#34;headerlink&#34; title=&#34;mysqldump备份工具&#34;&gt;&lt;/a&gt;mysqldump备份工具&lt;/h1&gt;&lt;p&gt;mysqldump 说明&lt;br&gt;逻辑备份工具：&lt;br&gt;mysqldump, mydumper, phpMyAdmin&lt;br&gt;Schema和数据存储在一起、巨大的SQL语句、单个巨大的备份文件&lt;br&gt;mysqldump是MySQL的客户端命令，通过mysql协议连接至mysql服务器进行备份&lt;br&gt;命令格式:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysqldump [OPTIONS] database [tables] #支持指定数据库和指定多表的备份，但数据库本身定义
不备份
mysqldump [OPTIONS] -B DB1 [DB2 DB3...] #支持指定数据库备份，包含数据库本身定义也会备份
mysqldump [OPTIONS] -A [OPTIONS] #备份所有数据库，包含数据库本身定义也会备份
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mysqldump参考：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://dev.mysql.com/doc/refman/5.7/en/mysqldump.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mysqldump 常见通用选项：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-u, --user=name User for login if not current user
-p, --password[=name] Password to use when connecting to server
-A, --all-databases #备份所有数据库，含create database
-B, --databases db_name… #指定备份的数据库，包括create database语句
-E, --events：#备份相关的所有event scheduler
-R, --routines：#备份所有存储过程和自定义函数
--triggers：#备份表相关触发器，默认启用,用--skip-triggers，不备份触发器
--default-character-set=utf8 #指定字符集
--master-data[=#]：#注意：MySQL8.0.26版以后，此选项变为--source-data
#此选项须启用二进制日志
#1：所备份的数据之前加一条记录为CHANGE MASTER TO语句，非注释，不指定#，默认为1，适合于主从复
制多机使用
#2：记录为被注释的#CHANGE MASTER TO语句，适合于单机使用,适用于备份还原
#此选项会自动关闭--lock-tables功能，自动打开-x | --lock-all-tables功能（除非开启--
single-transaction）
-F, --flush-logs #备份前滚动日志，锁定表完成后，执行flush logs命令,生成新的二进制日志文件，
配合-A 或 -B 选项时，会导致刷新多次数据库。建议在同一时刻执行转储和日志刷新，可通过和--single-
transaction或-x，--master-data 一起使用实现，此时只刷新一次二进制日志
--compact #去掉注释，适合调试，节约备份占用的空间,生产不使用
-d, --no-data #只备份表结构,不备份数据,即只备份create table
-t, --no-create-info #只备份数据,不备份表结构,即不备份create table
-n,--no-create-db #不备份create database，可被-A或-B覆盖
--flush-privileges #备份mysql或相关时需要使用
-f, --force #忽略SQL错误，继续执行
--hex-blob #使用十六进制符号转储二进制列，当有包括BINARY,VARBINARY,BLOB，
BIT的数据类型的列时使用，避免乱码
-q, --quick #不缓存查询，直接输出，加快备份速度
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mysqldump的MyISAM存储引擎相关的备份选项：&lt;br&gt;MyISAM不支持事务，只能支持温备；不支持热备，所以必须先锁定要备份的库，而后启动备份操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-x,--lock-all-tables #加全局读锁，锁定所有库的所有表，同时加--single-transaction或--
lock-tables选项会关闭此选项功能，注意：数据量大时，可能会导致长时间无法并发访问数据库
-l,--lock-tables #对于需要备份的每个数据库，在启动备份之前分别锁定其所有表，默认为on,--
skip-lock-tables选项可禁用,对备份MyISAM的多个库,可能会造成数据不一致
#注：以上选项对InnoDB表一样生效，实现温备，但不推荐使用
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mysqldump的InnoDB存储引擎相关的备份选项：&lt;br&gt;InnoDB 存储引擎支持事务,可以利用事务的相应的隔离级别,实现热备，也可以实现温备但不建议用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--single-transaction
#此选项Innodb中推荐使用，不适用MyISAM，此选项会开始备份前，先执行START TRANSACTION指令开启
事务
#此选项通过在单个事务中转储所有表来创建一致的快照。 仅适用于存储在支持多版本控制的存储引擎中的表
（目前只有InnoDB可以）; 转储不保证与其他存储引擎保持一致。 在进行单事务转储时，要确保有效的转储
文件（正确的表内容和二进制日志位置），没有其他连接应该使用以下语句：ALTER TABLE，DROP TABLE，
RENAME TABLE，TRUNCATE TABLE,此选项和--lock-tables（此选项隐含提交挂起的事务）选项是相互
排斥,备份大型表时，建议将--single-transaction选项和--quick结合一起使用
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;生产环境实战备份策略&#34;&gt;&lt;a href=&#34;#生产环境实战备份策略&#34; class=&#34;headerlink&#34; title=&#34;生产环境实战备份策略&#34;&gt;&lt;/a&gt;生产环境实战备份策略&lt;/h1&gt;&lt;p&gt;InnoDB建议备份策略&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysqldump -uroot -p -A -F -E -R --triggers --single-transaction --master-data=1
--flush-privileges --default-character-set=utf8 --hex-blob
&amp;gt;$&amp;#123;BACKUP&amp;#125;/fullbak_$&amp;#123;BACKUP_TIME&amp;#125;.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MyISAM建议备份策略&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysqldump -uroot -p -A -F -E -R -x --master-data=1 --flush-privileges --
triggers --default-character-set=utf8 --hex-blob
&amp;gt;$&amp;#123;BACKUP&amp;#125;/fullbak_$&amp;#123;BACKUP_TIME&amp;#125;.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;mysqldump-备份还原实战案例&#34;&gt;&lt;a href=&#34;#mysqldump-备份还原实战案例&#34; class=&#34;headerlink&#34; title=&#34;mysqldump 备份还原实战案例&#34;&gt;&lt;/a&gt;mysqldump 备份还原实战案例&lt;/h1&gt;&lt;h2 id=&#34;实战案例：特定数据库的备份脚本&#34;&gt;&lt;a href=&#34;#实战案例：特定数据库的备份脚本&#34; class=&#34;headerlink&#34; title=&#34;实战案例：特定数据库的备份脚本&#34;&gt;&lt;/a&gt;实战案例：特定数据库的备份脚本&lt;/h2&gt;&lt;p&gt;系统：centos8.5&lt;/p&gt;
&lt;p&gt;mysql:8.0&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
TIME=`date +%F_%H-%M-%S`
# 备份目录
DIR=/mysql_backup
# 备份数据库
DB=hellodb
# 数据库密码
PASSWD=123456

# 判断备份数据库目录是否存在

[ -d $DIR ] || mkdir $DIR

# 备份
mysqldump -uroot -p&amp;quot;$PASSWD&amp;quot; -F -E -R --triggers --single-transaction --master-data=2 --default-character-set=utf8mb4 -q -B $DB | gzip &amp;gt; $&amp;#123;DIR&amp;#125;/$&amp;#123;DB&amp;#125;_$&amp;#123;TIME&amp;#125;.sql.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;实战案例：分库备份的实战脚本&#34;&gt;&lt;a href=&#34;#实战案例：分库备份的实战脚本&#34; class=&#34;headerlink&#34; title=&#34;实战案例：分库备份的实战脚本&#34;&gt;&lt;/a&gt;实战案例：分库备份的实战脚本&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;系统：centos8.5&lt;/li&gt;
&lt;li&gt;MySQL版本：8.0&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
TIME=`date +%F_%H-%M-%S`
DIR=/backup
PASS=123456
[ -d &amp;quot;$DIR&amp;quot; ] || mkdir $DIR
for DB in `mysql -uroot -p&amp;quot;$PASS&amp;quot; -e &amp;#39;show databases&amp;#39; | grep -Ev &amp;quot;^Database|.*schema$&amp;quot;`;do
    mysqldump -uroot -p&amp;quot;$PASS&amp;quot; -F --single-transaction --master-data=2 --default-character-set=utf8mb4 -q -B $DB | gzip &amp;gt; $&amp;#123;DIR&amp;#125;/$&amp;#123;DB&amp;#125;_$&amp;#123;TIME&amp;#125;.sql.gz
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;实战案例：完全备份和还原&#34;&gt;&lt;a href=&#34;#实战案例：完全备份和还原&#34; class=&#34;headerlink&#34; title=&#34;实战案例：完全备份和还原&#34;&gt;&lt;/a&gt;实战案例：完全备份和还原&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;#开启二进制日志
[root@centos8 ~]#vim /etc/my.cnf.d/mariadb-server.cnf
[mysqld]
log-bin
#备份
[root@centos8 ~]#mysqldump -uroot -pmagedu -A -F --single-transaction --master-
data=2 |gzip &amp;gt; /backup/all-`date +%F`.sql.gz
#还原
[root@centos8 backup]#dnf install mariadb-server
[root@centos8 backup]#gzip -d all-2019-11-27.sql.gz
[root@centos8 ~]#mysql
MariaDB [(none)]&amp;gt; set sql_log_bin=off;
MariaDB [(none)]&amp;gt; source /backup/all-2019-11-27.sql
MariaDB [(none)]&amp;gt; set sql_log_bin=on;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;实战案例：恢复误删除的表&#34;&gt;&lt;a href=&#34;#实战案例：恢复误删除的表&#34; class=&#34;headerlink&#34; title=&#34;实战案例：恢复误删除的表&#34;&gt;&lt;/a&gt;实战案例：恢复误删除的表&lt;/h1&gt;&lt;p&gt;案例说明：每天2：30做完全备份，早上10：00误删除了表students，10：10才发现故障，现需要将数&lt;br&gt;据库还原到10：10的状态，且恢复被删除的students表&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#查看数据库是否开启二进制
mysql&amp;gt; select @@log_bin;
+-----------+
| @@log_bin |
+-----------+
|         1 |
+-----------+
1 row in set (0.01 sec)

mysql&amp;gt; select @@sql_log_bin;
+---------------+
| @@sql_log_bin |
+---------------+
|             1 |
+---------------+
1 row in set (0.01 sec)

mysql&amp;gt; 

# log_bin、sql_log_bin的值为1说明已经开启二进制日志

# 查看当前二进制文件在什么位置
mysql&amp;gt; show master logs;
+------------------+-----------+-----------+
| Log_name         | File_size | Encrypted |
+------------------+-----------+-----------+
| mysql-bin.000001 |       204 | No        |
| mysql-bin.000002 |       157 | No        |
+------------------+-----------+-----------+
2 rows in set (0.01 sec)

mysql&amp;gt; 
# 备份的时候开启刷新二进制日志，会生成新的二进制的日志

#完全备份
[root@centos7 ~]# mysqldump -uroot -p123456 -A -F --single-transaction --master-data=2 | gzip &amp;gt; /backup/all_`date +%F`.sql.gz

# 完全备份后进行数据更新
mysql&amp;gt; insert students (name,age,gender) values(&amp;#39;jack&amp;#39;,22,&amp;#39;M&amp;#39;);
Query OK, 1 row affected (0.01 sec)

mysql&amp;gt; insert students (name,age,gender) values(&amp;#39;rose&amp;#39;,20,&amp;#39;f&amp;#39;);
Query OK, 1 row affected (0.01 sec)

# 误删除学生表
mysql&amp;gt; drop table students;
Query OK, 0 rows affected (0.07 sec)

mysql&amp;gt; 

# 后续其他表继续更新
mysql&amp;gt; insert teachers (name,age,gender)values(&amp;#39;wang&amp;#39;,30,&amp;#39;M&amp;#39;);
Query OK, 1 row affected (0.01 sec)

mysql&amp;gt; 

mysql&amp;gt; insert teachers (name,age,gender)values(&amp;#39;mage&amp;#39;,28,&amp;#39;M&amp;#39;);
Query OK, 1 row affected (0.05 sec)

mysql&amp;gt; 

# 停止数据库访问

# 备份从完全备份后的二进制日志
[root@centos7 ~]# mysqlbinlog --start-position=157 /data/mysql/mysql-bin.000003 &amp;gt; /backup/inc.sql

# 找到误删除的语句，从备份中删除此语句
#DROP TABLE `students` /* generated by server */
#利用完全备份和修改过的二进制日志进行还原
[root@centos8 ~]#mysql -uroot -p
mysql&amp;gt; set sql_log_bin=0;
mysql&amp;gt; source /backup/allbackup_2019-11-27_10:20:08.sql;
mysql&amp;gt; source /backup/inc.sql
mysql&amp;gt; set sql_log_bin=1;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Linux/DNS/</guid>
            <title>DNS服务</title>
            <link>http://blog.itshare.work/Linux/DNS/</link>
            <category term="Linux" scheme="http://blog.itshare.work/categories/Linux/" />
            <category term="Linux从入门到放弃" scheme="http://blog.itshare.work/tags/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/" />
            <pubDate>Thu, 22 Sep 2022 22:01:44 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;DNS一般指域名系统。 域名系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用UDP端口53&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  

&lt;h1 id=&#34;名字解析介绍和DNS&#34;&gt;&lt;a href=&#34;#名字解析介绍和DNS&#34; class=&#34;headerlink&#34; title=&#34;名字解析介绍和DNS&#34;&gt;&lt;/a&gt;名字解析介绍和DNS&lt;/h1&gt;&lt;h2 id=&#34;DNS服务工作原理&#34;&gt;&lt;a href=&#34;#DNS服务工作原理&#34; class=&#34;headerlink&#34; title=&#34;DNS服务工作原理&#34;&gt;&lt;/a&gt;DNS服务工作原理&lt;/h2&gt;&lt;p&gt; &lt;img data-src=&#34;/../image.assets/1664088991760.png&#34; alt=&#34;1664088991760&#34;&gt; &lt;/p&gt;
&lt;h2 id=&#34;DNS查询类型&#34;&gt;&lt;a href=&#34;#DNS查询类型&#34; class=&#34;headerlink&#34; title=&#34;DNS查询类型&#34;&gt;&lt;/a&gt;DNS查询类型&lt;/h2&gt;&lt;p&gt; &lt;img data-src=&#34;/../image.assets/1664089216470.png&#34; alt=&#34;1664089216470&#34;&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;递归查询：&lt;br&gt;是指DNS服务器在收到用户发起的请求时，必须向用户返回一个准确的查询结果。如果DNS服务器&lt;br&gt;本地没有存储与之对应的信息，则该服务器需要询问其他服务器，并将返回的查询结构提交给用&lt;br&gt;户。&lt;br&gt;一般客户机和本地DNS服务器之间属于递归查询，即当客户机向DNS服务器发出请求后,若DNS服&lt;br&gt;务器本身不能解析，则会向另外的DNS服务器发出查询请求，得到最终的肯定或否定的结果后转交&lt;br&gt;给客户机。此查询的源和目标保持不变,为了查询结果只需要发起一次查询&lt;br&gt;递归算法:客户端向LocalDNS发起域名查询–&amp;gt;localDNS不知道域名对应的IP–&amp;gt;但它知道谁知道-&amp;gt;他&lt;br&gt;代为帮客户端去查找–&amp;gt;最后再返回最终结果&lt;/li&gt;
&lt;li&gt;迭代查询：&lt;br&gt;是指DNS服务器在收到用户发起的请求时，并不直接回复查询结果，而是告诉另一台DNS服务器的&lt;br&gt;地址，用户再向这台DNS服务器提交请求，这样依次反复，直到返回查询结果。&lt;br&gt;一般情况下(有例外)本地的DNS服务器向其它DNS服务器的查询属于迭代查询,如：若对方不能返回&lt;br&gt;权威的结果，则它会向下一个DNS服务器(参考前一个DNS服务器返回的结果)再次发起进行查询，&lt;br&gt;直到返回查询的结果为止。此查询的源不变,但查询的目标不断变化,为查询结果一般需要发起多次&lt;br&gt;查询&lt;/li&gt;
&lt;li&gt;迭代算法︰&lt;br&gt;客户端向LocalDNS发起域名查询–&amp;gt;localDNS不知道域名对应的IP–&amp;gt;但它知道谁知道并&lt;br&gt;推荐客户端应该找谁–&amp;gt;客户端自己去找它&lt;/li&gt;
&lt;li&gt;DNS缓存:&lt;br&gt;DNS缓存是将解析数据存储在靠近发起请求的客户端的位置，也可以说DNS数据是可以缓存在任意&lt;br&gt;位置，最终目的是以此减少递归查询过程，可以更快的让用户获得请求结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解析类型&#34;&gt;&lt;a href=&#34;#解析类型&#34; class=&#34;headerlink&#34; title=&#34;解析类型&#34;&gt;&lt;/a&gt;解析类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;FQDN –&amp;gt; IP 正向解析  &lt;/li&gt;
&lt;li&gt;IP –&amp;gt; FQDN 反向解析&lt;br&gt;&lt;strong&gt;注意：正反向解析是两个不同的名称空间，是两棵不同的解析树&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整查询流程&#34;&gt;&lt;a href=&#34;#完整查询流程&#34; class=&#34;headerlink&#34; title=&#34;完整查询流程&#34;&gt;&lt;/a&gt;完整查询流程&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;Client --&amp;gt;hosts文件 --&amp;gt; Client DNS Service Local Cache --&amp;gt; DNS Server (recursion递
归) --&amp;gt; DNS Server Cache --&amp;gt;DNS iteration(迭代) --&amp;gt; 根--&amp;gt; 顶级域名DNS--&amp;gt;二级域名DNS…
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;DNS服务相关概念和技术&#34;&gt;&lt;a href=&#34;#DNS服务相关概念和技术&#34; class=&#34;headerlink&#34; title=&#34;DNS服务相关概念和技术&#34;&gt;&lt;/a&gt;DNS服务相关概念和技术&lt;/h1&gt;&lt;h2 id=&#34;各种资源记录&#34;&gt;&lt;a href=&#34;#各种资源记录&#34; class=&#34;headerlink&#34; title=&#34;各种资源记录&#34;&gt;&lt;/a&gt;各种资源记录&lt;/h2&gt;&lt;p&gt;区域解析库：由众多资源记录RR(Resource Record)组成&lt;br&gt;记录类型：A, AAAA, PTR, SOA, NS, CNAME, MX&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SOA：Start Of Authority，起始授权记录；一个区域解析库有且仅能有一个SOA记录，必须位于解析库的第一条记录  &lt;/li&gt;
&lt;li&gt;A：internet Address，作用，FQDN –&amp;gt; IP  &lt;/li&gt;
&lt;li&gt;AAAA：FQDN –&amp;gt; IPv6  &lt;/li&gt;
&lt;li&gt;PTR：PoinTeR，IP –&amp;gt; FQDN  &lt;/li&gt;
&lt;li&gt;NS：Name Server，专用于标明当前区域的DNS服务器  &lt;/li&gt;
&lt;li&gt;CNAME ： Canonical Name，别名记录  &lt;/li&gt;
&lt;li&gt;MX：Mail eXchanger，邮件交换器  &lt;/li&gt;
&lt;li&gt;TXT：对域名进行标识和说明的一种方式，一般做验证记录时会使用此项，如：SPF（反垃圾邮&lt;br&gt;件）记录，https验证等，如下示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;_dnsauth TXT 2012011200000051qgs69bwoh4h6nht4n1h0lr038x
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;SOA记录&#34;&gt;&lt;a href=&#34;#SOA记录&#34; class=&#34;headerlink&#34; title=&#34;SOA记录&#34;&gt;&lt;/a&gt;SOA记录&lt;/h3&gt;&lt;p&gt;name: 当前区域的名字，例如”magedu.org.”&lt;br&gt;value: 有多部分组成&lt;br&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当前区域的主DNS服务器的FQDN，也可以使用当前区域的名字，只是注释功能，可以不需要配置&lt;br&gt;对应的NS记录和A记录&lt;/li&gt;
&lt;li&gt;当前区域管理员的邮箱地址；但地址中不能使用@符号，一般用.替换，例如：admin.magedu.org&lt;/li&gt;
&lt;li&gt;主从服务区域传输相关定义以及否定的答案的统一的TTL&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;范例&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;magedu.org. 86400 IN SOA ns.magedu.org. nsadmin.magedu.org. (
2015042201 ;序列号
2H ;刷新时间
10M ;重试时间
1W ;过期时间
1D ;否定答案的TTL值
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;NS记录&#34;&gt;&lt;a href=&#34;#NS记录&#34; class=&#34;headerlink&#34; title=&#34;NS记录&#34;&gt;&lt;/a&gt;NS记录&lt;/h3&gt;&lt;p&gt;name: 当前区域的名字&lt;br&gt;value: 当前区域的某DNS服务器的名字，例如: ns.magedu.org.&lt;br&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相邻的两个资源记录的name相同时，后续的可省略&lt;/li&gt;
&lt;li&gt;对NS记录而言，任何一个ns记录后面的服务器名字，都应该在后续有一个A记录&lt;/li&gt;
&lt;li&gt;一个区域可以有多个NS记录&lt;br&gt;范例：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;magedu.org. IN NS ns1.magedu.org.
magedu.org. IN NS ns2.magedu.org.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;MX记录&#34;&gt;&lt;a href=&#34;#MX记录&#34; class=&#34;headerlink&#34; title=&#34;MX记录&#34;&gt;&lt;/a&gt;MX记录&lt;/h3&gt;&lt;p&gt;name: 当前区域的名字&lt;br&gt;value: 当前区域的某邮件服务器(smtp服务器)的主机名&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个区域内，MX记录可有多个；但每个记录的value之前应该有一个数字(0-99)，表示此服务器的优先级；数字越小优先级越高  &lt;/li&gt;
&lt;li&gt;对MX记录而言，任何一个MX记录后面的服务器名字，都应该在后续有一个A记录&lt;br&gt;范例：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;magedu.org. IN MX 10 mx1.magedu.org.
IN MX 20 mx2.magedu.org.
mx1 A 10.0.0.100
mx2 A 10.0.0.200  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;A记录&#34;&gt;&lt;a href=&#34;#A记录&#34; class=&#34;headerlink&#34; title=&#34;A记录&#34;&gt;&lt;/a&gt;A记录&lt;/h3&gt;&lt;p&gt;name: 某主机的FQDN，例如：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5tYWdlZHUub3JnLw==&#34;&gt;www.magedu.org&lt;/span&gt;.&lt;br&gt;value: 主机名对应主机的IP地址&lt;br&gt;避免用户写错名称时给错误答案，可通过泛域名解析进行解析至某特定地址&lt;br&gt;范例：  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;www.magedu.org. IN A 1.1.1.1
www.magedu.org. IN A 2.2.2.2
mx1.magedu.org. IN A 3.3.3.3
mx2.magedu.org. IN A 4.4.4.4
$GENERATE 1-254 HOST$ IN A 1.2.3.$
*.magedu.org. IN A 5.5.5.5
magedu.org. IN A 6.6.6.6
#注意：如果有和DNS的IP相同的多个同名的A记录，优先返回DNS的本机IP  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;AAAA记录&#34;&gt;&lt;a href=&#34;#AAAA记录&#34; class=&#34;headerlink&#34; title=&#34;AAAA记录&#34;&gt;&lt;/a&gt;AAAA记录&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;name: FQDN  
value: IPv6  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;PTR记录&#34;&gt;&lt;a href=&#34;#PTR记录&#34; class=&#34;headerlink&#34; title=&#34;PTR记录&#34;&gt;&lt;/a&gt;PTR记录&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;name: IP，有特定格式，把IP地址反过来写，1.2.3.4，要写作4.3.2.1；而有特定后缀：in-
addr.arpa.，所以完整写法为：4.3.2.1.in-addr.arpa.
value: FQDN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：网络地址及后缀可省略；主机地址依然需要反着写&lt;br&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;4.3.2.1.in-addr.arpa. IN PTR www.magedu.org.
#如1.2.3为网络地址，可简写成：
4 IN PTR www.magedu.org.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;CNAME别名记录&#34;&gt;&lt;a href=&#34;#CNAME别名记录&#34; class=&#34;headerlink&#34; title=&#34;CNAME别名记录&#34;&gt;&lt;/a&gt;CNAME别名记录&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;name: 别名的FQDN
value: 真正名字的FQDN  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;例如&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;www.magedu.org. IN CNAME websrv.magedu.org.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;DNS软件bind&#34;&gt;&lt;a href=&#34;#DNS软件bind&#34; class=&#34;headerlink&#34; title=&#34;DNS软件bind&#34;&gt;&lt;/a&gt;DNS软件bind&lt;/h2&gt;&lt;p&gt;DNS服务器软件：bind，powerdns，dnsmasq，unbound，coredns  &lt;/p&gt;
&lt;h3 id=&#34;bind相关程序包&#34;&gt;&lt;a href=&#34;#bind相关程序包&#34; class=&#34;headerlink&#34; title=&#34;bind相关程序包&#34;&gt;&lt;/a&gt;bind相关程序包&lt;/h3&gt;&lt;p&gt;yum list all bind* &lt;/p&gt;
&lt;p&gt;bind：服务器&lt;br&gt;bind-utils: 客户端&lt;br&gt;bind-libs：相关库,依赖关系自动安装&lt;br&gt;bind-chroot: 安全包，将dns相关文件放至 &amp;#x2F;var&amp;#x2F;named&amp;#x2F;chroot&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;范例：安装bind软件&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;TEXT&#34;&gt;[root@centos8 ~]#dnf -y install bind bind-utils
[root@ubuntu2004 ~]#apt -y install bind9 bind9-utils
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bind包相关文件&#34;&gt;&lt;a href=&#34;#bind包相关文件&#34; class=&#34;headerlink&#34; title=&#34;bind包相关文件&#34;&gt;&lt;/a&gt;bind包相关文件&lt;/h3&gt;&lt;p&gt;BIND主程序：&amp;#x2F;usr&amp;#x2F;sbin&amp;#x2F;named&lt;br&gt;服务脚本和Unit名称：&amp;#x2F;etc&amp;#x2F;rc.d&amp;#x2F;init.d&amp;#x2F;named，&amp;#x2F;usr&amp;#x2F;lib&amp;#x2F;systemd&amp;#x2F;system&amp;#x2F;named.service&lt;br&gt;主配置文件：&amp;#x2F;etc&amp;#x2F;named.conf, &amp;#x2F;etc&amp;#x2F;named.rfc1912.zones, &amp;#x2F;etc&amp;#x2F;rndc.key&lt;br&gt;管理工具：&amp;#x2F;usr&amp;#x2F;sbin&amp;#x2F;rndc：remote name domain controller，默认与bind安装在同一主机，且&lt;br&gt;只能通过127.0.0.1连接named进程，提供辅助性的管理功能；953&amp;#x2F;tcp&lt;br&gt;解析库文件：&amp;#x2F;var&amp;#x2F;named&amp;#x2F;ZONE_NAME.ZONE&lt;br&gt;注意：&lt;br&gt;(1) 一台物理服务器可同时为多个区域提供解析&lt;br&gt;(2) 必须要有根区域文件；named.ca&lt;br&gt;(3) 应该有两个（如果包括ipv6的，应该更多）实现localhost和本地回环地址的解析库&lt;/p&gt;
&lt;h3 id=&#34;主配置文件&#34;&gt;&lt;a href=&#34;#主配置文件&#34; class=&#34;headerlink&#34; title=&#34;主配置文件&#34;&gt;&lt;/a&gt;主配置文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;全局配置：options {};&lt;/li&gt;
&lt;li&gt;日志子系统配置：logging {};&lt;/li&gt;
&lt;li&gt;区域定义：本机能够为哪些zone进行解析，就要定义哪些zone&lt;br&gt;zone “ZONE_NAME” IN {};&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;任何服务程序如果期望其能够通过网络被其它主机访问，至少应该监听在一个能与外部主机通信的&lt;br&gt;IP地址上 &lt;/li&gt;
&lt;li&gt;缓存名称服务器的配置：监听外部地址即可  &lt;/li&gt;
&lt;li&gt;dnssec: 建议关闭dnssec，设为no&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.itshare.work/Linux/Disk/</guid>
            <title>磁盘存储和文件系统管理</title>
            <link>http://blog.itshare.work/Linux/Disk/</link>
            <category term="Linux" scheme="http://blog.itshare.work/categories/Linux/" />
            <category term="Linux从入门到放弃" scheme="http://blog.itshare.work/tags/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/" />
            <pubDate>Sun, 07 Aug 2022 08:40:59 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;磁盘管理与文件系统&#34;&gt;&lt;a href=&#34;#磁盘管理与文件系统&#34; class=&#34;headerlink&#34; title=&#34;磁盘管理与文件系统&#34;&gt;&lt;/a&gt;磁盘管理与文件系统&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;磁盘是计算机主要的存储介质，可以存储大量的二进制数据，并且断电后也能保持数据不丢失，使用磁盘存储数据的时候我们可以将磁盘划分成我们所需要的格式来进行使用&lt;/p&gt;
&lt;h1 id=&#34;1-磁盘结构&#34;&gt;&lt;a href=&#34;#1-磁盘结构&#34; class=&#34;headerlink&#34; title=&#34;1. 磁盘结构&#34;&gt;&lt;/a&gt;1. 磁盘结构&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、硬盘的物理结构&lt;/strong&gt;&lt;br&gt;盘片：硬盘有多个盘片，每个盘片有2面&lt;br&gt;磁头：每面有一个磁头&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.硬盘数据结构&lt;/strong&gt;&lt;br&gt;扇区：磁盘上的每个磁道被等分为若干个弧段，这些弧段便是硬盘的扇区。硬盘的第一个扇区，叫做引导扇区 ，盘片被分为多个扇形区域，每个扇区存放512字节的数据，是硬盘最小的存储单元&lt;br&gt;磁道：当磁盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫做磁道&lt;br&gt;柱面：在有多个盘片构成的盘组中，由不同盘片的面，但处于同一半径圆的多个磁道组成的一个圆柱面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、磁盘结构&lt;/strong&gt;&lt;br&gt;硬盘存储容量 &amp;#x3D; 磁头数 x 磁道（柱面）数 x 每道扇区数 x 每扇区字节数（512字节）&lt;br&gt;可以用柱面&amp;#x2F;磁头&amp;#x2F;扇区来唯一定位磁盘上的每一个区域&lt;br&gt;磁盘的接口类型：IDE、SATA、SCSI、SAS、光纤通道&lt;br&gt;用 fdisk -l 查看分区信息&lt;/p&gt;
&lt;h1 id=&#34;2-管理存储&#34;&gt;&lt;a href=&#34;#2-管理存储&#34; class=&#34;headerlink&#34; title=&#34;2. 管理存储&#34;&gt;&lt;/a&gt;2. 管理存储&lt;/h1&gt;&lt;h2 id=&#34;2-1-磁盘分区&#34;&gt;&lt;a href=&#34;#2-1-磁盘分区&#34; class=&#34;headerlink&#34; title=&#34;2.1 磁盘分区&#34;&gt;&lt;/a&gt;2.1 磁盘分区&lt;/h2&gt;&lt;h3 id=&#34;2-1-1-为什么分区&#34;&gt;&lt;a href=&#34;#2-1-1-为什么分区&#34; class=&#34;headerlink&#34; title=&#34;2.1.1 为什么分区&#34;&gt;&lt;/a&gt;2.1.1 为什么分区&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;优化I&amp;#x2F;O性能&lt;/li&gt;
&lt;li&gt;实现磁盘空间配额限制&lt;/li&gt;
&lt;li&gt;提高修复速度&lt;/li&gt;
&lt;li&gt;隔离系统和程序&lt;/li&gt;
&lt;li&gt;安装多个OS&lt;/li&gt;
&lt;li&gt;采用不同文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-2-分区方式&#34;&gt;&lt;a href=&#34;#2-1-2-分区方式&#34; class=&#34;headerlink&#34; title=&#34;2.1.2 分区方式&#34;&gt;&lt;/a&gt;2.1.2 分区方式&lt;/h3&gt;&lt;p&gt;两种分区方式：MBR，GPT&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MBR分区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MBR：Master Boot Record，1982年，使用32位表示扇区数，分区不超过2T&lt;br&gt;划分分区的单位：&lt;br&gt;CentOS 5 之前按整柱面划分&lt;br&gt;CentOS 6 版本后可以按Sector划分&lt;br&gt;0磁道0扇区：512bytes&lt;br&gt;446bytes: boot loader 启动相关&lt;br&gt;64bytes：分区表，其中每16bytes标识一个分区&lt;br&gt;2bytes: 55AA，标识位&lt;br&gt;MBR分区中一块硬盘最多有4个主分区，也可以3主分区+1扩展(N个逻辑分区)&lt;br&gt;MBR分区：主和扩展分区对应的1–4，&amp;#x2F;dev&amp;#x2F;sda3，逻辑分区从5开始，&amp;#x2F;dev&amp;#x2F;sda5&lt;/p&gt;
&lt;p&gt;问题：利用分区策略相同的另一台主机的分区表来还原和恢复当前主机破环的分区表？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GPT分区&lt;/strong&gt;&lt;br&gt;GPT：GUID（Globals Unique Identifiers） partition table 支持128个分区，使用64位，支持8Z（&lt;br&gt;512Byte&amp;#x2F;block ）64Z （ 4096Byte&amp;#x2F;block）&lt;br&gt;使用128位UUID(Universally Unique Identifier) 表示磁盘和分区 GPT分区表自动备份在头和尾两份，&lt;br&gt;并有CRC校验位&lt;br&gt;UEFI (Unified Extensible Firmware Interface 统一可扩展固件接口)硬件支持GPT，使得操作系统可以&lt;br&gt;启动&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GPT分区结构分为4个区域：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GPT头&lt;/li&gt;
&lt;li&gt;分区表&lt;/li&gt;
&lt;li&gt;GPT分区&lt;/li&gt;
&lt;li&gt;备份区域&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-2-管理分区&#34;&gt;&lt;a href=&#34;#2-2-管理分区&#34; class=&#34;headerlink&#34; title=&#34;2.2 管理分区&#34;&gt;&lt;/a&gt;2.2 管理分区&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;列出块设备&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lsblk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;创建分区命令&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fdisk 管理MBR分区
gdisk 管理GPT分区
parted 高级分区操作，可以是交互或非交互方式
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;重新设置内存中的内核分区表版本，适合于除了CentOS 6 以外的其它版本 5，7，8&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;partprobe
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2-1-添加并检测新硬盘&#34;&gt;&lt;a href=&#34;#2-2-1-添加并检测新硬盘&#34; class=&#34;headerlink&#34; title=&#34;2.2.1 添加并检测新硬盘&#34;&gt;&lt;/a&gt;2.2.1 添加并检测新硬盘&lt;/h3&gt;&lt;p&gt;1、添加新硬盘使用lsblk命令显示出块设备&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@ubuntu200404:~# lsblk
NAME                      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
loop0                       7:0    0 61.9M  1 loop /snap/core20/1328
loop1                       7:1    0 67.2M  1 loop /snap/lxd/21835
loop2                       7:2    0   62M  1 loop /snap/core20/1587
loop3                       7:3    0 43.6M  1 loop /snap/snapd/14978
loop4                       7:4    0   47M  1 loop /snap/snapd/16292
loop5                       7:5    0 67.8M  1 loop /snap/lxd/22753
sda                         8:0    0   20G  0 disk 
├─sda1                      8:1    0    1M  0 part 
├─sda2                      8:2    0  1.5G  0 part /boot
└─sda3                      8:3    0 18.5G  0 part 
  └─ubuntu--vg-ubuntu--lv 253:0    0   10G  0 lvm  /
sr0                        11:0    1  1.2G  0 rom 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发现并没有检测出来新添加的硬盘&lt;/p&gt;
&lt;p&gt; 2、检测新硬盘&lt;/p&gt;
&lt;p&gt;方法1：可以重启电脑&lt;/p&gt;
&lt;p&gt;方法2： 重新扫描存储设备的scsi总线 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# host后面的数字不是固定的，以实际为准
root@ubuntu200404:~# echo &amp;#39;- - -&amp;#39; &amp;gt; /sys/class/scsi_host/host32/scan
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次使用lsblk命令查看发现已经多了sda的硬盘，说明成功了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@ubuntu200404:~# lsblk
NAME                      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
loop0                       7:0    0 61.9M  1 loop /snap/core20/1328
loop1                       7:1    0 67.2M  1 loop /snap/lxd/21835
loop2                       7:2    0   62M  1 loop /snap/core20/1587
loop3                       7:3    0 43.6M  1 loop /snap/snapd/14978
loop4                       7:4    0   47M  1 loop /snap/snapd/16292
loop5                       7:5    0 67.8M  1 loop /snap/lxd/22753
sda                         8:0    0   20G  0 disk 
├─sda1                      8:1    0    1M  0 part 
├─sda2                      8:2    0  1.5G  0 part /boot
└─sda3                      8:3    0 18.5G  0 part 
  └─ubuntu--vg-ubuntu--lv 253:0    0   10G  0 lvm  /
sdb                         8:16   0   20G  0 disk				# 新添加的硬盘 
sr0                        11:0    1  1.2G  0 rom
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2-2-partend命令&#34;&gt;&lt;a href=&#34;#2-2-2-partend命令&#34; class=&#34;headerlink&#34; title=&#34;2.2.2 partend命令&#34;&gt;&lt;/a&gt;2.2.2 partend命令&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;注意：parted的操作都是实时生效的，小心使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parted [选项]... [设备 [命令 [参数]...]...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;txt&#34;&gt;parted /dev/sdb mklabel gpt|msdos
parted /dev/sdb print
parted /dev/sdb mkpart primary 1 200 （默认M）
parted /dev/sdb rm 1
parted -l 列出所有硬盘分区信息
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2-3-分区工具fdisk和gdisk&#34;&gt;&lt;a href=&#34;#2-2-3-分区工具fdisk和gdisk&#34; class=&#34;headerlink&#34; title=&#34;2.2.3 分区工具fdisk和gdisk&#34;&gt;&lt;/a&gt;2.2.3 分区工具fdisk和gdisk&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;fdisk -l [-u] [device...] 查看分区
fdisk [device...] 管理MBR分区
gdisk [device...] 类fdisk 的GPT分区工具

# 范例：
fdisk /dev/sdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;子命令：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p 分区列表
t 更改分区类型
n 创建新分区
d 删除分区
v 校验分区
u 转换单位
w 保存并退出
q 不保存并退出
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;查看内核是否已经识别新的分区&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat /proc/partitions
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CentOS 7,8 同步分区表:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;partprobe
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-3-文件系统&#34;&gt;&lt;a href=&#34;#2-3-文件系统&#34; class=&#34;headerlink&#34; title=&#34;2.3 文件系统&#34;&gt;&lt;/a&gt;2.3 文件系统&lt;/h2&gt;&lt;h3 id=&#34;2-3-1-文件系统概念&#34;&gt;&lt;a href=&#34;#2-3-1-文件系统概念&#34; class=&#34;headerlink&#34; title=&#34;2.3.1 文件系统概念&#34;&gt;&lt;/a&gt;2.3.1 文件系统概念&lt;/h3&gt;&lt;p&gt;文件系统是操作系统用于明确存储设备或分区上的文件的方法和数据结构；即在存储设备上组织文件的&lt;br&gt;方法。操作系统中负责管理和存储文件信息的软件结构称为文件管理系统，简称文件系统&lt;br&gt;从系统角度来看，文件系统是对文件存储设备的空间进行组织和分配，负责文件存储并对存入的文件进&lt;br&gt;行保护和检索的系统。具体地说，它负责为用户建立文件，存入、读出、修改、转储文件，控制文件的&lt;br&gt;存取，安全控制，日志，压缩，加密等&lt;br&gt;支持的文件系统：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/lib/modules/`uname -r`/kernel/fs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(各种文件系统)[&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tcGFyaXNvbl9vZl9maWxlX3N5c3RlbXNd&#34;&gt;https://en.wikipedia.org/wiki/Comparison_of_file_systems]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;帮助：&lt;/strong&gt;man 5 fs&lt;/p&gt;
&lt;h3 id=&#34;2-3-2-文件系统类型&#34;&gt;&lt;a href=&#34;#2-3-2-文件系统类型&#34; class=&#34;headerlink&#34; title=&#34;2.3.2 文件系统类型&#34;&gt;&lt;/a&gt;2.3.2 文件系统类型&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Linux常用文件系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ext2：Extended file system 适用于那些分区容量不是太大，更新也不频繁的情况，例如 &amp;#x2F;boot 分&lt;br&gt;区&lt;/li&gt;
&lt;li&gt;ext3：是 ext2 的改进版本，其支持日志功能，能够帮助系统从非正常关机导致的异常中恢复&lt;/li&gt;
&lt;li&gt;ext4：是 ext 文件系统的最新版。提供了很多新的特性，包括纳秒级时间戳、创建和使用巨型文件&lt;br&gt;(16TB)、最大1EB的文件系统，以及速度的提升&lt;/li&gt;
&lt;li&gt;xfs：SGI，支持最大8EB的文件系统&lt;/li&gt;
&lt;li&gt;swap&lt;/li&gt;
&lt;li&gt;iso9660 光盘&lt;/li&gt;
&lt;li&gt;btrfs（Oracle）&lt;/li&gt;
&lt;li&gt;reiserfs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Windows 常用文件系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FAT32&lt;/li&gt;
&lt;li&gt;NTFS&lt;/li&gt;
&lt;li&gt;exFAT&lt;/li&gt;
&lt;li&gt;Unix：&lt;/li&gt;
&lt;li&gt;FFS（fast）&lt;/li&gt;
&lt;li&gt;UFS（unix）&lt;/li&gt;
&lt;li&gt;JFS2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;网络文件系统：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NFS&lt;/li&gt;
&lt;li&gt;CIFS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;集群文件系统：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GFS2&lt;/li&gt;
&lt;li&gt;OCFS2（oracle）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分布式文件系统：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fastdfs&lt;/li&gt;
&lt;li&gt;ceph&lt;/li&gt;
&lt;li&gt;moosefs&lt;/li&gt;
&lt;li&gt;mogilefs&lt;/li&gt;
&lt;li&gt;glusterfs&lt;/li&gt;
&lt;li&gt;Lustre&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;RAW：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;裸文件系统,未经处理或者未经格式化产生的文件系统&lt;br&gt;常用的文件系统特性：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FAT32&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最多只能支持16TB的文件系统和4GB的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NTFS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最多只能支持16EB的文件系统和16EB的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;EXT3&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最多只能支持32TB的文件系统和2TB的文件，实际只能容纳2TB的文件系统和16GB的文件&lt;/li&gt;
&lt;li&gt;Ext3目前只支持32000个子目录&lt;/li&gt;
&lt;li&gt;Ext3文件系统使用32位空间记录块数量和 inode数量&lt;/li&gt;
&lt;li&gt;当数据写入到Ext3文件系统中时，Ext3的数据块分配器每次只能分配一个4KB的块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;EXT4：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EXT4是Linux系统下的日志文件系统，是EXT3文件系统的后继版本&lt;/li&gt;
&lt;li&gt;Ext4的文件系统容量达到1EB，而支持单个文件则达到16TB&lt;/li&gt;
&lt;li&gt;理论上支持无限数量的子目录&lt;/li&gt;
&lt;li&gt;Ext4文件系统使用64位空间记录块数量和 inode数量&lt;/li&gt;
&lt;li&gt;Ext4的多块分配器支持一次调用分配多个数据块&lt;/li&gt;
&lt;li&gt;修复速度更快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;XFS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据所记录的日志在很短的时间内迅速恢复磁盘文件内容&lt;/li&gt;
&lt;li&gt;用优化算法，日志记录对整体文件操作影响非常小&lt;/li&gt;
&lt;li&gt;是一个全64-bit的文件系统，最大可以支持8EB的文件系统，而支持单个文件则达到8EB&lt;/li&gt;
&lt;li&gt;能以接近裸设备I&amp;#x2F;O的性能存储数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查前支持的文件系统：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat /proc/filesystems
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-3-3-文件系统的组成部分&#34;&gt;&lt;a href=&#34;#2-3-3-文件系统的组成部分&#34; class=&#34;headerlink&#34; title=&#34;2.3.3 文件系统的组成部分&#34;&gt;&lt;/a&gt;2.3.3 文件系统的组成部分&lt;/h3&gt;&lt;p&gt;内核中的模块：ext4, xfs, vfat&lt;br&gt;Linux的虚拟文件系统：VFS&lt;br&gt;用户空间的管理工具：mkfs.ext4, mkfs.xfs,mkfs.vfat&lt;/p&gt;
&lt;h3 id=&#34;2-3-4-文件系统选择管理&#34;&gt;&lt;a href=&#34;#2-3-4-文件系统选择管理&#34; class=&#34;headerlink&#34; title=&#34;2.3.4 文件系统选择管理&#34;&gt;&lt;/a&gt;2.3.4 文件系统选择管理&lt;/h3&gt;&lt;h4 id=&#34;2-3-4-1-创建文件系统&#34;&gt;&lt;a href=&#34;#2-3-4-1-创建文件系统&#34; class=&#34;headerlink&#34; title=&#34;2.3.4.1 创建文件系统&#34;&gt;&lt;/a&gt;2.3.4.1 创建文件系统&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;创建文件管理工具&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkfs命令：
(1) mkfs.FS_TYPE /dev/DEVICE
ext4
xfs
btrfs
vfat
(2) mkfs -t FS_TYPE /dev/DEVICE
-L &amp;#39;LABEL&amp;#39; 设定卷标
mke2fs：ext系列文件系统专用管理工具
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;常用选项：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-t &amp;#123;ext2|ext3|ext4|xfs&amp;#125; 指定文件系统类型
-b &amp;#123;1024|2048|4096&amp;#125; 指定块 block 大小
-L ‘LABEL’ 设置卷标
-j 相当于 -t ext3， mkfs.ext3 = mkfs -t ext3 = mke2fs -j = mke2fs -t ext3
-i # 为数据空间中每多少个字节创建一个inode；不应该小于block大
小
-N # 指定分区中创建多少个inode
-I 一个inode记录占用的磁盘空间大小，128---4096
-m # 默认5%,为管理人员预留空间占总空间的百分比
-O FEATURE[,...] 启用指定特性
-O ^FEATURE 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;案例：mkfs.ext4 &amp;#x2F;dev&amp;#x2F;sdb1&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@ubuntu200404:~# mkfs.ext4 /dev/sdb1
mke2fs 1.45.5 (07-Jan-2020)
Creating filesystem with 2621440 4k blocks and 655360 inodes
Filesystem UUID: a7ef4142-26e5-43dd-b9d0-24c4d09155a1
Superblock backups stored on blocks: 
    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done 

root@ubuntu200404:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-3-4-2-查看和管理分区信息&#34;&gt;&lt;a href=&#34;#2-3-4-2-查看和管理分区信息&#34; class=&#34;headerlink&#34; title=&#34;2.3.4.2 查看和管理分区信息&#34;&gt;&lt;/a&gt;2.3.4.2 查看和管理分区信息&lt;/h4&gt;&lt;p&gt;blkid 可以查看块设备属性信息&lt;br&gt;格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blkid [OPTION]... [DEVICE]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常用选项：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-U UUID 根据指定的UUID来查找对应的设备
-L LABEL 根据指定的LABEL来查找对应的设备
e2label：管理ext系列文件系统的LABEL
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;e2label DEVICE [LABEL]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@ubuntu200404:~# blkid /dev/sdb1
/dev/sdb1: UUID=&amp;quot;a7ef4142-26e5-43dd-b9d0-24c4d09155a1&amp;quot; TYPE=&amp;quot;ext4&amp;quot; PARTUUID=&amp;quot;db60ac71-01&amp;quot;
root@ubuntu200404:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;查找分区&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;findfs [options] LABEL=&amp;lt;label&amp;gt;
findfs [options] UUID=&amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;tune2fs：重新设定ext系列文件系统可调整参数的值&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-l 查看指定文件系统超级块信息；super block
-L &amp;#39;LABEL’ 修改卷标
-m # 修预留给管理员的空间百分比
-j 将ext2升级为ext3
-O 文件系统属性启用或禁用, -O ^has_journal
-o 调整文件系统的默认挂载选项，-o ^acl
-U UUID 修改UUID号
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;dumpe2fs：显示ext文件系统信息，将磁盘块分组管理&lt;/strong&gt;&lt;br&gt;-h：查看超级块信息，不显示分组信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;范例：查看ext文件系统的元数据和块组信息&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@ubuntu200404:~# dumpe2fs /dev/sdb1
dumpe2fs 1.45.5 (07-Jan-2020)
Filesystem volume name:   &amp;lt;none&amp;gt;
Last mounted on:          &amp;lt;not available&amp;gt;
Filesystem UUID:          a7ef4142-26e5-43dd-b9d0-24c4d09155a1
Filesystem magic number:  0xEF53
Filesystem revision #:    1 (dynamic)
Filesystem features:      has_journal ext_attr resize_inode dir_index filetype extent 64bit flex_bg sparse_super large_file huge_file dir_nlink extra_isize metadata_csum
Filesystem flags:         signed_directory_hash 
Default mount options:    user_xattr acl
Filesystem state:         clean
Errors behavior:          Continue
Filesystem OS type:       Linux
Inode count:              655360
Block count:              2621440
Reserved block count:     131072
Free blocks:              2554687
Free inodes:              655349
First block:              0
......
......
......
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;xfs_info：显示示挂载或已挂载的 xfs 文件系统信息&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xfs_info mountpoint|devname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xfs_info /dev/sda1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-3-4-3-文件系统检测和修复&#34;&gt;&lt;a href=&#34;#2-3-4-3-文件系统检测和修复&#34; class=&#34;headerlink&#34; title=&#34;2.3.4.3 文件系统检测和修复&#34;&gt;&lt;/a&gt;2.3.4.3 文件系统检测和修复&lt;/h4&gt;&lt;p&gt;文件系统夹故障常发生于死机或者非正常关机之后，挂载为文件系统标记为“no clean”&lt;br&gt;&lt;strong&gt;注意：一定不要在挂载状态下执行下面命令修复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;fsck: File System Check&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fsck.FS_TYPE
fsck -t FS_TYPE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：FS_TYPE 一定要与分区上已经文件类型相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用选项&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-a 自动修复
-r 交互式修复错误
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;e2fsck：ext系列文件专用的检测修复工具&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-y 自动回答为yes
-f 强制修复
-p 自动进行安全的修复文件系统问题
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;用法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;e2fsck /dev/sdb2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;xfs_repair：xfs文件系统专用检测修复工具&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;常用选项：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-f 修复文件，而设备
-n 只检查
-d 允许修复只读的挂载设备，在单用户下修复 / 时使用，然后立即reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;用法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xfs_repair /dev/sda1 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-4-挂载&#34;&gt;&lt;a href=&#34;#2-4-挂载&#34; class=&#34;headerlink&#34; title=&#34;2.4 挂载&#34;&gt;&lt;/a&gt;2.4 挂载&lt;/h2&gt;&lt;p&gt;挂载:将额外文件系统与根文件系统某现存的目录建立起关联关系，进而使得此目录做为其它文件访问入&lt;br&gt;口的行为&lt;br&gt;卸载:为解除此关联关系的过程&lt;br&gt;把设备关联挂载点：mount Point&lt;br&gt;挂载点下原有文件在挂载完成后会被临时隐藏，因此，挂载点目录一般为空&lt;br&gt;进程正在使用中的设备无法被卸载&lt;/p&gt;
&lt;h3 id=&#34;2-4-1-挂载文件系统-mount&#34;&gt;&lt;a href=&#34;#2-4-1-挂载文件系统-mount&#34; class=&#34;headerlink&#34; title=&#34;2.4.1 挂载文件系统 mount&#34;&gt;&lt;/a&gt;2.4.1 挂载文件系统 mount&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;格式&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mount [-fnrsvw] [-t vfstype] [-o options] device mountpoint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;device：指明要挂载的设备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设备文件：例如:&amp;#x2F;dev&amp;#x2F;sda5&lt;/li&gt;
&lt;li&gt;卷标：-L ‘LABEL’, 例如 -L ‘MYDATA’&lt;/li&gt;
&lt;li&gt;UUID： -U ‘UUID’：例如 -U ‘0c50523c-43f1-45e7-85c0-a126711d406e’&lt;/li&gt;
&lt;li&gt;伪文件系统名称：proc, sysfs, devtmpfs, configfs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mountpoint：挂载点目录必须事先存在，建议使用空目录&lt;br&gt;mount 常用命令选项  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-t fstype 指定要挂载的设备上的文件系统类型,如:ext4,xfs
-r readonly，只读挂载
-w read and write, 读写挂载,此为默认设置,可省略
-n 不更新/etc/mtab，mount不可见
-a 自动挂载所有支持自动挂载的设备(定义在了/etc/fstab文件中，且挂载选项中有
auto功能)
-L &amp;#39;LABEL&amp;#39; 以卷标指定挂载设备
-U &amp;#39;UUID&amp;#39; 以UUID指定要挂载的设备
-B, --bind 绑定目录到另一个目录上
-o options：(挂载文件系统的选项)，多个选项使用逗号分隔
async 异步模式,内存更改时,写入缓存区buffer,过一段时间再写到磁盘中，效率高，但不安全
sync 同步模式,内存更改时，同时写磁盘，安全，但效率低下
atime/noatime 包含目录和文件
diratime/nodiratime 目录的访问时间戳
auto/noauto 是否支持开机自动挂载，是否支持-a选项
exec/noexec 是否支持将文件系统上运行应用程序
dev/nodev 是否支持在此文件系统上使用设备文件
suid/nosuid 是否支持suid和sgid权限
remount 重新挂载
ro/rw 只读、读写
user/nouser 是否允许普通用户挂载此设备，/etc/fstab使用
acl/noacl 启用此文件系统上的acl功能
loop 使用loop设备
_netdev 当网络可用时才对网络资源进行挂载，如：NFS文件系统
defaults 相当于rw, suid, dev, exec, auto, nouser, async
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;挂载规则:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个挂载点同一时间只能挂载一个设备&lt;/li&gt;
&lt;li&gt;一个挂载点同一时间挂载了多个设备，只能看到最后一个设备的数据，其它设备上的数据将被隐藏&lt;/li&gt;
&lt;li&gt;一个设备可以同时挂载到多个挂载点&lt;/li&gt;
&lt;li&gt;通常挂载点一般是已存在空的目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;范例:挂载案例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@ubuntu200404:/data# mount /dev/sdb1 /data/mysql_mount/
root@ubuntu200404:/data# df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../image.assets/1659865748687.png&#34; alt=&#34;1659865748687&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-4-2-卸载文件系统-umount&#34;&gt;&lt;a href=&#34;#2-4-2-卸载文件系统-umount&#34; class=&#34;headerlink&#34; title=&#34;2.4.2 卸载文件系统 umount&#34;&gt;&lt;/a&gt;2.4.2 卸载文件系统 umount&lt;/h3&gt;&lt;p&gt;卸载时：可使用设备，也可以使用挂载点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;umount 设备名|挂载点
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-4-3-查看挂载情况&#34;&gt;&lt;a href=&#34;#2-4-3-查看挂载情况&#34; class=&#34;headerlink&#34; title=&#34;2.4.3 查看挂载情况&#34;&gt;&lt;/a&gt;2.4.3 查看挂载情况&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;查看挂载&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#通过查看/etc/mtab文件显示当前已挂载的所有设备
mount
#查看内核追踪到的已挂载的所有设备
cat /proc/mounts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;查看挂载点情况&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;findmnt MOUNT_POINT|device
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;查看正在访问指定文件系统的进程&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lsof MOUNT_POINT
fuser -v MOUNT_POINT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;终止所有在正访问指定的文件系统的进程&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fuser -km MOUNT_POINT
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-4-4-持久挂载&#34;&gt;&lt;a href=&#34;#2-4-4-持久挂载&#34; class=&#34;headerlink&#34; title=&#34;2.4.4 持久挂载&#34;&gt;&lt;/a&gt;2.4.4 持久挂载&lt;/h3&gt;&lt;p&gt;将挂载保存到 &amp;#x2F;etc&amp;#x2F;fstab 中可以下次开机时，自动启用挂载&lt;br&gt;&amp;#x2F;etc&amp;#x2F;fstab格式帮助：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;man 5 fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每行定义一个要挂载的文件系统,，其中包括共 6 项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要挂载的设备或伪文件系统设备文件&lt;br&gt;LABEL：LABEL&amp;#x3D;””&lt;br&gt;UUID：UUID&amp;#x3D;””&lt;br&gt;伪文件系统名称：proc, sysfs&lt;/li&gt;
&lt;li&gt;挂载点：必须是事先存在的目录&lt;/li&gt;
&lt;li&gt;文件系统类型：ext4，xfs，iso9660，nfs，none&lt;/li&gt;
&lt;li&gt;挂载选项：defaults ，acl，bind&lt;/li&gt;
&lt;li&gt;转储频率：0：不做备份 1：每天转储 2：每隔一天转储&lt;/li&gt;
&lt;li&gt;fsck检查的文件系统的顺序：允许的数字是0 1 2&lt;br&gt;0：不自检 ，1：首先自检；一般只有rootfs才用 2：非rootfs使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;添加新的挂载项，需要执行下面命令生效&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mount -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范例：centos7, 8 &amp;#x2F;etc&amp;#x2F;fstab 的分区UUID错误，无法启动&lt;/strong&gt;*&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;自动进入emergency mode,输入root 密码
#cat /proc/mounts 可以查看到/ 以rw方式挂载
#vim /etc/fstab
#reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范例：centos 6 &amp;#x2F;etc&amp;#x2F;fstab 的分区UUID错误，无法启动&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果/etc/fstab 的挂载设备出错，比如文件系统故障，并且文件系统检测项（即第6项为非0），将导致无
法启动
自动进入emergency mode,输入root 密码
#cat /proc/mounts 可以查看到/ 以ro方式挂载，无法直接修改配置文件
#mount -o remount,rw /
#vim /etc/fstab
将故障行的最后1项，即第6项修改为0，开机不检测此项挂载设备的健康性，从而忽略错误，能实现启动
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范例：&amp;#x2F;etc&amp;#x2F;fstab格式&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@ubuntu200404:/data# cat /etc/fstab 
# /etc/fstab: static file system information.
#
# Use &amp;#39;blkid&amp;#39; to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# &amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;       &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;
# / was on /dev/ubuntu-vg/ubuntu-lv during curtin installation
/dev/disk/by-id/dm-uuid-LVM-3aQ0WgB04ZXwNPYVAYy9ssb3Wd06E34ggUUxCcYQaVwAb0L03K40wpOxbnqqqa3f / ext4 defaults 0 1
# /boot was on /dev/sda2 during curtin installation
/dev/disk/by-uuid/5e8f9763-2db8-48d0-85e2-a26d76521e2f /boot ext4 defaults 0 1
/swap.img	none	swap	sw	0	0
root@ubuntu200404:/data# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范例：添加新的挂载点后修改&amp;#x2F;etc&amp;#x2F;fstab文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# /etc/fstab: static file system information.
# 
# Use &amp;#39;blkid&amp;#39; to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# &amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;       &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;
# / was on /dev/ubuntu-vg/ubuntu-lv during curtin installation
/dev/disk/by-id/dm-uuid-LVM-3aQ0WgB04ZXwNPYVAYy9ssb3Wd06E34ggUUxCcYQaVwAb0L03K40wpOxbnqqqa3f / ext4 defaults 0 1
# /boot was on /dev/sda2 during curtin installation
/dev/disk/by-uuid/5e8f9763-2db8-48d0-85e2-a26d76521e2f /boot ext4 defaults 0 1
/swap.img       none    swap    sw      0       0

# 添加该行后、重启系统
UUID=0e850a4a-028d-48b2-aa18-dd8b16090aa6  /data/mysql_mount  ext4  defaults  0  0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-5-处理交换文件和分区&#34;&gt;&lt;a href=&#34;#2-5-处理交换文件和分区&#34; class=&#34;headerlink&#34; title=&#34;2.5 处理交换文件和分区&#34;&gt;&lt;/a&gt;2.5 处理交换文件和分区&lt;/h2&gt;&lt;h3 id=&#34;2-5-1-swap分区&#34;&gt;&lt;a href=&#34;#2-5-1-swap分区&#34; class=&#34;headerlink&#34; title=&#34;2.5.1 swap分区&#34;&gt;&lt;/a&gt;2.5.1 swap分区&lt;/h3&gt;&lt;p&gt;swap交换分区是系统RAM的补充，swap 分区支持虚拟内存。当没有足够的 RAM 保存系统处理的数据&lt;br&gt;时会将数据写入 swap 分区，当系统缺乏 swap 空间时，内核会因 RAM 内存耗尽而终止进程。配置过&lt;br&gt;多 swap 空间会造成存储设备处于分配状态但闲置，造成浪费，过多 swap 空间还会掩盖内存泄露&lt;br&gt;注意：为优化性能，可以将swap 分布存放，或高性能磁盘存放  &lt;/p&gt;
&lt;h3 id=&#34;2-5-2-交换分区实现过程&#34;&gt;&lt;a href=&#34;#2-5-2-交换分区实现过程&#34; class=&#34;headerlink&#34; title=&#34;2.5.2 交换分区实现过程&#34;&gt;&lt;/a&gt;2.5.2 交换分区实现过程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;创建交换分区或者文件&lt;/li&gt;
&lt;li&gt;使用mkswap写入特殊签名&lt;/li&gt;
&lt;li&gt;在&amp;#x2F;etc&amp;#x2F;fstab文件中添加适当的条目&lt;/li&gt;
&lt;li&gt;使用swapon -a 激活交换空间&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;启用swap分区&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;swapon [OPTION]... [DEVICE]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;常用选项&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-a #激活所有的交换分区
-p PRIORITY #指定优先级(-1到32767之间)，值越大,优先级越高.也可在/etc/fstab文件中的第4列指
定：pri=value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范例:创建swap分区&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos8 ~]#mkswap /dev/sdc1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;禁用swap分区&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;swapoff [OPTION]... [DEVICE]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范例:禁用swap分区&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos8 ~]#sed -i.bak &amp;#39;/swap/d&amp;#39; /etc/fstab
[root@centos8 ~]#swapoff -a
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-5-3-swap的使用策略&#34;&gt;&lt;a href=&#34;#2-5-3-swap的使用策略&#34; class=&#34;headerlink&#34; title=&#34;2.5.3 swap的使用策略&#34;&gt;&lt;/a&gt;2.5.3 swap的使用策略&lt;/h3&gt;&lt;p&gt;&amp;#x2F;proc&amp;#x2F;sys&amp;#x2F;vm&amp;#x2F;swappiness 的值决定了当内存占用达到一定的百分比时，会启用swap分区的空间&lt;br&gt;使用规则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;当内存使用率达到100-swappiness时,会启用交换分区
简单地说这个参数定义了系统对swap的使用倾向，此值越大表示越倾向于使用swap。
可以设为0，这样做并不会禁止对swap的使用，只是最大限度地降低了使用swap的可能性
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#说明：CentOS7和8默认值为30，内存在使用到100-30=70%的时候，就开始出现有交换分区的使用。
[root@centos8 ~]# cat /proc/sys/vm/swappiness
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-6-磁盘常见工具&#34;&gt;&lt;a href=&#34;#2-6-磁盘常见工具&#34; class=&#34;headerlink&#34; title=&#34;2.6 磁盘常见工具&#34;&gt;&lt;/a&gt;2.6 磁盘常见工具&lt;/h2&gt;&lt;h3 id=&#34;2-6-1-df&#34;&gt;&lt;a href=&#34;#2-6-1-df&#34; class=&#34;headerlink&#34; title=&#34;2.6.1 df&#34;&gt;&lt;/a&gt;2.6.1 df&lt;/h3&gt;&lt;p&gt;文件系统空间实际真正占用等信息的查看工具 df&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df [OPTION]... [FILE]...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;常用选项&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-H 以10为单位
-T 文件系统类型
-h human-readable
-i inodes instead of blocks
-P 以Posix兼容的格式输出
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-6-3-du&#34;&gt;&lt;a href=&#34;#2-6-3-du&#34; class=&#34;headerlink&#34; title=&#34;2.6.3 du&#34;&gt;&lt;/a&gt;2.6.3 du&lt;/h3&gt;&lt;p&gt;查看某目录总体空间实际占用状态 du&lt;/p&gt;
&lt;p&gt;显示指定目录下面各个子目录的大小,单位为KB&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用选项&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-a --all 显示所有文件和目录的大小,默认只显示目录大小
-h human-readable
-s summary
--max-depth=# 指定最大目录层级
-x, --one-file-system #忽略不在同一个文件系统的目录
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;面试题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.df 和 du 区别?什么时候df &amp;gt;du（空分区的时候)&lt;br&gt;df 查看是文件系统的空间使用，包括元数据和数据，删除文件后，如果此文件正在使用，不会立即释放空间;du 查看是文件数据空间使用，不包括元数据，删除文件后空间立即释放。&lt;/p&gt;
&lt;p&gt;2.什么时候df &amp;lt; du?&lt;br&gt;目录内挂载有其它分区时的情况&lt;/p&gt;
&lt;p&gt;3.当删除文件但不释放空间时,有什么不同?&lt;br&gt;du 查看文件空间释放,df不释放&lt;/p&gt;
&lt;h1 id=&#34;3-RAID&#34;&gt;&lt;a href=&#34;#3-RAID&#34; class=&#34;headerlink&#34; title=&#34;3. RAID&#34;&gt;&lt;/a&gt;3. RAID&lt;/h1&gt; ]]></description>
        </item>
    </channel>
</rss>
